{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"rli",
				"rlImGui.h"
			],
			[
				"rlI",
				"rlImGuiBegin"
			],
			[
				"inc",
				"include"
			],
			[
				"img",
				"imgui.h>"
			],
			[
				"last",
				"lastHue"
			],
			[
				"HSV",
				"HSVtoRGB"
			],
			[
				"RGBto",
				"RGBtoHSV"
			],
			[
				"cur",
				"currentFg"
			],
			[
				"getM",
				"GetMousePosition"
			],
			[
				"checkC",
				"CheckCollisionPointRec"
			],
			[
				"getMo",
				"GetMousePosition"
			],
			[
				"ColorT",
				"ColorToHSV"
			],
			[
				"RG",
				"RGBtoHSV"
			],
			[
				"RGB",
				"RGBtoHSV"
			],
			[
				"vec",
				"Vector2"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"uin",
				"uint32_t"
			],
			[
				"hs",
				"hsv"
			],
			[
				"colo",
				"color/"
			],
			[
				"draw",
				"DrawText"
			],
			[
				"curr",
				"currentFg"
			],
			[
				"Conver",
				"ConvertRGBtoHSV"
			],
			[
				"Vec",
				"Vector3"
			],
			[
				"FLoat",
				"float"
			],
			[
				"Curr",
				"currentHSV"
			],
			[
				"ColorTo",
				"ColorToHSV"
			],
			[
				"Color",
				"ColorToHSV"
			],
			[
				"Float",
				"float"
			],
			[
				"rayGu",
				"raygui.h"
			],
			[
				"Mouse",
				"MOUSE_RIGHT_BUTTON"
			],
			[
				"isM",
				"IsMouseButtonPressed"
			],
			[
				"iSMou",
				"IsMouseButtonPressed"
			],
			[
				"red",
				"redrawStatus"
			],
			[
				"uniq",
				"unique_ptr"
			],
			[
				"getSc",
				"GetScreenHeight"
			],
			[
				"getMou",
				"GetMouseY"
			],
			[
				"isMous",
				"IsMouseButtonDown"
			],
			[
				"getMouse",
				"GetMouseY"
			],
			[
				"redr",
				"redrawStatus"
			],
			[
				"zoo",
				"zoomGhost"
			],
			[
				"zo",
				"zoomGhost"
			],
			[
				"gho",
				"zoomGhost"
			],
			[
				"stat",
				"status"
			],
			[
				"getWo",
				"GetWorldToScreen2D"
			],
			[
				"getS",
				"GetScreenHeight"
			],
			[
				"clea",
				"ClearBackground"
			],
			[
				"Draw",
				"DrawRectangle"
			],
			[
				"DrawRec",
				"DrawRectangleLines"
			],
			[
				"DrawTex",
				"DrawTextureRec"
			],
			[
				"getSC",
				"GetScreenWidth"
			],
			[
				"begin",
				"BeginDrawing"
			],
			[
				"main",
				"mainTerm"
			],
			[
				"Camera",
				"Camera2D"
			],
			[
				"Tes",
				"TestScene.hpp"
			],
			[
				"Test",
				"TestScene/"
			],
			[
				"end",
				"EndDrawing"
			],
			[
				"begi",
				"BeginTextureMode"
			],
			[
				"le",
				"length"
			],
			[
				"TerminalT",
				"TerminalDrawText"
			],
			[
				"TerminalDra",
				"TerminalDrawText"
			],
			[
				"te",
				"texture"
			],
			[
				"DrawRectangle",
				"DrawRectanglePro"
			],
			[
				"WIN",
				"WINDOW_SIZE"
			],
			[
				"Ter",
				"TerminalBasic"
			],
			[
				"FON",
				"FONT_ROW"
			],
			[
				"FO",
				"FONT_ROW"
			],
			[
				"FOn",
				"FONT_FILE"
			],
			[
				"res",
				"RESOURCE_PATH"
			],
			[
				"FONT",
				"FONT_SIZE"
			],
			[
				"FONT_",
				"FONT_FILE"
			],
			[
				"Fon",
				"FONT_SIZE"
			],
			[
				"Fo",
				"FONT_SIZE"
			],
			[
				"uti",
				"utils/"
			],
			[
				"clear",
				"ClearBackground"
			],
			[
				"RES",
				"RESOURCE_PATH"
			],
			[
				"L",
				"LoadFile"
			],
			[
				"ray",
				"raylib.h>"
			],
			[
				"KEY",
				"KEY_LEFT"
			],
			[
				"rayg",
				"raygui.h>"
			],
			[
				"ex",
				"external/"
			],
			[
				"Image",
				"ImageResize"
			],
			[
				"LoadIma",
				"LoadImageFromTexture"
			],
			[
				"ui",
				"uint8_t"
			],
			[
				"Terminal",
				"ValidateTerminal"
			],
			[
				"IsKe",
				"IsKeyDown"
			],
			[
				"KEY_BACK",
				"KEY_BACKSPACE"
			],
			[
				"col",
				"colorAlpha"
			],
			[
				"char",
				"characterInput"
			],
			[
				"pres",
				"pressDelay"
			],
			[
				"pre",
				"pressDelay"
			],
			[
				"rig",
				"right_down"
			],
			[
				"curso",
				"cursorInput"
			],
			[
				"Termi",
				"Terminal"
			],
			[
				"string",
				"stringstream"
			],
			[
				"IsK",
				"IsKeyReleased"
			],
			[
				"isK",
				"IsKeyDown"
			],
			[
				"move",
				"moveCursor"
			],
			[
				"KEY_R",
				"KEY_RIGHT"
			],
			[
				"index",
				"indexLine"
			],
			[
				"DrawRecT",
				"DrawRectangleLines"
			],
			[
				"uni",
				"unique_ptr"
			],
			[
				"make",
				"make_unique"
			],
			[
				"si",
				"size"
			],
			[
				"TerminalDraw",
				"TerminalDrawXY"
			],
			[
				"getT",
				"GetTerminalXY"
			],
			[
				"isKe",
				"IsKeyReleased"
			],
			[
				"Terminda",
				"TerminalDrawXY"
			],
			[
				"flo",
				"floor"
			],
			[
				"getMous",
				"GetMouseX"
			],
			[
				"MOUSE",
				"MOUSE_MIDDLE_BUTTON"
			],
			[
				"MOUS",
				"MOUSE_RIGHT_BUTTON"
			],
			[
				"GetMou",
				"GetMouseX"
			],
			[
				"beginMode",
				"BeginMode3D"
			],
			[
				"SCRE",
				"SCREEN_SIZE"
			],
			[
				"DrawTe",
				"DrawTexture"
			],
			[
				"drawTex",
				"DrawTexturePro"
			],
			[
				"gl",
				"glyph"
			],
			[
				"color",
				"Color"
			],
			[
				"Format",
				"PIXELFORMAT_UNCOMPRESSED_R8G8B8A8"
			],
			[
				"uncompress",
				"PIXELFORMAT_UNCOMPRESSED_R8G8B8A8"
			],
			[
				"DrawRecta",
				"DrawRectangle"
			],
			[
				"Term",
				"TerminalFont"
			],
			[
				"util",
				"utils/"
			],
			[
				"unloadC",
				"UnloadImageColors"
			],
			[
				"LoadTex",
				"LoadTextureFromImage"
			],
			[
				"BLA",
				"BLANK"
			],
			[
				"ut",
				"utils/"
			],
			[
				"Tex",
				"Texture2D"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/utils/Terminal.cpp",
			"settings":
			{
				"buffer_size": 6788,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAFkAAAAAAAAAWQAAAAAAAAAWAAAAI2luY2x1ZGUgIkdsb2JhbC5ocHAiCg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAADsAAAAAAAAAOwAAAAAAAAABAAAAaQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADwAAAAAAAAAPQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "nc"
					},
					"AgAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAD8AAAAAAAAAQAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAEIAAAAAAAAAQwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMAAAAAAAAARAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAEQAAAAAAAAARgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAEUAAAAAAAAARgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEYAAAAAAAAARwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEcAAAAAAAAASAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "utils",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "utils"
					},
					"AgAAAEUAAAAAAAAARQAAAAAAAAADAAAAdXRpRQAAAAAAAABKAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAEoAAAAAAAAASwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"sortText\":\"40549710Config\",\"kind\":9,\"insertText\":\"Config\",\"score\":1.3391399383544922,\"filterText\":\"Config\",\"insertTextFormat\":1,\"textEdit\":{\"range\":{\"start\":{\"character\":16,\"line\":4},\"end\":{\"character\":16,\"line\":4}},\"newText\":\"Config\"},\"label\":\" Config\"},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							25,
							60,
							1
						],
						"trigger": "Config"
					},
					"AQAAAEsAAAAAAAAAUQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFEAAAAAAAAAUgAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAFIAAAAAAAAAUwAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAFMAAAAAAAAAVAAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwAAAAAAAABTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAFQAAAAAAAAAVQAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"reindent",
					null,
					"AQAAAG8CAAAAAAAAcwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbwIAAAAAAABvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AwAAAPkDAAAAAAAA+gMAAAAAAAAAAAAA5QMAAAAAAADmAwAAAAAAAAAAAABvAgAAAAAAAG8CAAAAAAAABAAAACAgICA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA5QMAAAAAAADlAwAAAAAAAAAAAAAAAPC/+QMAAAAAAAD5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAAPcDAAAAAAAA+AMAAAAAAAAAAAAA4gMAAAAAAADjAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA4gMAAAAAAADiAwAAAAAAAAAAAAAAAPC/9wMAAAAAAAD3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAAPkDAAAAAAAA+gMAAAAAAAAAAAAA4wMAAAAAAADkAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA4wMAAAAAAADjAwAAAAAAAAAAAAAAAPC/+QMAAAAAAAD5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAPsDAAAAAAAA/AMAAAAAAAAAAAAA5AMAAAAAAADlAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA5AMAAAAAAADkAwAAAAAAAAAAAAAAAPC/+wMAAAAAAAD7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AgAAAP0DAAAAAAAA/gMAAAAAAAAAAAAA5QMAAAAAAADmAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA5QMAAAAAAADlAwAAAAAAAAAAAAAAAPC//QMAAAAAAAD9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAP8DAAAAAAAAAAQAAAAAAAAAAAAA5gMAAAAAAADnAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA5gMAAAAAAADmAwAAAAAAAAAAAAAAAPC//wMAAAAAAAD/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAAEEAAAAAAAAAgQAAAAAAAAAAAAA5wMAAAAAAADoAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA5wMAAAAAAADnAwAAAAAAAAAAAAAAAPC/AQQAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAAAMEAAAAAAAABAQAAAAAAAAAAAAA6AMAAAAAAADpAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA6AMAAAAAAADoAwAAAAAAAAAAAAAAAPC/AwQAAAAAAAADBAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "C"
					},
					"BAAAANUFAAAAAAAA1gUAAAAAAAAAAAAAyAUAAAAAAADJBQAAAAAAAAAAAABdBQAAAAAAAF4FAAAAAAAAAAAAAE4FAAAAAAAATwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAATgUAAAAAAABOBQAAAAAAAAAAAAAAAPC/XQUAAAAAAABdBQAAAAAAAAAAAAAAAPC/yAUAAAAAAADIBQAAAAAAAAAAAAAAAPC/1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "o"
					},
					"BAAAANkFAAAAAAAA2gUAAAAAAAAAAAAAywUAAAAAAADMBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/XwUAAAAAAABfBQAAAAAAAAAAAAAAAPC/ywUAAAAAAADLBQAAAAAAAAAAAAAAAPC/2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": "n"
					},
					"BAAAAN0FAAAAAAAA3gUAAAAAAAAAAAAAzgUAAAAAAADPBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAFAFAAAAAAAAUQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUAUAAAAAAABQBQAAAAAAAAAAAAAAAPC/YQUAAAAAAABhBQAAAAAAAAAAAAAAAPC/zgUAAAAAAADOBQAAAAAAAAAAAAAAAPC/3QUAAAAAAADdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "f"
					},
					"BAAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA0QUAAAAAAADSBQAAAAAAAAAAAABjBQAAAAAAAGQFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUQUAAAAAAABRBQAAAAAAAAAAAAAAAPC/YwUAAAAAAABjBQAAAAAAAAAAAAAAAPC/0QUAAAAAAADRBQAAAAAAAAAAAAAAAPC/4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA1AUAAAAAAADVBQAAAAAAAAAAAABlBQAAAAAAAGYFAAAAAAAAAAAAAFIFAAAAAAAAUwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUgUAAAAAAABSBQAAAAAAAAAAAAAAAPC/ZQUAAAAAAABlBQAAAAAAAAAAAAAAAPC/1AUAAAAAAADUBQAAAAAAAAAAAAAAAPC/5QUAAAAAAADlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "g"
					},
					"BAAAAOkFAAAAAAAA6gUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAABnBQAAAAAAAGgFAAAAAAAAAAAAAFMFAAAAAAAAVAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUwUAAAAAAABTBQAAAAAAAAAAAAAAAPC/ZwUAAAAAAABnBQAAAAAAAAAAAAAAAPC/1wUAAAAAAADXBQAAAAAAAAAAAAAAAPC/6QUAAAAAAADpBQAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA2gUAAAAAAADbBQAAAAAAAAAAAABpBQAAAAAAAGoFAAAAAAAAAAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAVAUAAAAAAABUBQAAAAAAAAAAAAAAAPC/aQUAAAAAAABpBQAAAAAAAAAAAAAAAPC/2gUAAAAAAADaBQAAAAAAAAAAAAAAAPC/7QUAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAABrBQAAAAAAAGwFAAAAAAAAAAAAAFUFAAAAAAAAVgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAVQUAAAAAAABVBQAAAAAAAAAAAAAAAPC/awUAAAAAAABrBQAAAAAAAAAAAAAAAPC/3QUAAAAAAADdBQAAAAAAAAAAAAAAAPC/8QUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": "C"
					},
					"BAAAACAHAAAAAAAAIQcAAAAAAAAAAAAAEwcAAAAAAAAUBwAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAALkGAAAAAAAAugYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAuQYAAAAAAAC5BgAAAAAAAAAAAAAAAPC/7gYAAAAAAADuBgAAAAAAAAAAAAAAAPC/EwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/IAcAAAAAAAAgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "o"
					},
					"BAAAACQHAAAAAAAAJQcAAAAAAAAAAAAAFgcAAAAAAAAXBwAAAAAAAAAAAADwBgAAAAAAAPEGAAAAAAAAAAAAALoGAAAAAAAAuwYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAugYAAAAAAAC6BgAAAAAAAAAAAAAAAPC/8AYAAAAAAADwBgAAAAAAAAAAAAAAAPC/FgcAAAAAAAAWBwAAAAAAAAAAAAAAAPC/JAcAAAAAAAAkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "n"
					},
					"BAAAACgHAAAAAAAAKQcAAAAAAAAAAAAAGQcAAAAAAAAaBwAAAAAAAAAAAADyBgAAAAAAAPMGAAAAAAAAAAAAALsGAAAAAAAAvAYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAuwYAAAAAAAC7BgAAAAAAAAAAAAAAAPC/8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/GQcAAAAAAAAZBwAAAAAAAAAAAAAAAPC/KAcAAAAAAAAoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "f"
					},
					"BAAAACwHAAAAAAAALQcAAAAAAAAAAAAAHAcAAAAAAAAdBwAAAAAAAAAAAAD0BgAAAAAAAPUGAAAAAAAAAAAAALwGAAAAAAAAvQYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAvAYAAAAAAAC8BgAAAAAAAAAAAAAAAPC/9AYAAAAAAAD0BgAAAAAAAAAAAAAAAPC/HAcAAAAAAAAcBwAAAAAAAAAAAAAAAPC/LAcAAAAAAAAsBwAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAADAHAAAAAAAAMQcAAAAAAAAAAAAAHwcAAAAAAAAgBwAAAAAAAAAAAAD2BgAAAAAAAPcGAAAAAAAAAAAAAL0GAAAAAAAAvgYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAvQYAAAAAAAC9BgAAAAAAAAAAAAAAAPC/9gYAAAAAAAD2BgAAAAAAAAAAAAAAAPC/HwcAAAAAAAAfBwAAAAAAAAAAAAAAAPC/MAcAAAAAAAAwBwAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "g"
					},
					"BAAAADQHAAAAAAAANQcAAAAAAAAAAAAAIgcAAAAAAAAjBwAAAAAAAAAAAAD4BgAAAAAAAPkGAAAAAAAAAAAAAL4GAAAAAAAAvwYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAvgYAAAAAAAC+BgAAAAAAAAAAAAAAAPC/+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/IgcAAAAAAAAiBwAAAAAAAAAAAAAAAPC/NAcAAAAAAAA0BwAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAADgHAAAAAAAAOQcAAAAAAAAAAAAAJQcAAAAAAAAmBwAAAAAAAAAAAAD6BgAAAAAAAPsGAAAAAAAAAAAAAL8GAAAAAAAAwAYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAvwYAAAAAAAC/BgAAAAAAAAAAAAAAAPC/+gYAAAAAAAD6BgAAAAAAAAAAAAAAAPC/JQcAAAAAAAAlBwAAAAAAAAAAAAAAAPC/OAcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAADwHAAAAAAAAPQcAAAAAAAAAAAAAKAcAAAAAAAApBwAAAAAAAAAAAAD8BgAAAAAAAP0GAAAAAAAAAAAAAMAGAAAAAAAAwQYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAwAYAAAAAAADABgAAAAAAAAAAAAAAAPC//AYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/KAcAAAAAAAAoBwAAAAAAAAAAAAAAAPC/PAcAAAAAAAA8BwAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"insert",
					{
						"characters": "C"
					},
					"BAAAAKcKAAAAAAAAqAoAAAAAAAAAAAAAmgoAAAAAAACbCgAAAAAAAAAAAABfCgAAAAAAAGAKAAAAAAAAAAAAAFAKAAAAAAAAUQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUAoAAAAAAABQCgAAAAAAAAAAAAAAAPC/XwoAAAAAAABfCgAAAAAAAAAAAAAAAPC/mgoAAAAAAACaCgAAAAAAAAAAAAAAAPC/pwoAAAAAAACnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "o"
					},
					"BAAAAKsKAAAAAAAArAoAAAAAAAAAAAAAnQoAAAAAAACeCgAAAAAAAAAAAABhCgAAAAAAAGIKAAAAAAAAAAAAAFEKAAAAAAAAUgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUQoAAAAAAABRCgAAAAAAAAAAAAAAAPC/YQoAAAAAAABhCgAAAAAAAAAAAAAAAPC/nQoAAAAAAACdCgAAAAAAAAAAAAAAAPC/qwoAAAAAAACrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "n"
					},
					"BAAAAK8KAAAAAAAAsAoAAAAAAAAAAAAAoAoAAAAAAAChCgAAAAAAAAAAAABjCgAAAAAAAGQKAAAAAAAAAAAAAFIKAAAAAAAAUwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUgoAAAAAAABSCgAAAAAAAAAAAAAAAPC/YwoAAAAAAABjCgAAAAAAAAAAAAAAAPC/oAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/rwoAAAAAAACvCgAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert",
					{
						"characters": "f"
					},
					"BAAAALMKAAAAAAAAtAoAAAAAAAAAAAAAowoAAAAAAACkCgAAAAAAAAAAAABlCgAAAAAAAGYKAAAAAAAAAAAAAFMKAAAAAAAAVAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAUwoAAAAAAABTCgAAAAAAAAAAAAAAAPC/ZQoAAAAAAABlCgAAAAAAAAAAAAAAAPC/owoAAAAAAACjCgAAAAAAAAAAAAAAAPC/swoAAAAAAACzCgAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAALcKAAAAAAAAuAoAAAAAAAAAAAAApgoAAAAAAACnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAFQKAAAAAAAAVQoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAVAoAAAAAAABUCgAAAAAAAAAAAAAAAPC/ZwoAAAAAAABnCgAAAAAAAAAAAAAAAPC/pgoAAAAAAACmCgAAAAAAAAAAAAAAAPC/twoAAAAAAAC3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "g"
					},
					"BAAAALsKAAAAAAAAvAoAAAAAAAAAAAAAqQoAAAAAAACqCgAAAAAAAAAAAABpCgAAAAAAAGoKAAAAAAAAAAAAAFUKAAAAAAAAVgoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAVQoAAAAAAABVCgAAAAAAAAAAAAAAAPC/aQoAAAAAAABpCgAAAAAAAAAAAAAAAPC/qQoAAAAAAACpCgAAAAAAAAAAAAAAAPC/uwoAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": "::"
					},
					"CAAAAL8KAAAAAAAAwAoAAAAAAAAAAAAArAoAAAAAAACtCgAAAAAAAAAAAABrCgAAAAAAAGwKAAAAAAAAAAAAAFYKAAAAAAAAVwoAAAAAAAAAAAAAwwoAAAAAAADECgAAAAAAAAAAAACvCgAAAAAAALAKAAAAAAAAAAAAAG0KAAAAAAAAbgoAAAAAAAAAAAAAVwoAAAAAAABYCgAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAVgoAAAAAAABWCgAAAAAAAAAAAAAAAPC/awoAAAAAAABrCgAAAAAAAAAAAAAAAPC/rAoAAAAAAACsCgAAAAAAAAAAAAAAAPC/vwoAAAAAAAC/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": "C"
					},
					"BAAAANYLAAAAAAAA1wsAAAAAAAAAAAAAyQsAAAAAAADKCwAAAAAAAAAAAACoCwAAAAAAAKkLAAAAAAAAAAAAAHcLAAAAAAAAeAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAdwsAAAAAAAB3CwAAAAAAAAAAAAAAAPC/qAsAAAAAAACoCwAAAAAAAAAAAAAAAPC/yQsAAAAAAADJCwAAAAAAAAAAAAAAAPC/1gsAAAAAAADWCwAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "o"
					},
					"BAAAANoLAAAAAAAA2wsAAAAAAAAAAAAAzAsAAAAAAADNCwAAAAAAAAAAAACqCwAAAAAAAKsLAAAAAAAAAAAAAHgLAAAAAAAAeQsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAeAsAAAAAAAB4CwAAAAAAAAAAAAAAAPC/qgsAAAAAAACqCwAAAAAAAAAAAAAAAPC/zAsAAAAAAADMCwAAAAAAAAAAAAAAAPC/2gsAAAAAAADaCwAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "n"
					},
					"BAAAAN4LAAAAAAAA3wsAAAAAAAAAAAAAzwsAAAAAAADQCwAAAAAAAAAAAACsCwAAAAAAAK0LAAAAAAAAAAAAAHkLAAAAAAAAegsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAeQsAAAAAAAB5CwAAAAAAAAAAAAAAAPC/rAsAAAAAAACsCwAAAAAAAAAAAAAAAPC/zwsAAAAAAADPCwAAAAAAAAAAAAAAAPC/3gsAAAAAAADeCwAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "f"
					},
					"BAAAAOILAAAAAAAA4wsAAAAAAAAAAAAA0gsAAAAAAADTCwAAAAAAAAAAAACuCwAAAAAAAK8LAAAAAAAAAAAAAHoLAAAAAAAAewsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAegsAAAAAAAB6CwAAAAAAAAAAAAAAAPC/rgsAAAAAAACuCwAAAAAAAAAAAAAAAPC/0gsAAAAAAADSCwAAAAAAAAAAAAAAAPC/4gsAAAAAAADiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAAOYLAAAAAAAA5wsAAAAAAAAAAAAA1QsAAAAAAADWCwAAAAAAAAAAAACwCwAAAAAAALELAAAAAAAAAAAAAHsLAAAAAAAAfAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAewsAAAAAAAB7CwAAAAAAAAAAAAAAAPC/sAsAAAAAAACwCwAAAAAAAAAAAAAAAPC/1QsAAAAAAADVCwAAAAAAAAAAAAAAAPC/5gsAAAAAAADmCwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "g"
					},
					"BAAAAOoLAAAAAAAA6wsAAAAAAAAAAAAA2AsAAAAAAADZCwAAAAAAAAAAAACyCwAAAAAAALMLAAAAAAAAAAAAAHwLAAAAAAAAfQsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAfAsAAAAAAAB8CwAAAAAAAAAAAAAAAPC/sgsAAAAAAACyCwAAAAAAAAAAAAAAAPC/2AsAAAAAAADYCwAAAAAAAAAAAAAAAPC/6gsAAAAAAADqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAAO4LAAAAAAAA7wsAAAAAAAAAAAAA2wsAAAAAAADcCwAAAAAAAAAAAAC0CwAAAAAAALULAAAAAAAAAAAAAH0LAAAAAAAAfgsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/tAsAAAAAAAC0CwAAAAAAAAAAAAAAAPC/2wsAAAAAAADbCwAAAAAAAAAAAAAAAPC/7gsAAAAAAADuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"insert",
					{
						"characters": ":"
					},
					"BAAAAPILAAAAAAAA8wsAAAAAAAAAAAAA3gsAAAAAAADfCwAAAAAAAAAAAAC2CwAAAAAAALcLAAAAAAAAAAAAAH4LAAAAAAAAfwsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAAEAAAAfgsAAAAAAAB+CwAAAAAAAAAAAAAAAPC/tgsAAAAAAAC2CwAAAAAAAAAAAAAAAPC/3gsAAAAAAADeCwAAAAAAAAAAAAAAAPC/8gsAAAAAAADyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"left_delete",
					null,
					"AQAAADsAAAAAAAAAOwAAAAAAAAAbAAAAI2luY2x1ZGUgInV0aWxzL0NvbmZpZy5ocHAi",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVgAAAAAAAAA7AAAAAAAAAAAAAAAAAAAA"
				],
				[
					265,
					1,
					"left_delete",
					null,
					"AQAAADoAAAAAAAAAOgAAAAAAAAABAAAACg",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAABgDAAAAAAAAGQMAAAAAAAAAAAAAGQMAAAAAAAAZAwAAAAAAAAgAAAB1aW50MTZfdAgDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAJAwAAAAAAAAgAAAB1aW50MTZfdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAACAMAAAAAAAAQAwAAAAAAAAAAAAAAAPC/GAMAAAAAAAAgAwAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAABIDAAAAAAAAEwMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAACQMAAAAAAAAJAwAAAAAAAAAAAAAAAPC/EgMAAAAAAAASAwAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAABQDAAAAAAAAFQMAAAAAAAAAAAAACgMAAAAAAAALAwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAACgMAAAAAAAAKAwAAAAAAAAAAAAAAAPC/FAMAAAAAAAAUAwAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AgAAAEQBAAAAAAAARQEAAAAAAAAAAAAARQEAAAAAAABFAQAAAAAAAAgAAAB1aW50MTZfdA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEUBAAAAAAAARgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARQEAAAAAAABFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEYBAAAAAAAARwEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARgEAAAAAAABGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEsBAAAAAAAATAEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEwBAAAAAAAATQEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"paste",
					null,
					"AQAAAE0BAAAAAAAAYgEAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEcCAAAAAAAASAIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAARwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgCAAAAAAAASQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASAIAAAAAAABIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAEkCAAAAAAAASgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASQIAAAAAAABJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEoCAAAAAAAASwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASgIAAAAAAABKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAEsCAAAAAAAATAIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASwIAAAAAAABLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"sortText\":\"3f513d18width\",\"kind\":6,\"insertText\":\"width\",\"detail\":\"int\",\"score\":5.461292266845703,\"filterText\":\"width\",\"label\":\" width\",\"textEdit\":{\"range\":{\"start\":{\"character\":29,\"line\":18},\"end\":{\"character\":29,\"line\":18}},\"newText\":\"width\"},\"insertTextFormat\":1},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							171,
							376,
							1
						],
						"trigger": "width"
					},
					"BAAAAEsCAAAAAAAASwIAAAAAAAABAAAAZEoCAAAAAAAASgIAAAAAAAABAAAAaUkCAAAAAAAASQIAAAAAAAABAAAAd0kCAAAAAAAATgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATAIAAAAAAABMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE4CAAAAAAAATwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATgIAAAAAAABOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					388,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE8CAAAAAAAAUAIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATwIAAAAAAABPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAFACAAAAAAAAUQIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUAIAAAAAAABQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFECAAAAAAAAUgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQIAAAAAAABRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAFICAAAAAAAAUwIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUgIAAAAAAABSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"sortText\":\"3f513d18height\",\"kind\":6,\"insertText\":\"height\",\"detail\":\"int\",\"score\":5.461292266845703,\"filterText\":\"height\",\"label\":\" height\",\"textEdit\":{\"range\":{\"start\":{\"character\":36,\"line\":18},\"end\":{\"character\":36,\"line\":18}},\"newText\":\"height\"},\"insertTextFormat\":1},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							177,
							388,
							1
						],
						"trigger": "height"
					},
					"BAAAAFICAAAAAAAAUgIAAAAAAAABAAAAaVECAAAAAAAAUQIAAAAAAAABAAAAZVACAAAAAAAAUAIAAAAAAAABAAAAaFACAAAAAAAAVgIAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUwIAAAAAAABTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"",
					null,
					"CQAAANQLAAAAAAAA3QsAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueHILAAAAAAAAewsAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueKUKAAAAAAAArgoAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueEsKAAAAAAAAVAoAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueB4HAAAAAAAAJwcAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueLQGAAAAAAAAvQYAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueNMFAAAAAAAA3AUAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueEkFAAAAAAAAUgUAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueNwDAAAAAAAA5QMAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3AMAAAAAAADvAwAAAAAAAAAAAAAAAPC/"
				],
				[
					424,
					1,
					"",
					null,
					"CQAAAI8LAAAAAAAAmQsAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueVsLAAAAAAAAZQsAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueXQKAAAAAAAAfgoAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueSYKAAAAAAAAMAoAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueQEHAAAAAAAACwcAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueckGAAAAAAAA0wYAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUuecoFAAAAAAAA1AUAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueUwFAAAAAAAAVgUAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUuee4DAAAAAAAA+AMAAAAAAAATAAAAQ29uZmlnOjpGT05UX1NJWkUueQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA7gMAAAAAAAABBAAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"",
					null,
					"CQAAADwLAAAAAAAASgsAAAAAAAAJAAAAdG1mLndpZHRo7QoAAAAAAAD7CgAAAAAAAAkAAAB0bWYud2lkdGgzCgAAAAAAAEEKAAAAAAAACQAAAHRtZi53aWR0aOwJAAAAAAAA+gkAAAAAAAAJAAAAdG1mLndpZHRo0gYAAAAAAADgBgAAAAAAAAkAAAB0bWYud2lkdGh7BgAAAAAAAIkGAAAAAAAACQAAAHRtZi53aWR0aK0FAAAAAAAAuwUAAAAAAAAJAAAAdG1mLndpZHRoNgUAAAAAAABEBQAAAAAAAAkAAAB0bWYud2lkdGjcAwAAAAAAAOoDAAAAAAAACQAAAHRtZi53aWR0aA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgUAAAAAAAA/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"",
					null,
					"CQAAAHQLAAAAAAAAgwsAAAAAAAAKAAAAdG1mLmhlaWdodEQLAAAAAAAAUwsAAAAAAAAKAAAAdG1mLmhlaWdodGEKAAAAAAAAcAoAAAAAAAAKAAAAdG1mLmhlaWdodBcKAAAAAAAAJgoAAAAAAAAKAAAAdG1mLmhlaWdodPYGAAAAAAAABQcAAAAAAAAKAAAAdG1mLmhlaWdodMIGAAAAAAAA0QYAAAAAAAAKAAAAdG1mLmhlaWdodMcFAAAAAAAA1gUAAAAAAAAKAAAAdG1mLmhlaWdodE0FAAAAAAAAXAUAAAAAAAAKAAAAdG1mLmhlaWdodPMDAAAAAAAAAgQAAAAAAAAKAAAAdG1mLmhlaWdodA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					482,
					1,
					"left_delete",
					null,
					"AgAAAPMDAAAAAAAA8wMAAAAAAAAFAAAAdGVybS7cAwAAAAAAANwDAAAAAAAABQAAAHRlcm0u",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAA3AMAAAAAAADhAwAAAAAAAAAAAAAAAPC/8wMAAAAAAAD4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANAUAAAAAAAA0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAADUFAAAAAAAANgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAADYFAAAAAAAANwUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANgUAAAAAAAA2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADgFAAAAAAAAOQUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"paste",
					null,
					"AQAAAE0FAAAAAAAAVAUAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATQUAAAAAAABNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					523,
					1,
					"paste",
					null,
					"AQAAAI0GAAAAAAAAlAYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjQYAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"paste",
					null,
					"AQAAAMwGAAAAAAAA0wYAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAzAYAAAAAAADMBgAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"paste",
					null,
					"AQAAAAwHAAAAAAAAEwcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"paste",
					null,
					"AQAAACMHAAAAAAAAKgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAIwcAAAAAAAAjBwAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"paste",
					null,
					"AQAAADwKAAAAAAAAQwoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAPAoAAAAAAAA8CgAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"paste",
					null,
					"AQAAAFUKAAAAAAAAXAoAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAVQoAAAAAAABVCgAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"paste",
					null,
					"AQAAAFELAAAAAAAAWAsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAUQsAAAAAAABRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"paste",
					null,
					"AQAAAIwLAAAAAAAAkwsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAjAsAAAAAAACMCwAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"paste",
					null,
					"AQAAAMgLAAAAAAAAzwsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAyAsAAAAAAADICwAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"paste",
					null,
					"AQAAAN8LAAAAAAAA5gsAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA3wsAAAAAAADfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"",
					null,
					"AwAAAGcTAAAAAAAAdRMAAAAAAAALAAAARk9OVF9TSVpFLng8EwAAAAAAAEoTAAAAAAAACwAAAEZPTlRfU0laRS54gxIAAAAAAACREgAAAAAAAAsAAABGT05UX1NJWkUueA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAgxIAAAAAAACOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"",
					null,
					"AwAAAIMTAAAAAAAAkhMAAAAAAAALAAAARk9OVF9TSVpFLnlaEwAAAAAAAGkTAAAAAAAACwAAAEZPTlRfU0laRS55tRIAAAAAAADEEgAAAAAAAAsAAABGT05UX1NJWkUueQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAWhMAAAAAAABlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOkVAAAAAAAA6hUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkVAAAAAAAA6RUAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOoVAAAAAAAA6xUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoVAAAAAAAA6hUAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"paste",
					null,
					"AQAAAOsVAAAAAAAAghYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsVAAAAAAAA6xUAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAIEWAAAAAAAAgRYAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIWAAAAAAAAghYAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"left_delete",
					null,
					"AQAAAIAWAAAAAAAAgBYAAAAAAAABAAAAOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEWAAAAAAAAgRYAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAWAAAAAAAAgRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAWAAAAAAAAgBYAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIEWAAAAAAAAgxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEWAAAAAAAAgRYAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAIIWAAAAAAAAgxYAAAAAAAAAAAAAgxYAAAAAAACEFgAAAAAAAAAAAACDFgAAAAAAAIcWAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIWAAAAAAAAghYAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AgAAADUWAAAAAAAANRYAAAAAAAABAAAAO4IWAAAAAAAAghYAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYWAAAAAAAANhYAAAAAAAD////////vfw"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADUWAAAAAAAANhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUWAAAAAAAANRYAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADYWAAAAAAAAOBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYWAAAAAAAANhYAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADcWAAAAAAAAOBYAAAAAAAAAAAAAOBYAAAAAAAA5FgAAAAAAAAAAAAA4FgAAAAAAADwWAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADcWAAAAAAAANxYAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD4WAAAAAAAAPxYAAAAAAAAAAAAAOBYAAAAAAAA4FgAAAAAAAAQAAAAgICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4WAAAAAAAAPhYAAAAAAAAAAAAAAABCQA"
				],
				[
					47,
					1,
					"reindent",
					null,
					"AQAAAIgWAAAAAAAAjBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgWAAAAAAAAiBYAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAIwWAAAAAAAAjRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwWAAAAAAAAjBYAAAAAAAAAAAAAAADwvw"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAI0WAAAAAAAAjhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0WAAAAAAAAjRYAAAAAAAAAAAAAAADwvw"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAI4WAAAAAAAAjxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4WAAAAAAAAjhYAAAAAAAAAAAAAAADwvw"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAI8WAAAAAAAAkBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8WAAAAAAAAjxYAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAJAWAAAAAAAAkRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAWAAAAAAAAkBYAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAJEWAAAAAAAAkhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEWAAAAAAAAkRYAAAAAAAAAAAAAAADwvw"
				],
				[
					63,
					1,
					"insert_completion",
					{
						"completion": "Terminal",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Terminal"
					},
					"AgAAAIwWAAAAAAAAjBYAAAAAAAAGAAAAVGVybWlujBYAAAAAAACUFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIWAAAAAAAAkhYAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAJQWAAAAAAAAlRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQWAAAAAAAAlBYAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJUWAAAAAAAAlhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUWAAAAAAAAlRYAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAJYWAAAAAAAAlxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYWAAAAAAAAlhYAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"insert_completion",
					{
						"completion": "TerminalDrawText",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TerminalDrawText"
					},
					"AgAAAIwWAAAAAAAAjBYAAAAAAAALAAAAVGVybWluYWxEcmGMFgAAAAAAAJwWAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcWAAAAAAAAlxYAAAAAAAAAAAAAAADwvw"
				],
				[
					79,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJwWAAAAAAAAnhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJwWAAAAAAAAnBYAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAJ0WAAAAAAAAnhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0WAAAAAAAAnRYAAAAAAAAAAAAAAADwvw"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAJ4WAAAAAAAAnxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4WAAAAAAAAnhYAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJ8WAAAAAAAAoBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8WAAAAAAAAnxYAAAAAAAAAAAAAAADwvw"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAKAWAAAAAAAAoRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAWAAAAAAAAoBYAAAAAAAAAAAAAAADwvw"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKEWAAAAAAAAohYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEWAAAAAAAAoRYAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIWAAAAAAAAoxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIWAAAAAAAAohYAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAKMWAAAAAAAApBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMWAAAAAAAAoxYAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAKQWAAAAAAAApRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQWAAAAAAAApBYAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKUWAAAAAAAAphYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUWAAAAAAAApRYAAAAAAAAAAAAAAADwvw"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAKYWAAAAAAAApxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYWAAAAAAAAphYAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAKcWAAAAAAAAqBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcWAAAAAAAApxYAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKgWAAAAAAAAqRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgWAAAAAAAAqBYAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKkWAAAAAAAAqhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkWAAAAAAAAqRYAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "po"
					},
					"AgAAAKoWAAAAAAAAqxYAAAAAAAAAAAAAqxYAAAAAAACsFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoWAAAAAAAAqhYAAAAAAAAAAAAAAADwvw"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKwWAAAAAAAArRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwWAAAAAAAArBYAAAAAAAAAAAAAAADwvw"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAK0WAAAAAAAArhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0WAAAAAAAArRYAAAAAAAAAAAAAAADwvw"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAK4WAAAAAAAArxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4WAAAAAAAArhYAAAAAAAAAAAAAAADwvw"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK8WAAAAAAAAsBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8WAAAAAAAArxYAAAAAAAAAAAAAAADwvw"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALAWAAAAAAAAsRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAWAAAAAAAAsBYAAAAAAAAAAAAAAADwvw"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALEWAAAAAAAAshYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEWAAAAAAAAsRYAAAAAAAAAAAAAAADwvw"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAALIWAAAAAAAAsxYAAAAAAAAAAAAAsxYAAAAAAAC0FgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIWAAAAAAAAshYAAAAAAAAAAAAAAADwvw"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALUWAAAAAAAAthYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUWAAAAAAAAtRYAAAAAAAAAAAAAAADwvw"
				],
				[
					135,
					1,
					"reindent",
					null,
					"AQAAADgWAAAAAAAAPBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgWAAAAAAAAOBYAAAAAAAAAAAAAAOB5QA"
				],
				[
					143,
					1,
					"paste_and_indent",
					null,
					"AQAAADwWAAAAAAAAcRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwWAAAAAAAAPBYAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"paste",
					null,
					"AgAAAFkWAAAAAAAAZxYAAAAAAAAAAAAAZxYAAAAAAABnFgAAAAAAABIAAABkb190aGluZ3Nfd2l0aChjKTs",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFkWAAAAAAAAaxYAAAAAAAAAAAAAAADwvw"
				],
				[
					169,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcWAAAAAAAAZxYAAAAAAAAAAAAAAADwvw"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGgWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgWAAAAAAAAaBYAAAAAAAAAAAAAAADwvw"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAGkWAAAAAAAAahYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkWAAAAAAAAaRYAAAAAAAAAAAAAAADwvw"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGoWAAAAAAAAaxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoWAAAAAAAAahYAAAAAAAAAAAAAAADwvw"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAGsWAAAAAAAAbBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsWAAAAAAAAaxYAAAAAAAAAAAAAAADwvw"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGwWAAAAAAAAbRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwWAAAAAAAAbBYAAAAAAAAAAAAAAADwvw"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG0WAAAAAAAAbhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0WAAAAAAAAbRYAAAAAAAAAAAAAAADwvw"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADwWAAAAAAAAPRYAAAAAAAAAAAAAPRYAAAAAAABBFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwWAAAAAAAAPBYAAAAAAAAAAAAAAABCQA"
				],
				[
					194,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADwWAAAAAAAAPRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwWAAAAAAAAPBYAAAAAAAAAAAAAAABCQA"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAD0WAAAAAAAAPhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0WAAAAAAAAPRYAAAAAAAAAAAAAAADwvw"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD4WAAAAAAAAPxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4WAAAAAAAAPhYAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD8WAAAAAAAAQBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8WAAAAAAAAPxYAAAAAAAAAAAAAAADwvw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEAWAAAAAAAAQRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAWAAAAAAAAQBYAAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEWAAAAAAAAQhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEWAAAAAAAAQRYAAAAAAAAAAAAAAADwvw"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEIWAAAAAAAAQxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIWAAAAAAAAQhYAAAAAAAAAAAAAAADwvw"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMWAAAAAAAARBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMWAAAAAAAAQxYAAAAAAAAAAAAAAADwvw"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAEQWAAAAAAAARRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQWAAAAAAAARBYAAAAAAAAAAAAAAADwvw"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEUWAAAAAAAARhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUWAAAAAAAARRYAAAAAAAAAAAAAAADwvw"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH4WAAAAAAAAfxYAAAAAAAAAAAAAfxYAAAAAAACHFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4WAAAAAAAAfhYAAAAAAAD////////vfw"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIcWAAAAAAAAiBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcWAAAAAAAAhxYAAAAAAAAAAAAAAADwvw"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAIgWAAAAAAAAiRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgWAAAAAAAAiBYAAAAAAAAAAAAAAADwvw"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAIkWAAAAAAAAihYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkWAAAAAAAAiRYAAAAAAAAAAAAAAADwvw"
				],
				[
					230,
					1,
					"left_delete",
					null,
					"AQAAAIkWAAAAAAAAiRYAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoWAAAAAAAAihYAAAAAAAAAAAAAAADwvw"
				],
				[
					232,
					1,
					"left_delete",
					null,
					"AQAAAIgWAAAAAAAAiBYAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkWAAAAAAAAiRYAAAAAAAAAAAAAAADwvw"
				],
				[
					234,
					1,
					"left_delete",
					null,
					"AQAAAIcWAAAAAAAAhxYAAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgWAAAAAAAAiBYAAAAAAAAAAAAAAADwvw"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIcWAAAAAAAAiBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcWAAAAAAAAhxYAAAAAAAAAAAAAAADwvw"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "++"
					},
					"AgAAAIgWAAAAAAAAiRYAAAAAAAAAAAAAiRYAAAAAAACKFgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgWAAAAAAAAiBYAAAAAAAAAAAAAAADwvw"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIoWAAAAAAAAixYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoWAAAAAAAAihYAAAAAAAAAAAAAAADwvw"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAH0WAAAAAAAAfhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0WAAAAAAAAfRYAAAAAAAAAAAAAAADwvw"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAH4WAAAAAAAAfxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4WAAAAAAAAfhYAAAAAAAAAAAAAAADwvw"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAH8WAAAAAAAAgBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8WAAAAAAAAfxYAAAAAAAAAAAAAAADwvw"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIAWAAAAAAAAgRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAWAAAAAAAAgBYAAAAAAAAAAAAAAADwvw"
				],
				[
					261,
					1,
					"left_delete",
					null,
					"AQAAAIAWAAAAAAAAgBYAAAAAAAABAAAAbQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEWAAAAAAAAgRYAAAAAAAAAAAAAAADwvw"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIAWAAAAAAAAgRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAWAAAAAAAAgBYAAAAAAAAAAAAAAADwvw"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIEWAAAAAAAAghYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEWAAAAAAAAgRYAAAAAAAAAAAAAAADwvw"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAIIWAAAAAAAAgxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIWAAAAAAAAghYAAAAAAAAAAAAAAADwvw"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIMWAAAAAAAAhBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMWAAAAAAAAgxYAAAAAAAAAAAAAAADwvw"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIQWAAAAAAAAhRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQWAAAAAAAAhBYAAAAAAAAAAAAAAADwvw"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAIUWAAAAAAAAhhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUWAAAAAAAAhRYAAAAAAAAAAAAAAADwvw"
				],
				[
					282,
					1,
					"left_delete",
					null,
					"AQAAAIUWAAAAAAAAhRYAAAAAAAABAAAAYw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYWAAAAAAAAhhYAAAAAAAAAAAAAAADwvw"
				],
				[
					287,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIUWAAAAAAAAhxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUWAAAAAAAAhRYAAAAAAAAAAAAAAADwvw"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAIYWAAAAAAAAhxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYWAAAAAAAAhhYAAAAAAAAAAAAAAADwvw"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIcWAAAAAAAAiBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIcWAAAAAAAAhxYAAAAAAAAAAAAAAADwvw"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgWAAAAAAAAiRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgWAAAAAAAAiBYAAAAAAAAAAAAAAADwvw"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAIkWAAAAAAAAihYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkWAAAAAAAAiRYAAAAAAAAAAAAAAADwvw"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIoWAAAAAAAAixYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoWAAAAAAAAihYAAAAAAAAAAAAAAADwvw"
				],
				[
					306,
					1,
					"left_delete",
					null,
					"AQAAAIoWAAAAAAAAihYAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsWAAAAAAAAixYAAAAAAAAAAAAAAADwvw"
				],
				[
					314,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOsWAAAAAAAA7BYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsWAAAAAAAA6xYAAAAAAAAAAAAAAADwvw"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwWAAAAAAAA7RYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwWAAAAAAAA7BYAAAAAAAAAAAAAAADwvw"
				],
				[
					318,
					1,
					"paste",
					null,
					"AQAAAO0WAAAAAAAA/xYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0WAAAAAAAA7RYAAAAAAAAAAAAAAADwvw"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADQWAAAAAAAANRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQWAAAAAAAANBYAAAAAAAAAAAAAAADwvw"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADUWAAAAAAAANhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUWAAAAAAAANRYAAAAAAAAAAAAAAADwvw"
				],
				[
					327,
					1,
					"paste",
					null,
					"AQAAADYWAAAAAAAASBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYWAAAAAAAANhYAAAAAAAAAAAAAAADwvw"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEMXAAAAAAAARBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMXAAAAAAAAQxcAAAAAAAAAAAAAAADwvw"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQXAAAAAAAARRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQXAAAAAAAARBcAAAAAAAAAAAAAAADwvw"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAEUXAAAAAAAARhcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUXAAAAAAAARRcAAAAAAAAAAAAAAADwvw"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAEYXAAAAAAAARxcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYXAAAAAAAARhcAAAAAAAAAAAAAAADwvw"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEcXAAAAAAAASBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcXAAAAAAAARxcAAAAAAAAAAAAAAADwvw"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgXAAAAAAAASRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgXAAAAAAAASBcAAAAAAAAAAAAAAADwvw"
				],
				[
					346,
					1,
					"left_delete",
					null,
					"AQAAAEgXAAAAAAAASBcAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkXAAAAAAAASRcAAAAAAAAAAAAAAADwvw"
				],
				[
					348,
					1,
					"left_delete",
					null,
					"AQAAAEcXAAAAAAAARxcAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgXAAAAAAAASBcAAAAAAAAAAAAAAADwvw"
				],
				[
					350,
					1,
					"left_delete",
					null,
					"AQAAAEYXAAAAAAAARhcAAAAAAAABAAAAYg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcXAAAAAAAARxcAAAAAAAAAAAAAAADwvw"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAEYXAAAAAAAARxcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYXAAAAAAAARhcAAAAAAAAAAAAAAADwvw"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEcXAAAAAAAASBcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcXAAAAAAAARxcAAAAAAAAAAAAAAADwvw"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgXAAAAAAAASRcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgXAAAAAAAASBcAAAAAAAAAAAAAAADwvw"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAEkXAAAAAAAAShcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkXAAAAAAAASRcAAAAAAAAAAAAAAADwvw"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAEoXAAAAAAAASxcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoXAAAAAAAAShcAAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					1,
					"left_delete",
					null,
					"AQAAAJ0WAAAAAAAAnRYAAAAAAAABAAAAZw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4WAAAAAAAAnhYAAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAJ0WAAAAAAAAnhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ0WAAAAAAAAnRYAAAAAAAAAAAAAAADwvw"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAJ4WAAAAAAAAnxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ4WAAAAAAAAnhYAAAAAAAAAAAAAAADwvw"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJ8WAAAAAAAAoBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8WAAAAAAAAnxYAAAAAAAAAAAAAAADwvw"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAWAAAAAAAAoRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAWAAAAAAAAoBYAAAAAAAAAAAAAAADwvw"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAKEWAAAAAAAAohYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEWAAAAAAAAoRYAAAAAAAAAAAAAAADwvw"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAKIWAAAAAAAAoxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIWAAAAAAAAohYAAAAAAAAAAAAAAADwvw"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKUWAAAAAAAAphYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUWAAAAAAAApRYAAAAAAAD////////vfw"
				],
				[
					476,
					1,
					"paste",
					null,
					"AgAAAGMWAAAAAAAAahYAAAAAAAAAAAAAahYAAAAAAABqFgAAAAAAAAQAAABjaGFy",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAZxYAAAAAAAAAAAAAAADwvw"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGoWAAAAAAAAaxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoWAAAAAAAAahYAAAAAAAAAAAAAAADwvw"
				],
				[
					486,
					1,
					"left_delete",
					null,
					"AQAAAGwWAAAAAAAAbBYAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0WAAAAAAAAbRYAAAAAAAAAAAAAAADwvw"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AgAAAGMWAAAAAAAAZBYAAAAAAAAAAAAAZBYAAAAAAABkFgAAAAAAAAcAAAB1aW50OF90",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAahYAAAAAAAAAAAAAAADwvw"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAGUWAAAAAAAAZhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGYWAAAAAAAAZxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYWAAAAAAAAZhYAAAAAAAAAAAAAAADwvw"
				],
				[
					524,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAGMWAAAAAAAAZBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAYxYAAAAAAAAAAAAAAADwvw"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAGUWAAAAAAAAZhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGYWAAAAAAAAZxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYWAAAAAAAAZhYAAAAAAAAAAAAAAADwvw"
				],
				[
					532,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGcWAAAAAAAAaBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcWAAAAAAAAZxYAAAAAAAAAAAAAAADwvw"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgWAAAAAAAAaBYAAAAAAAAAAAAAAADwvw"
				],
				[
					552,
					1,
					"left_delete",
					null,
					"AQAAAGMWAAAAAAAAYxYAAAAAAAAGAAAAY29uc3Qg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAaRYAAAAAAAAAAAAAAADwvw"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAGMWAAAAAAAAZBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAYxYAAAAAAAAAAAAAAADwvw"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					561,
					1,
					"left_delete",
					null,
					"AQAAAGQWAAAAAAAAZBYAAAAAAAABAAAAbg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					563,
					1,
					"left_delete",
					null,
					"AQAAAGMWAAAAAAAAYxYAAAAAAAABAAAAdQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAGMWAAAAAAAAZBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMWAAAAAAAAYxYAAAAAAAAAAAAAAADwvw"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAGUWAAAAAAAAZhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					571,
					1,
					"left_delete",
					null,
					"AQAAAGUWAAAAAAAAZRYAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYWAAAAAAAAZhYAAAAAAAAAAAAAAADwvw"
				],
				[
					573,
					1,
					"left_delete",
					null,
					"AQAAAGQWAAAAAAAAZBYAAAAAAAABAAAAaA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					575,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAGQWAAAAAAAAZRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQWAAAAAAAAZBYAAAAAAAAAAAAAAADwvw"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAGUWAAAAAAAAZhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUWAAAAAAAAZRYAAAAAAAAAAAAAAADwvw"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGYWAAAAAAAAZxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYWAAAAAAAAZhYAAAAAAAAAAAAAAADwvw"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAGcWAAAAAAAAaBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcWAAAAAAAAZxYAAAAAAAAAAAAAAADwvw"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgWAAAAAAAAaBYAAAAAAAAAAAAAAADwvw"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGgWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgWAAAAAAAAaBYAAAAAAAAAAAAAAADwvw"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAGkWAAAAAAAAahYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkWAAAAAAAAaRYAAAAAAAAAAAAAAADwvw"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAGoWAAAAAAAAaxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoWAAAAAAAAahYAAAAAAAAAAAAAAADwvw"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAGsWAAAAAAAAbBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGsWAAAAAAAAaxYAAAAAAAAAAAAAAADwvw"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAGwWAAAAAAAAbRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGwWAAAAAAAAbBYAAAAAAAAAAAAAAADwvw"
				],
				[
					602,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAG0WAAAAAAAAbhYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG0WAAAAAAAAbRYAAAAAAAAAAAAAAADwvw"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAG4WAAAAAAAAbxYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG4WAAAAAAAAbhYAAAAAAAAAAAAAAADwvw"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAG8WAAAAAAAAcBYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8WAAAAAAAAbxYAAAAAAAAAAAAAAADwvw"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAHAWAAAAAAAAcRYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAWAAAAAAAAcBYAAAAAAAAAAAAAAADwvw"
				],
				[
					700,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAAYKAAAAAAAACQoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYKAAAAAAAAJAoAAAAAAAAAAAAAAADwvw"
				],
				[
					705,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAEIMAAAAAAAARQwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwMAAAAAAAATAwAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAADkIAAAAAAAAOQgAAAAAAAAZAAAAICAgIFRlcm1pbmFsUmVkcmF3KHRlcm0pOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSCAAAAAAAADkIAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAADgIAAAAAAAAOAgAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5CAAAAAAAADkIAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAJ0HAAAAAAAAoAcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqBwAAAAAAAKoHAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAKUEAAAAAAAAqAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzBAAAAAAAALMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAKUEAAAAAAAApQQAAAAAAAADAAAALy8g",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2BAAAAAAAALYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAJ0HAAAAAAAAnQcAAAAAAAADAAAALy8g",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpBwAAAAAAAKkHAAAAAAAAAAAAAAAA8L8"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA9CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4CAAAAAAAADgIAAAAAAAAAAAAAAAA8L8"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAD0IAAAAAAAAPggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9CAAAAAAAAD0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAD4IAAAAAAAAPwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+CAAAAAAAAD4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CAAAAAAAAD8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEAIAAAAAAAAQQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABACAAAAAAAAEAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAEEIAAAAAAAAQggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBCAAAAAAAAEEIAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"detail\":\"void\",\"label\":\" TerminalRedraw(const Terminal &term)\",\"sortText\":\"4096d11fTerminalRedraw\",\"kind\":3,\"documentation\":{\"value\":\"From `\\\"utils/Terminal.hpp\\\"`\",\"kind\":\"markdown\"},\"textEdit\":{\"newText\":\"TerminalRedraw(${1:const Terminal &term})\",\"range\":{\"end\":{\"character\":8,\"line\":75},\"start\":{\"character\":4,\"line\":75}}},\"insertTextFormat\":2,\"insertText\":\"TerminalRedraw(${1:const Terminal &term})\",\"filterText\":\"TerminalRedraw\",\"score\":1.3249040842056274},\"session_name\":\"clangd\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							306,
							111,
							1
						],
						"trigger": "TerminalRedraw"
					},
					"AwAAAEEIAAAAAAAAQQgAAAAAAAABAAAAYT0IAAAAAAAAPQgAAAAAAAAEAAAAcmVkcj0IAAAAAAAAYQgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCCAAAAAAAAEIIAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAEwIAAAAAAAATQgAAAAAAAAAAAAATQgAAAAAAABNCAAAAAAAABQAAABjb25zdCBUZXJtaW5hbCAmdGVybQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMCAAAAAAAAGAIAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAE0IAAAAAAAATggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNCAAAAAAAAE0IAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAE4IAAAAAAAATwgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOCAAAAAAAAE4IAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAE8IAAAAAAAAUAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPCAAAAAAAAE8IAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFEIAAAAAAAAUggAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCAAAAAAAAFEIAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/TestScene/CamNavigation.cpp",
			"settings":
			{
				"buffer_size": 11877,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					5983,
					1,
					"left_delete",
					null,
					"BAAAAIsTAAAAAAAAixMAAAAAAAALAAAAY3VycmVudEZnLmFaEwAAAAAAAFoTAAAAAAAACwAAAGN1cnJlbnRGZy5iKhMAAAAAAAAqEwAAAAAAAAsAAABjdXJyZW50RmcuZ/kSAAAAAAAA+RIAAAAAAAALAAAAY3VycmVudEZnLnI",
					"AQAAAAAAAAAEAAAA+RIAAAAAAAAEEwAAAAAAAAAAAAAAAPC/KhMAAAAAAAA1EwAAAAAAAAAAAAAAAPC/WhMAAAAAAABlEwAAAAAAAAAAAAAAAPC/ixMAAAAAAACWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					5985,
					1,
					"left_delete",
					null,
					"BAAAAGkTAAAAAAAAaRMAAAAAAAABAAAAIEMTAAAAAAAAQxMAAAAAAAABAAAAIB4TAAAAAAAAHhMAAAAAAAABAAAAIPgSAAAAAAAA+BIAAAAAAAABAAAAIA",
					"AQAAAAAAAAAEAAAA+RIAAAAAAAD5EgAAAAAAAAAAAAAAAPC/HxMAAAAAAAAfEwAAAAAAAAAAAAAAAPC/RBMAAAAAAABEEwAAAAAAAAAAAAAAAPC/ahMAAAAAAABqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					5987,
					1,
					"left_delete",
					null,
					"BAAAAGUTAAAAAAAAZRMAAAAAAAABAAAALEATAAAAAAAAQBMAAAAAAAABAAAALBwTAAAAAAAAHBMAAAAAAAABAAAALPcSAAAAAAAA9xIAAAAAAAABAAAALA",
					"AQAAAAAAAAAEAAAA+BIAAAAAAAD4EgAAAAAAAAAAAAAAAPC/HRMAAAAAAAAdEwAAAAAAAAAAAAAAAPC/QRMAAAAAAABBEwAAAAAAAAAAAAAAAPC/ZhMAAAAAAABmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					5999,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOQSAAAAAAAA5RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BIAAAAAAADkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6001,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6005,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6008,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAOYSAAAAAAAA5xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hIAAAAAAADmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6011,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOcSAAAAAAAA6BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xIAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6013,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAOgSAAAAAAAA6RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BIAAAAAAADoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6015,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAOkSAAAAAAAA6hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6020,
					1,
					"left_delete",
					null,
					"AQAAAOQSAAAAAAAA5BIAAAAAAAAHAAAAKHVuc2lnKQ",
					"AQAAAAAAAAABAAAA6xIAAAAAAADkEgAAAAAAAAAAAAAAAFtA"
				],
				[
					6028,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAADARAAAAAAAAMREAAAAAAAAAAAAAMREAAAAAAAAxEQAAAAAAAAUAAABmbG9hdA",
					"AQAAAAAAAAABAAAAMBEAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6030,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADERAAAAAAAAMhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMREAAAAAAAAxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6032,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADIRAAAAAAAAMxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6035,
					1,
					"left_delete",
					null,
					"AQAAADIRAAAAAAAAMhEAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAMxEAAAAAAAAzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6037,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAADIRAAAAAAAAMxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6039,
					1,
					"insert_completion",
					{
						"completion": "unsigned",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "unsigned"
					},
					"AgAAADARAAAAAAAAMBEAAAAAAAADAAAAdW5zMBEAAAAAAAA4EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxEAAAAAAAAzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6041,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgRAAAAAAAAOREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBEAAAAAAAA4EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6043,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADkRAAAAAAAAOhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOREAAAAAAAA5EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6045,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAADoRAAAAAAAAOxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhEAAAAAAAA6EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6047,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADsRAAAAAAAAPBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxEAAAAAAAA7EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6049,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADwRAAAAAAAAPREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBEAAAAAAAA8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6082,
					1,
					"paste",
					null,
					"AgAAADQSAAAAAAAAPBIAAAAAAAAAAAAAPBIAAAAAAAA8EgAAAAAAAAUAAABmbG9hdA",
					"AQAAAAAAAAABAAAANBIAAAAAAAA5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6093,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEMSAAAAAAAARBIAAAAAAAAAAAAARBIAAAAAAABMEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxIAAAAAAABDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6097,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAEwSAAAAAAAATRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBIAAAAAAABMEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6100,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAE0SAAAAAAAAThIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRIAAAAAAABNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6102,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAE4SAAAAAAAATxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6104,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE8SAAAAAAAAUBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATxIAAAAAAABPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6106,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFASAAAAAAAAURIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBIAAAAAAABQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6108,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFESAAAAAAAAUhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAURIAAAAAAABREgAAAAAAAAAAAAAAAPC/"
				],
				[
					6124,
					1,
					"paste",
					null,
					"AQAAAEMSAAAAAAAAVxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxIAAAAAAABDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6131,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAE8SAAAAAAAAUBIAAAAAAAAAAAAAUBIAAAAAAABQEgAAAAAAAAMAAAByZWQ",
					"AQAAAAAAAAABAAAATxIAAAAAAABSEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6133,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAFASAAAAAAAAURIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBIAAAAAAABQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6135,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFESAAAAAAAAUhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAURIAAAAAAABREgAAAAAAAAAAAAAAAPC/"
				],
				[
					6139,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAFMSAAAAAAAAVBIAAAAAAAAAAAAAVBIAAAAAAABUEgAAAAAAAAMAAAByZ2I",
					"AQAAAAAAAAABAAAAUxIAAAAAAABWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6141,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFQSAAAAAAAAVRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBIAAAAAAABUEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6143,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFUSAAAAAAAAVhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVRIAAAAAAABVEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6146,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFcSAAAAAAAAWBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxIAAAAAAABXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6201,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BgAAAJsTAAAAAAAAnhMAAAAAAAAAAAAAeBMAAAAAAAB7EwAAAAAAAAAAAABVEwAAAAAAAFgTAAAAAAAAAAAAADETAAAAAAAANBMAAAAAAAAAAAAADxMAAAAAAAASEwAAAAAAAAAAAAD5EgAAAAAAAPwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRMAAAAAAAD9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6216,
					1,
					"insert",
					{
						"characters": "f"
					},
					"BAAAADQSAAAAAAAANRIAAAAAAAAAAAAANRIAAAAAAAA1EgAAAAAAAAgAAAB1aW50MzJfdAkSAAAAAAAAChIAAAAAAAAAAAAAChIAAAAAAAAKEgAAAAAAAAgAAAB1aW50MzJfdA",
					"AQAAAAAAAAACAAAACRIAAAAAAAAREgAAAAAAAAAAAAAAAPC/NBIAAAAAAAA8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6218,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAC4SAAAAAAAALxIAAAAAAAAAAAAAChIAAAAAAAALEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAChIAAAAAAAAKEgAAAAAAAAAAAAAAAPC/LhIAAAAAAAAuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6220,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAADASAAAAAAAAMRIAAAAAAAAAAAAACxIAAAAAAAAMEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAACxIAAAAAAAALEgAAAAAAAAAAAAAAAPC/MBIAAAAAAAAwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6222,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAADISAAAAAAAAMxIAAAAAAAAAAAAADBIAAAAAAAANEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAADBIAAAAAAAAMEgAAAAAAAAAAAAAAAPC/MhIAAAAAAAAyEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6224,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAADQSAAAAAAAANRIAAAAAAAAAAAAADRIAAAAAAAAOEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAADRIAAAAAAAANEgAAAAAAAAAAAAAAAPC/NBIAAAAAAAA0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6238,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BgAAAKQTAAAAAAAApBMAAAAAAAADAAAALy8gfhMAAAAAAAB+EwAAAAAAAAMAAAAvLyBYEwAAAAAAAFgTAAAAAAAAAwAAAC8vIDETAAAAAAAAMRMAAAAAAAADAAAALy8gDBMAAAAAAAAMEwAAAAAAAAMAAAAvLyDzEgAAAAAAAPMSAAAAAAAAAwAAAC8vIA",
					"AQAAAAAAAAABAAAA+RIAAAAAAACoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					6250,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAAkSAAAAAAAAChIAAAAAAAAAAAAAChIAAAAAAAAKEgAAAAAAAAUAAABmbG9hdA",
					"AQAAAAAAAAABAAAACRIAAAAAAAAOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6253,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAAoSAAAAAAAACxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChIAAAAAAAAKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6255,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAAsSAAAAAAAADBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxIAAAAAAAALEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6257,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAAwSAAAAAAAADRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBIAAAAAAAAMEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6270,
					1,
					"paste",
					null,
					"AgAAADASAAAAAAAANBIAAAAAAAAAAAAANBIAAAAAAAA0EgAAAAAAAAUAAABmbG9hdA",
					"AQAAAAAAAAABAAAAMBIAAAAAAAA1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6284,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAADARAAAAAAAAMREAAAAAAAAAAAAAMREAAAAAAAAxEQAAAAAAAA0AAAB1bnNpZ25lZCBjaGFy",
					"AQAAAAAAAAABAAAAMBEAAAAAAAA9EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6287,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAADERAAAAAAAAMhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMREAAAAAAAAxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6290,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADIRAAAAAAAAMxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6292,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADMRAAAAAAAANBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxEAAAAAAAAzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6294,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADQRAAAAAAAANREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANBEAAAAAAAA0EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6469,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABcTAAAAAAAAGBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxMAAAAAAAAXEwAAAAAAAAAAAAAAAPC/"
				],
				[
					6472,
					1,
					"left_delete",
					null,
					"AQAAABcTAAAAAAAAFxMAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAGBMAAAAAAAAYEwAAAAAAAAAAAAAAAPC/"
				],
				[
					6485,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAADARAAAAAAAAMREAAAAAAAAAAAAAMREAAAAAAAAxEQAAAAAAAAUAAABmbG9hdA",
					"AQAAAAAAAAABAAAAMBEAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6487,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADERAAAAAAAAMhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMREAAAAAAAAxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6489,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADIRAAAAAAAAMxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhEAAAAAAAAyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6491,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADMRAAAAAAAANBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxEAAAAAAAAzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					6494,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAADQRAAAAAAAANREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANBEAAAAAAAA0EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6496,
					1,
					"insert_completion",
					{
						"completion": "uint8_t",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "uint8_t"
					},
					"AgAAADARAAAAAAAAMBEAAAAAAAAFAAAAdWludDgwEQAAAAAAADcRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANREAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					6509,
					1,
					"insert",
					{
						"characters": "i"
					},
					"BAAAACoSAAAAAAAAKxIAAAAAAAAAAAAAKxIAAAAAAAArEgAAAAAAAAQAAABsb25nAxIAAAAAAAAEEgAAAAAAAAAAAAAEEgAAAAAAAAQSAAAAAAAABAAAAGxvbmc",
					"AQAAAAAAAAACAAAAAxIAAAAAAAAHEgAAAAAAAAAAAAAAAPC/KhIAAAAAAAAuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6512,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAACgSAAAAAAAAKRIAAAAAAAAAAAAABBIAAAAAAAAFEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABBIAAAAAAAAEEgAAAAAAAAAAAAAAAPC/KBIAAAAAAAAoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6514,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAACoSAAAAAAAAKxIAAAAAAAAAAAAABRIAAAAAAAAGEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABRIAAAAAAAAFEgAAAAAAAAAAAAAAAPC/KhIAAAAAAAAqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6516,
					1,
					"left_delete",
					null,
					"AgAAACsSAAAAAAAAKxIAAAAAAAABAAAAdAUSAAAAAAAABRIAAAAAAAABAAAAdA",
					"AQAAAAAAAAACAAAABhIAAAAAAAAGEgAAAAAAAAAAAAAAAPC/LBIAAAAAAAAsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6518,
					1,
					"left_delete",
					null,
					"AgAAACkSAAAAAAAAKRIAAAAAAAABAAAAYgQSAAAAAAAABBIAAAAAAAABAAAAYg",
					"AQAAAAAAAAACAAAABRIAAAAAAAAFEgAAAAAAAAAAAAAAAPC/KhIAAAAAAAAqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6520,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"BAAAACgSAAAAAAAAKRIAAAAAAAAAAAAABBIAAAAAAAAFEgAAAAAAAAAAAAAqEgAAAAAAACsSAAAAAAAAAAAAAAUSAAAAAAAABhIAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABBIAAAAAAAAEEgAAAAAAAAAAAAAAAPC/KBIAAAAAAAAoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6524,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AgAAACwSAAAAAAAALRIAAAAAAAAAAAAABhIAAAAAAAAHEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABhIAAAAAAAAGEgAAAAAAAAAAAAAAAPC/LBIAAAAAAAAsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6527,
					1,
					"left_delete",
					null,
					"AgAAAC0SAAAAAAAALRIAAAAAAAABAAAAXwYSAAAAAAAABhIAAAAAAAABAAAAXw",
					"AQAAAAAAAAACAAAABxIAAAAAAAAHEgAAAAAAAAAAAAAAAPC/LhIAAAAAAAAuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6529,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAACwSAAAAAAAALRIAAAAAAAAAAAAABhIAAAAAAAAHEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABhIAAAAAAAAGEgAAAAAAAAAAAAAAAPC/LBIAAAAAAAAsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6532,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":1,\"label\":\" int32_t\",\"documentation\":{\"value\":\"From `<cstdint>`\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":23,\"line\":155},\"start\":{\"character\":19,\"line\":155}},\"newText\":\"int32_t\"},\"filterText\":\"int32_t\",\"score\":1.4683533906936646,\"kind\":8,\"sortText\":\"40440cffint32_t\",\"insertText\":\"int32_t\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3504,
							6529,
							2
						],
						"trigger": "int32_t"
					},
					"BAAAACoSAAAAAAAAKhIAAAAAAAAEAAAAaW50MwMSAAAAAAAAAxIAAAAAAAAEAAAAaW50MyYSAAAAAAAALRIAAAAAAAAAAAAAAxIAAAAAAAAKEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABxIAAAAAAAAHEgAAAAAAAAAAAAAAAPC/LhIAAAAAAAAuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6547,
					1,
					"insert",
					{
						"characters": "d"
					},
					"BAAAAC0SAAAAAAAALhIAAAAAAAAAAAAALhIAAAAAAAAuEgAAAAAAAAcAAABpbnQzMl90AxIAAAAAAAAEEgAAAAAAAAAAAAAEEgAAAAAAAAQSAAAAAAAABwAAAGludDMyX3Q",
					"AQAAAAAAAAACAAAAAxIAAAAAAAAKEgAAAAAAAAAAAAAAAPC/LRIAAAAAAAA0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					6549,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAACgSAAAAAAAAKRIAAAAAAAAAAAAABBIAAAAAAAAFEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABBIAAAAAAAAEEgAAAAAAAAAAAAAAAPC/KBIAAAAAAAAoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6551,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAACoSAAAAAAAAKxIAAAAAAAAAAAAABRIAAAAAAAAGEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABRIAAAAAAAAFEgAAAAAAAAAAAAAAAPC/KhIAAAAAAAAqEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6553,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAACwSAAAAAAAALRIAAAAAAAAAAAAABhIAAAAAAAAHEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABhIAAAAAAAAGEgAAAAAAAAAAAAAAAPC/LBIAAAAAAAAsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6555,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAC4SAAAAAAAALxIAAAAAAAAAAAAABxIAAAAAAAAIEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAABxIAAAAAAAAHEgAAAAAAAAAAAAAAAPC/LhIAAAAAAAAuEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6557,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AgAAADASAAAAAAAAMRIAAAAAAAAAAAAACBIAAAAAAAAJEgAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAACBIAAAAAAAAIEgAAAAAAAAAAAAAAAPC/MBIAAAAAAAAwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					6572,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD4FAAAAAAAAPwUAAAAAAAAAAAAAPwUAAAAAAABDBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgUAAAAAAAA+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					6574,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABIBQAAAAAAAAAAAAA/BQAAAAAAAD8FAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					6576,
					1,
					"paste_and_indent",
					null,
					"AQAAAEQFAAAAAAAAPxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAUAAAAAAABEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					6584,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEsIAAAAAAAATAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwgAAAAAAABLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6587,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEwIAAAAAAAATQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAgAAAAAAABMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6590,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAE0IAAAAAAAATggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQgAAAAAAABNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6593,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAE4IAAAAAAAATwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATggAAAAAAABOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6595,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAE8IAAAAAAAAUAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwgAAAAAAABPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6601,
					1,
					"paste",
					null,
					"AQAAAFQIAAAAAAAAWQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAgAAAAAAABUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					6606,
					1,
					"paste",
					null,
					"AQAAAH8IAAAAAAAAhAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwgAAAAAAAB/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					6612,
					1,
					"paste",
					null,
					"AQAAAIgIAAAAAAAAjQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAAPC/"
				],
				[
					6643,
					1,
					"left_delete",
					null,
					"AQAAAFMdAAAAAAAAUx0AAAAAAACwAAAAICAgICAgICBjb2xvcjo6c2V0OjpyZWQocmdiLCBjdXJyZW50Rmcucik7CiAgICAgICAgY29sb3I6OnNldDo6Z3JlZW4ocmdiLCBjdXJyZW50RmcuZyk7CiAgICAgICAgY29sb3I6OnNldDo6Ymx1ZShyZ2IsIGN1cnJlbnRGZy5iKTsKICAgICAgICBjb2xvcjo6c2V0OjphbHBoYShyZ2IsIGN1cnJlbnRGZy5hKTs",
					"AQAAAAAAAAABAAAAAx4AAAAAAABTHQAAAAAAAAAAAAAAAAAA"
				],
				[
					6645,
					1,
					"left_delete",
					null,
					"AQAAAFIdAAAAAAAAUh0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAUx0AAAAAAABTHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6655,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAADodAAAAAAAAOx0AAAAAAAAAAAAAOx0AAAAAAAA7HQAAAAAAABMAAABjb2xvcjo6cmdiPHVpbnQ4X3Q+",
					"AQAAAAAAAAABAAAATR0AAAAAAAA6HQAAAAAAAAAAAAAAAFJA"
				],
				[
					6657,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADsdAAAAAAAAPB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOx0AAAAAAAA7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6659,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADwdAAAAAAAAPR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPB0AAAAAAAA8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6663,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":1,\"label\":\" Vector2\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nVector2, 2 components\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":10,\"line\":253},\"start\":{\"character\":8,\"line\":253}},\"newText\":\"Vector2\"},\"filterText\":\"Vector2\",\"score\":2.8141798973083496,\"kind\":8,\"sortText\":\"3fcbe47aVector2\",\"insertText\":\"Vector2\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3555,
							6657,
							1
						],
						"trigger": "Vector2"
					},
					"AwAAADwdAAAAAAAAPB0AAAAAAAABAAAAYzodAAAAAAAAOh0AAAAAAAACAAAAdmU6HQAAAAAAAEEdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPR0AAAAAAAA9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6668,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6670,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEYdAAAAAAAARx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARh0AAAAAAABGHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6672,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcdAAAAAAAASB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARx0AAAAAAABHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6674,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAEgdAAAAAAAASR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASB0AAAAAAABIHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6681,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAEkdAAAAAAAASh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASR0AAAAAAABJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6684,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAEkdAAAAAAAASh0AAAAAAAAAAAAASh0AAAAAAABSHQAAAAAAAAAAAABSHQAAAAAAAFMdAAAAAAAAAAAAAFMdAAAAAAAAWx0AAAAAAAAAAAAASh0AAAAAAABKHQAAAAAAAAgAAAAgICAgICAgIEodAAAAAAAAVh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASR0AAAAAAABJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6687,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAFYdAAAAAAAAVx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVh0AAAAAAABWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6689,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAFcdAAAAAAAAWB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVx0AAAAAAABXHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6691,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAFgdAAAAAAAAWR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWB0AAAAAAABYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6693,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAFkdAAAAAAAAWh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWR0AAAAAAABZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6695,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAFodAAAAAAAAWx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWh0AAAAAAABaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6698,
					1,
					"insert_completion",
					{
						"completion": "current",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "current"
					},
					"AgAAAFYdAAAAAAAAVh0AAAAAAAAFAAAAY3VycmVWHQAAAAAAAF0dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWx0AAAAAAABbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6700,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAF0dAAAAAAAAXh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXR0AAAAAAABdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6702,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAF4dAAAAAAAAXx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXh0AAAAAAABeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6704,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":1,\"label\":\" currentFg\",\"detail\":\"Color\",\"textEdit\":{\"range\":{\"end\":{\"character\":20,\"line\":254},\"start\":{\"character\":12,\"line\":254}},\"newText\":\"currentFg\"},\"filterText\":\"currentFg\",\"score\":1.5306519269943237,\"kind\":6,\"sortText\":\"403c1399currentFg\",\"insertText\":\"currentFg\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3573,
							6700,
							1
						],
						"trigger": "currentFg"
					},
					"AwAAAF4dAAAAAAAAXh0AAAAAAAABAAAAZ1YdAAAAAAAAVh0AAAAAAAAIAAAAY3VycmVudEZWHQAAAAAAAF8dAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXx0AAAAAAABfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6706,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAF8dAAAAAAAAYB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXx0AAAAAAABfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6708,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAGAdAAAAAAAAYR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYB0AAAAAAABgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6710,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAGEdAAAAAAAAYh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYR0AAAAAAABhHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6712,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAGIdAAAAAAAAYx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYh0AAAAAAABiHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6714,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGMdAAAAAAAAZB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6716,
					1,
					"left_delete",
					null,
					"AQAAAGMdAAAAAAAAYx0AAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAZB0AAAAAAABkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6718,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGMdAAAAAAAAZB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6722,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAGMdAAAAAAAAZB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6725,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAGQdAAAAAAAAZR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZB0AAAAAAABkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6727,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAGUdAAAAAAAAZh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZR0AAAAAAABlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6732,
					1,
					"duplicate_line",
					null,
					"AQAAAGgdAAAAAAAAhh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZx0AAAAAAABnHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6734,
					1,
					"duplicate_line",
					null,
					"AQAAAIYdAAAAAAAApB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhR0AAAAAAACFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6736,
					1,
					"duplicate_line",
					null,
					"AQAAAKQdAAAAAAAAwh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAox0AAAAAAACjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6743,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAF8dAAAAAAAAYB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXx0AAAAAAABfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6745,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAGAdAAAAAAAAYR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYB0AAAAAAABgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6747,
					1,
					"left_delete",
					null,
					"AQAAAGAdAAAAAAAAYB0AAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAYR0AAAAAAABhHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6749,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGAdAAAAAAAAYR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYB0AAAAAAABgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6754,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAH8dAAAAAAAAgB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfx0AAAAAAAB/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6756,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAIAdAAAAAAAAgR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgB0AAAAAAACAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6760,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAJ8dAAAAAAAAoB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnx0AAAAAAACfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6762,
					1,
					"left_delete",
					null,
					"AQAAAJ8dAAAAAAAAnx0AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAoB0AAAAAAACgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6764,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJ8dAAAAAAAAoB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnx0AAAAAAACfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6766,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAKAdAAAAAAAAoR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoB0AAAAAAACgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6770,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAL8dAAAAAAAAwB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvx0AAAAAAAC/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6773,
					1,
					"left_delete",
					null,
					"AQAAAL8dAAAAAAAAvx0AAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAwB0AAAAAAADAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6775,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAL8dAAAAAAAAwB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvx0AAAAAAAC/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6777,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAMAdAAAAAAAAwR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwB0AAAAAAADAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6799,
					1,
					"left_delete",
					null,
					"AQAAAKgdAAAAAAAAqB0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAqR0AAAAAAACpHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6802,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKgdAAAAAAAAqR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqB0AAAAAAACoHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6815,
					1,
					"left_delete",
					null,
					"AQAAADodAAAAAAAAOh0AAAAAAAAPAAAAVmVjdG9yMiByZ2IgPSB7",
					"AQAAAAAAAAABAAAASR0AAAAAAAA6HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6823,
					1,
					"left_delete",
					null,
					"AQAAALsdAAAAAAAAux0AAAAAAAAKAAAAICAgICAgICB9Ow",
					"AQAAAAAAAAABAAAAxR0AAAAAAAC7HQAAAAAAAAAAAAAAAAAA"
				],
				[
					6825,
					1,
					"left_delete",
					null,
					"AQAAALodAAAAAAAAuh0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAux0AAAAAAAC7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6834,
					1,
					"insert",
					{
						"characters": ";"
					},
					"CAAAALkdAAAAAAAAuh0AAAAAAAAAAAAAuh0AAAAAAAC6HQAAAAAAAAEAAAAsmR0AAAAAAACaHQAAAAAAAAAAAACaHQAAAAAAAJodAAAAAAAAAQAAACx5HQAAAAAAAHodAAAAAAAAAAAAAHodAAAAAAAAeh0AAAAAAAABAAAALFkdAAAAAAAAWh0AAAAAAAAAAAAAWh0AAAAAAABaHQAAAAAAAAEAAAAs",
					"AQAAAAAAAAAEAAAAWR0AAAAAAABaHQAAAAAAAAAAAAAAAPC/eR0AAAAAAAB6HQAAAAAAAAAAAAAAAPC/mR0AAAAAAACaHQAAAAAAAAAAAAAAAPC/uR0AAAAAAAC6HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6843,
					1,
					"insert",
					{
						"characters": "f"
					},
					"CAAAAKMdAAAAAAAApB0AAAAAAAAAAAAApB0AAAAAAACkHQAAAAAAAAQAAAAgICAggx0AAAAAAACEHQAAAAAAAAAAAACEHQAAAAAAAIQdAAAAAAAABAAAACAgICBjHQAAAAAAAGQdAAAAAAAAAAAAAGQdAAAAAAAAZB0AAAAAAAAEAAAAICAgIEMdAAAAAAAARB0AAAAAAAAAAAAARB0AAAAAAABEHQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAAEAAAARx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/Zx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/hx0AAAAAAACDHQAAAAAAAAAAAAAAAPC/px0AAAAAAACjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6845,
					1,
					"insert",
					{
						"characters": "l"
					},
					"BAAAAJsdAAAAAAAAnB0AAAAAAAAAAAAAfh0AAAAAAAB/HQAAAAAAAAAAAABhHQAAAAAAAGIdAAAAAAAAAAAAAEQdAAAAAAAARR0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/YR0AAAAAAABhHQAAAAAAAAAAAAAAAPC/fh0AAAAAAAB+HQAAAAAAAAAAAAAAAPC/mx0AAAAAAACbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6847,
					1,
					"insert",
					{
						"characters": "o"
					},
					"BAAAAJ8dAAAAAAAAoB0AAAAAAAAAAAAAgR0AAAAAAACCHQAAAAAAAAAAAABjHQAAAAAAAGQdAAAAAAAAAAAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/Yx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/gR0AAAAAAACBHQAAAAAAAAAAAAAAAPC/nx0AAAAAAACfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6849,
					1,
					"insert",
					{
						"characters": "a"
					},
					"BAAAAKMdAAAAAAAApB0AAAAAAAAAAAAAhB0AAAAAAACFHQAAAAAAAAAAAABlHQAAAAAAAGYdAAAAAAAAAAAAAEYdAAAAAAAARx0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAARh0AAAAAAABGHQAAAAAAAAAAAAAAAPC/ZR0AAAAAAABlHQAAAAAAAAAAAAAAAPC/hB0AAAAAAACEHQAAAAAAAAAAAAAAAPC/ox0AAAAAAACjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6851,
					1,
					"insert",
					{
						"characters": "t"
					},
					"BAAAAKcdAAAAAAAAqB0AAAAAAAAAAAAAhx0AAAAAAACIHQAAAAAAAAAAAABnHQAAAAAAAGgdAAAAAAAAAAAAAEcdAAAAAAAASB0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAARx0AAAAAAABHHQAAAAAAAAAAAAAAAPC/Zx0AAAAAAABnHQAAAAAAAAAAAAAAAPC/hx0AAAAAAACHHQAAAAAAAAAAAAAAAPC/px0AAAAAAACnHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6853,
					1,
					"insert",
					{
						"characters": " "
					},
					"BAAAAKsdAAAAAAAArB0AAAAAAAAAAAAAih0AAAAAAACLHQAAAAAAAAAAAABpHQAAAAAAAGodAAAAAAAAAAAAAEgdAAAAAAAASR0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAASB0AAAAAAABIHQAAAAAAAAAAAAAAAPC/aR0AAAAAAABpHQAAAAAAAAAAAAAAAPC/ih0AAAAAAACKHQAAAAAAAAAAAAAAAPC/qx0AAAAAAACrHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6855,
					1,
					"insert",
					{
						"characters": "r"
					},
					"BAAAAK8dAAAAAAAAsB0AAAAAAAAAAAAAjR0AAAAAAACOHQAAAAAAAAAAAABrHQAAAAAAAGwdAAAAAAAAAAAAAEkdAAAAAAAASh0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAASR0AAAAAAABJHQAAAAAAAAAAAAAAAPC/ax0AAAAAAABrHQAAAAAAAAAAAAAAAPC/jR0AAAAAAACNHQAAAAAAAAAAAAAAAPC/rx0AAAAAAACvHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6857,
					1,
					"insert",
					{
						"characters": " ="
					},
					"CAAAALMdAAAAAAAAtB0AAAAAAAAAAAAAkB0AAAAAAACRHQAAAAAAAAAAAABtHQAAAAAAAG4dAAAAAAAAAAAAAEodAAAAAAAASx0AAAAAAAAAAAAAtx0AAAAAAAC4HQAAAAAAAAAAAACTHQAAAAAAAJQdAAAAAAAAAAAAAG8dAAAAAAAAcB0AAAAAAAAAAAAASx0AAAAAAABMHQAAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAASh0AAAAAAABKHQAAAAAAAAAAAAAAAPC/bR0AAAAAAABtHQAAAAAAAAAAAAAAAPC/kB0AAAAAAACQHQAAAAAAAAAAAAAAAPC/sx0AAAAAAACzHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6860,
					1,
					"insert",
					{
						"characters": " "
					},
					"BAAAALsdAAAAAAAAvB0AAAAAAAAAAAAAlh0AAAAAAACXHQAAAAAAAAAAAABxHQAAAAAAAHIdAAAAAAAAAAAAAEwdAAAAAAAATR0AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAATB0AAAAAAABMHQAAAAAAAAAAAAAAAPC/cR0AAAAAAABxHQAAAAAAAAAAAAAAAPC/lh0AAAAAAACWHQAAAAAAAAAAAAAAAPC/ux0AAAAAAAC7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6867,
					1,
					"left_delete",
					null,
					"AQAAAG8dAAAAAAAAbx0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAcB0AAAAAAABwHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6869,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAG8dAAAAAAAAcB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbx0AAAAAAABvHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6874,
					1,
					"left_delete",
					null,
					"AQAAAJUdAAAAAAAAlR0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAlh0AAAAAAACWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6876,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAJUdAAAAAAAAlh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlR0AAAAAAACVHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6879,
					1,
					"left_delete",
					null,
					"AQAAALsdAAAAAAAAux0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAvB0AAAAAAAC8HQAAAAAAAAAAAAAA4GBA"
				],
				[
					6881,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALsdAAAAAAAAvB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAux0AAAAAAAC7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6888,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANIdAAAAAAAA0x0AAAAAAAAAAAAA0x0AAAAAAADbHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0h0AAAAAAADSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6890,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANsdAAAAAAAA3B0AAAAAAAAAAAAA3B0AAAAAAADkHQAAAAAAAAAAAADTHQAAAAAAANMdAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA2x0AAAAAAADbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6892,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAANwdAAAAAAAA3R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3B0AAAAAAADcHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6894,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAN0dAAAAAAAA3h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3R0AAAAAAADdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6896,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAN4dAAAAAAAA3x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3h0AAAAAAADeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6903,
					1,
					"left_delete",
					null,
					"AQAAAN4dAAAAAAAA3h0AAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAA3x0AAAAAAADfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6905,
					1,
					"left_delete",
					null,
					"AQAAAN0dAAAAAAAA3R0AAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAA3h0AAAAAAADeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6907,
					1,
					"left_delete",
					null,
					"AQAAANwdAAAAAAAA3B0AAAAAAAABAAAASA",
					"AQAAAAAAAAABAAAA3R0AAAAAAADdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6909,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAANwdAAAAAAAA3R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3B0AAAAAAADcHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6911,
					1,
					"insert",
					{
						"characters": "G"
					},
					"AQAAAN0dAAAAAAAA3h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3R0AAAAAAADdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6913,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAN4dAAAAAAAA3x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3h0AAAAAAADeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6916,
					1,
					"insert_completion",
					{
						"completion": "RGBtoHSV",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RGBtoHSV"
					},
					"AgAAANwdAAAAAAAA3B0AAAAAAAADAAAAUkdC3B0AAAAAAADkHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3x0AAAAAAADfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6918,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOQdAAAAAAAA5h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5B0AAAAAAADkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6924,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANIdAAAAAAAA0x0AAAAAAAAAAAAA0x0AAAAAAADbHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0h0AAAAAAADSHQAAAAAAAP///////+9/"
				],
				[
					6928,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAANsdAAAAAAAA3B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2x0AAAAAAADbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6930,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAANwdAAAAAAAA3R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3B0AAAAAAADcHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6932,
					1,
					"insert",
					{
						"characters": "oa"
					},
					"AgAAAN0dAAAAAAAA3h0AAAAAAAAAAAAA3h0AAAAAAADfHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3R0AAAAAAADdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6935,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAN8dAAAAAAAA4B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3x0AAAAAAADfHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6937,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAdAAAAAAAA4R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4B0AAAAAAADgHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6939,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAOEdAAAAAAAA4h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4R0AAAAAAADhHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6942,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOIdAAAAAAAA4x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4h0AAAAAAADiHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6945,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMdAAAAAAAA5B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4x0AAAAAAADjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6947,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOQdAAAAAAAA5R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5B0AAAAAAADkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6949,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOUdAAAAAAAA5h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5R0AAAAAAADlHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6951,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYdAAAAAAAA5x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5h0AAAAAAADmHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6953,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAOcdAAAAAAAA6B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5x0AAAAAAADnHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6955,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOgdAAAAAAAA6R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6B0AAAAAAADoHQAAAAAAAAAAAAAAAPC/"
				],
				[
					6963,
					1,
					"left_delete",
					null,
					"AQAAAPwdAAAAAAAA/B0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6965,
					1,
					"left_delete",
					null,
					"AQAAAPsdAAAAAAAA+x0AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6967,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6970,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAPwdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6973,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAP0dAAAAAAAA/h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6976,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAP4dAAAAAAAA/x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/h0AAAAAAAD+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6979,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8dAAAAAAAAAB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/x0AAAAAAAD/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					6982,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAAeAAAAAAAAAR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB4AAAAAAAAAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					6985,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAAEeAAAAAAAAAh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAR4AAAAAAAABHgAAAAAAAAAAAAAAAPC/"
				],
				[
					6988,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAIeAAAAAAAAAx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAh4AAAAAAAACHgAAAAAAAAAAAAAAAPC/"
				],
				[
					6991,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMeAAAAAAAABB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAx4AAAAAAAADHgAAAAAAAAAAAAAAAPC/"
				],
				[
					6994,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAQeAAAAAAAABR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABB4AAAAAAAAEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					6997,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAAUeAAAAAAAABh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABR4AAAAAAAAFHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7000,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7003,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAceAAAAAAAACB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7006,
					1,
					"left_delete",
					null,
					"AQAAAAceAAAAAAAABx4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACB4AAAAAAAAIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7009,
					1,
					"left_delete",
					null,
					"AQAAAAYeAAAAAAAABh4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7012,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7017,
					1,
					"left_delete",
					null,
					"AQAAAAYeAAAAAAAABh4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7020,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7023,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAceAAAAAAAACB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7028,
					1,
					"left_delete",
					null,
					"AQAAAAceAAAAAAAABx4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACB4AAAAAAAAIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7031,
					1,
					"left_delete",
					null,
					"AQAAAAYeAAAAAAAABh4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7034,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7037,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAceAAAAAAAACB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7042,
					1,
					"left_delete",
					null,
					"AQAAAAceAAAAAAAABx4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACB4AAAAAAAAIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7044,
					1,
					"left_delete",
					null,
					"AQAAAAYeAAAAAAAABh4AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7046,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7052,
					1,
					"left_delete",
					null,
					"AQAAAPwdAAAAAAAA/B0AAAAAAAALAAAAJnIsICZnLCAmYiw",
					"AQAAAAAAAAABAAAABx4AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7055,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPsdAAAAAAAA+x0AAAAAAAABAAAAKPsdAAAAAAAA+x0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7058,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7062,
					1,
					"left_delete",
					null,
					"AQAAAPwdAAAAAAAA/B0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7064,
					1,
					"left_delete",
					null,
					"AQAAAPsdAAAAAAAA+x0AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7066,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7072,
					1,
					"left_delete",
					null,
					"AQAAAPsdAAAAAAAA+x0AAAAAAAACAAAAKCk",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7075,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7087,
					1,
					"left_delete",
					null,
					"AQAAAPwdAAAAAAAA/B0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7089,
					1,
					"left_delete",
					null,
					"AQAAAPsdAAAAAAAA+x0AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7091,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7105,
					1,
					"left_delete",
					null,
					"AQAAAPMdAAAAAAAA8x0AAAAAAAAKAAAAUkdCdG9IU1YoKQ",
					"AQAAAAAAAAABAAAA8x0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7115,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"DgAAAJYfAAAAAAAAmR8AAAAAAAAAAAAAcx8AAAAAAAB2HwAAAAAAAAAAAABQHwAAAAAAAFMfAAAAAAAAAAAAACwfAAAAAAAALx8AAAAAAAAAAAAACh8AAAAAAAANHwAAAAAAAAAAAAD0HgAAAAAAAPceAAAAAAAAAAAAAOEeAAAAAAAA5B4AAAAAAAAAAAAAvh4AAAAAAADBHgAAAAAAAAAAAAClHgAAAAAAAKgeAAAAAAAAAAAAAHoeAAAAAAAAfR4AAAAAAAAAAAAAXB4AAAAAAABfHgAAAAAAAAAAAAAxHgAAAAAAADQeAAAAAAAAAAAAAB0eAAAAAAAAIB4AAAAAAAAAAAAA/R0AAAAAAAAAHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/R0AAAAAAACYHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7125,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAPMdAAAAAAAA9x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8x0AAAAAAADzHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7128,
					1,
					"left_delete",
					null,
					"AQAAAPMdAAAAAAAA8x0AAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA9x0AAAAAAAD3HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7131,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAPMdAAAAAAAA9B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8x0AAAAAAADzHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7134,
					1,
					"insert",
					{
						"characters": "G"
					},
					"AQAAAPQdAAAAAAAA9R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9B0AAAAAAAD0HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7139,
					1,
					"insert_completion",
					{
						"completion": "RGBtoHSV",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RGBtoHSV"
					},
					"AgAAAPMdAAAAAAAA8x0AAAAAAAACAAAAUkfzHQAAAAAAAPsdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9R0AAAAAAAD1HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7142,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7150,
					1,
					"left_delete",
					null,
					"AQAAAPwdAAAAAAAA/B0AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7152,
					1,
					"left_delete",
					null,
					"AQAAAPsdAAAAAAAA+x0AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7154,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x0AAAAAAAD7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7157,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAPwdAAAAAAAA/R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7160,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAP0dAAAAAAAA/h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/R0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7163,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAP4dAAAAAAAA/x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/h0AAAAAAAD+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7165,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8dAAAAAAAAAB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/x0AAAAAAAD/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7167,
					1,
					"left_delete",
					null,
					"AQAAAP8dAAAAAAAA/x0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAAB4AAAAAAAAAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7169,
					1,
					"left_delete",
					null,
					"AQAAAP4dAAAAAAAA/h0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAA/x0AAAAAAAD/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7171,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAP4dAAAAAAAA/x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/h0AAAAAAAD+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7173,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8dAAAAAAAAAB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/x0AAAAAAAD/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7175,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAAeAAAAAAAAAR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB4AAAAAAAAAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7177,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAAEeAAAAAAAAAh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAR4AAAAAAAABHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7179,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAIeAAAAAAAAAx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAh4AAAAAAAACHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMeAAAAAAAABB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAx4AAAAAAAADHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7183,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAQeAAAAAAAABR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABB4AAAAAAAAEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7185,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAAUeAAAAAAAABh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABR4AAAAAAAAFHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7187,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAYeAAAAAAAABx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh4AAAAAAAAGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7189,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAceAAAAAAAACB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx4AAAAAAAAHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7191,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAgeAAAAAAAACR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACB4AAAAAAAAIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7194,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAAkeAAAAAAAACh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACR4AAAAAAAAJHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7197,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAoeAAAAAAAACx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACh4AAAAAAAAKHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7200,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAseAAAAAAAADB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACx4AAAAAAAALHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7203,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAweAAAAAAAADR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADB4AAAAAAAAMHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7206,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAA0eAAAAAAAADh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADR4AAAAAAAANHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7209,
					1,
					"left_delete",
					null,
					"AQAAAA0eAAAAAAAADR4AAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAADh4AAAAAAAAOHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7211,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAA0eAAAAAAAADh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADR4AAAAAAAANHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7213,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA4eAAAAAAAADx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADh4AAAAAAAAOHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7215,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8eAAAAAAAAEB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADx4AAAAAAAAPHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7217,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAABAeAAAAAAAAER4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEB4AAAAAAAAQHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7219,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAABEeAAAAAAAAEh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAER4AAAAAAAARHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7222,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABMeAAAAAAAAFB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEx4AAAAAAAATHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7237,
					1,
					"left_delete",
					null,
					"BgAAABAeAAAAAAAAEB4AAAAAAAABAAAAJgweAAAAAAAADB4AAAAAAAABAAAAJggeAAAAAAAACB4AAAAAAAABAAAAJgQeAAAAAAAABB4AAAAAAAABAAAAJgAeAAAAAAAAAB4AAAAAAAABAAAAJvwdAAAAAAAA/B0AAAAAAAABAAAAJg",
					"AQAAAAAAAAAGAAAA/B0AAAAAAAD9HQAAAAAAAAAAAAAAAPC/AB4AAAAAAAABHgAAAAAAAAAAAAAAAPC/BB4AAAAAAAAFHgAAAAAAAAAAAAAAAPC/CB4AAAAAAAAJHgAAAAAAAAAAAAAAAPC/DB4AAAAAAAANHgAAAAAAAAAAAAAAAPC/EB4AAAAAAAARHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7251,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"DgAAANgfAAAAAAAA2B8AAAAAAAADAAAALy8gsh8AAAAAAACyHwAAAAAAAAMAAAAvLyCMHwAAAAAAAIwfAAAAAAAAAwAAAC8vIGUfAAAAAAAAZR8AAAAAAAADAAAALy8gQB8AAAAAAABAHwAAAAAAAAMAAAAvLyAnHwAAAAAAACcfAAAAAAAAAwAAAC8vIBEfAAAAAAAAER8AAAAAAAADAAAALy8g6x4AAAAAAADrHgAAAAAAAAMAAAAvLyDPHgAAAAAAAM8eAAAAAAAAAwAAAC8vIKEeAAAAAAAAoR4AAAAAAAADAAAALy8ggB4AAAAAAACAHgAAAAAAAAMAAAAvLyBSHgAAAAAAAFIeAAAAAAAAAwAAAC8vIDseAAAAAAAAOx4AAAAAAAADAAAALy8gGB4AAAAAAAAYHgAAAAAAAAMAAAAvLyA",
					"AQAAAAAAAAABAAAAJR4AAAAAAADdHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7267,
					1,
					"left_delete",
					null,
					"AQAAABAeAAAAAAAAEB4AAAAAAABeAAAAICAgICAgICBjb2xvcjo6aHN2PGRvdWJsZT4gaHN2OwogICAgICAgIGhzdiA9IHJnYjsKCiAgICAgICAgZG91YmxlIGh1ZSA9IGNvbG9yOjpnZXQ6Omh1ZShoc3YpOw",
					"AQAAAAAAAAABAAAAbh4AAAAAAAAQHgAAAAAAAAAAAAAAAAAA"
				],
				[
					7270,
					1,
					"left_delete",
					null,
					"AQAAAA8eAAAAAAAADx4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEB4AAAAAAAAQHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7277,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAABgeAAAAAAAAGR4AAAAAAAAAAAAAGR4AAAAAAAAZHgAAAAAAAAMAAABodWU",
					"AQAAAAAAAAABAAAAGB4AAAAAAAAbHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7284,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAGkeAAAAAAAAah4AAAAAAAAAAAAAah4AAAAAAABqHgAAAAAAAAMAAABodWU",
					"AQAAAAAAAAABAAAAaR4AAAAAAABsHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7299,
					1,
					"left_delete",
					null,
					"AQAAAG4eAAAAAAAAbh4AAAAAAAAiAAAAICAgICAgICBjb2xvcjo6c2V0OjpodWUoaHN2LCBodWUpOw",
					"AQAAAAAAAAABAAAAkB4AAAAAAABuHgAAAAAAAAAAAAAAAAAA"
				],
				[
					7301,
					1,
					"left_delete",
					null,
					"AQAAAG0eAAAAAAAAbR4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAbh4AAAAAAABuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7309,
					1,
					"reindent",
					null,
					"AQAAAG0eAAAAAAAAdR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbR4AAAAAAABtHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7312,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHUeAAAAAAAAdh4AAAAAAAAAAAAAdh4AAAAAAAB+HgAAAAAAAAAAAABtHgAAAAAAAG0eAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAdR4AAAAAAAB1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7314,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAHYeAAAAAAAAdx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdh4AAAAAAAB2HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7316,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAHceAAAAAAAAeB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdx4AAAAAAAB3HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7318,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAHgeAAAAAAAAeR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeB4AAAAAAAB4HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7322,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" HSVtoRGB(float &fR, float &fG, float &fB, float &fH, float &fS, float &fV)\",\"detail\":\"void\",\"documentation\":{\"value\":\"\\\\\\\\brief Convert HSV to RGB color space  \\nConverts a given set of HSV values \\\\`h', \\\\`s', \\\\`v' into RGB coordinates. The output RGB values are in the range [0, 1], and the input HSV values are in the ranges h = [0, 360], and s, v = [0, 1], respectively.  \\n\\\\\\\\param fR Red component, used as output, range: [0, 1]  \\n\\\\\\\\param fG Green component, used as output, range: [0, 1]  \\n\\\\\\\\param fB Blue component, used as output, range: [0, 1]  \\n\\\\\\\\param fH Hue component, used as input, range: [0, 360]  \\n\\\\\\\\param fS Hue component, used as input, range: [0, 1]  \\n\\\\\\\\param fV Hue component, used as input, range: [0, 1]\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":9,\"line\":266},\"start\":{\"character\":8,\"line\":266}},\"newText\":\"HSVtoRGB(${1:float &fR}, ${2:float &fG}, ${3:float &fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"},\"filterText\":\"HSVtoRGB\",\"score\":1.4183518886566162,\"kind\":3,\"sortText\":\"404a7372HSVtoRGB\",\"insertText\":\"HSVtoRGB(${1:float &fR}, ${2:float &fG}, ${3:float &fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3852,
							7314,
							1
						],
						"trigger": "HSVtoRGB"
					},
					"BAAAAHgeAAAAAAAAeB4AAAAAAAABAAAAVnceAAAAAAAAdx4AAAAAAAABAAAAU3YeAAAAAAAAdh4AAAAAAAABAAAASHYeAAAAAAAAwB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeR4AAAAAAAB5HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7335,
					1,
					"paste",
					null,
					"AgAAAHYeAAAAAAAAkR4AAAAAAAAAAAAAkR4AAAAAAACRHgAAAAAAAEoAAABIU1Z0b1JHQihmbG9hdCAmZlIsIGZsb2F0ICZmRywgZmxvYXQgJmZCLCBmbG9hdCAmZkgsIGZsb2F0ICZmUywgZmxvYXQgJmZWKQ",
					"AQAAAAAAAAABAAAAdh4AAAAAAADAHgAAAAAAAP///////+9/"
				],
				[
					7339,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJEeAAAAAAAAkh4AAAAAAAAAAAAAkh4AAAAAAACaHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkR4AAAAAAACRHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7348,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AgAAAJseAAAAAAAAmx4AAAAAAAATAAAAICAgICAgICByZ2IgPSBoc3Y7CpIeAAAAAAAAkh4AAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAArR4AAAAAAACtHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7358,
					1,
					"paste",
					null,
					"AgAAALUeAAAAAAAAyR4AAAAAAAAAAAAAyR4AAAAAAADJHgAAAAAAABQAAABjb2xvcjo6Z2V0OjpyZWQocmdiKQ",
					"AQAAAAAAAAABAAAAtR4AAAAAAADJHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7368,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAALweAAAAAAAAvR4AAAAAAAAAAAAAvR4AAAAAAAC9HgAAAAAAAAUAAAByZ2IueA",
					"AQAAAAAAAAABAAAAvB4AAAAAAADBHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7391,
					1,
					"left_delete",
					null,
					"AQAAANMeAAAAAAAA0x4AAAAAAABdAAAAY29sb3I6OmdldDo6Z3JlZW4ocmdiKSwKICAgICAgICAgICAgY29sb3I6OmdldDo6Ymx1ZShyZ2IpLAogICAgICAgICAgICBjb2xvcjo6Z2V0OjphbHBoYShyZ2Ip",
					"AQAAAAAAAAABAAAA0x4AAAAAAAAwHwAAAAAAAAAAAAAAsHNA"
				],
				[
					7396,
					1,
					"duplicate_line",
					null,
					"AQAAAMceAAAAAAAA5R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtR4AAAAAAAC1HgAAAAAAAAAAAAAAAFtA"
				],
				[
					7398,
					1,
					"duplicate_line",
					null,
					"AQAAAOUeAAAAAAAAAx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0x4AAAAAAADTHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7401,
					1,
					"duplicate_line",
					null,
					"AQAAAAMfAAAAAAAAIR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8R4AAAAAAADxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7410,
					1,
					"left_delete",
					null,
					"AQAAACEfAAAAAAAAIR8AAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAALR8AAAAAAAAhHwAAAAAAAAAAAAAAAAAA"
				],
				[
					7412,
					1,
					"left_delete",
					null,
					"AQAAACAfAAAAAAAAIB8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAIR8AAAAAAAAhHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7415,
					1,
					"left_delete",
					null,
					"AQAAAB8fAAAAAAAAHx8AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAIB8AAAAAAAAgHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7425,
					1,
					"left_delete",
					null,
					"AQAAANoeAAAAAAAA2h4AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA2x4AAAAAAADbHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7428,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAANoeAAAAAAAA2x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h4AAAAAAADaHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7433,
					1,
					"left_delete",
					null,
					"AQAAAPgeAAAAAAAA+B4AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA+R4AAAAAAAD5HgAAAAAAAAAAAAAAgGZA"
				],
				[
					7435,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAPgeAAAAAAAA+R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+B4AAAAAAAD4HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7439,
					1,
					"left_delete",
					null,
					"AQAAABYfAAAAAAAAFh8AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFx8AAAAAAAAXHwAAAAAAAAAAAAAAgGZA"
				],
				[
					7441,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAABYfAAAAAAAAFx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFh8AAAAAAAAWHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7455,
					1,
					"paste",
					null,
					"BAAAAA8fAAAAAAAAHh8AAAAAAAAAAAAA8R4AAAAAAAAAHwAAAAAAAAAAAADTHgAAAAAAAOIeAAAAAAAAAAAAALUeAAAAAAAAxB4AAAAAAAAAAAAA",
					"AQAAAAAAAAAEAAAAtR4AAAAAAAC1HgAAAAAAAAAAAAAAAPC/0x4AAAAAAADTHgAAAAAAAAAAAAAAAPC/8R4AAAAAAADxHgAAAAAAAAAAAAAAAPC/Dx8AAAAAAAAPHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7482,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"EAAAAGQfAAAAAAAAZx8AAAAAAAAAAAAAOB8AAAAAAAA7HwAAAAAAAAAAAAALHwAAAAAAAA4fAAAAAAAAAAAAAN4eAAAAAAAA4R4AAAAAAAAAAAAAsR4AAAAAAAC0HgAAAAAAAAAAAACbHgAAAAAAAJ4eAAAAAAAAAAAAAHYeAAAAAAAAeR4AAAAAAAAAAAAAXx4AAAAAAABiHgAAAAAAAAAAAAA0HgAAAAAAADceAAAAAAAAAAAAABgeAAAAAAAAGx4AAAAAAAAAAAAA8x0AAAAAAAD2HQAAAAAAAAAAAADbHQAAAAAAAN4dAAAAAAAAAAAAALUdAAAAAAAAuB0AAAAAAAAAAAAAjx0AAAAAAACSHQAAAAAAAAAAAABpHQAAAAAAAGwdAAAAAAAAAAAAAEMdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARh0AAAAAAABmHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7536,
					1,
					"left_delete",
					null,
					"AQAAADEdAAAAAAAAMR0AAAAAAADHAAAACiAgICAgICAgCiAgICAgICAgLy8gZmxvYXQgciA9IGN1cnJlbnRGZy5yLzI1NS4wZjsKICAgICAgICAvLyBmbG9hdCBnID0gY3VycmVudEZnLmcvMjU1LjBmOwogICAgICAgIC8vIGZsb2F0IGIgPSBjdXJyZW50RmcuYi8yNTUuMGY7CiAgICAgICAgLy8gZmxvYXQgYSA9IGN1cnJlbnRGZy5hLzI1NS4wZjsKICAgICAgICAvLyBmbG9hdCBoLCBzLCB2Ow",
					"AQAAAAAAAAABAAAA+B0AAAAAAAAxHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7538,
					1,
					"left_delete",
					null,
					"AQAAADAdAAAAAAAAMB0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAMR0AAAAAAAAxHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7555,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAAK8dAAAAAAAArx0AAAAAAAADAAAALy8ggR0AAAAAAACBHQAAAAAAAAMAAAAvLyBiHQAAAAAAAGIdAAAAAAAAAwAAAC8vIA",
					"AQAAAAAAAAABAAAAuR0AAAAAAABtHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7568,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AgAAADodAAAAAAAAOx0AAAAAAAAAAAAAOx0AAAAAAAA7HQAAAAAAAB4AAAAvLyBSR0J0b0hTVihyLCBnLCBiLCBoLCBzLCB2KTs",
					"AQAAAAAAAAABAAAAWB0AAAAAAAA6HQAAAAAAAAAAAAAAAFJA"
				],
				[
					7570,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADsdAAAAAAAAPB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOx0AAAAAAAA7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7572,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADwdAAAAAAAAPR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPB0AAAAAAAA8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7574,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD0dAAAAAAAAPh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPR0AAAAAAAA9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7576,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAD4dAAAAAAAAPx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPh0AAAAAAAA+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7578,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAD8dAAAAAAAAQB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPx0AAAAAAAA/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7581,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAEAdAAAAAAAAQR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB0AAAAAAABAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7584,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEdAAAAAAAAQh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR0AAAAAAABBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7587,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAEIdAAAAAAAAQx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7589,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEMdAAAAAAAARB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7591,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAEQdAAAAAAAARR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7593,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7595,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEYdAAAAAAAARx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARh0AAAAAAABGHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7597,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcdAAAAAAAASB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARx0AAAAAAABHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7599,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAEgdAAAAAAAASR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASB0AAAAAAABIHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7601,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAEkdAAAAAAAASh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASR0AAAAAAABJHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7603,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAEodAAAAAAAASx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASh0AAAAAAABKHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7605,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAEsdAAAAAAAATB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASx0AAAAAAABLHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7607,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEwdAAAAAAAATR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATB0AAAAAAABMHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7610,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAE0dAAAAAAAATh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATR0AAAAAAABNHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7617,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" ColorToHSV(Color color)\",\"detail\":\"Vector3\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nGet HSV values for a Color NOTE: Hue is returned as degrees [0..360]\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":28,\"line\":253},\"start\":{\"character\":22,\"line\":253}},\"newText\":\"ColorToHSV(${1:Color color})\"},\"filterText\":\"ColorToHSV\",\"score\":1.6401029825210571,\"kind\":3,\"sortText\":\"402e111bColorToHSV\",\"insertText\":\"ColorToHSV(${1:Color color})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							3962,
							7610,
							1
						],
						"trigger": "ColorToHSV"
					},
					"AgAAAEgdAAAAAAAASB0AAAAAAAAGAAAAQ29sb3JUSB0AAAAAAABfHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATh0AAAAAAABOHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7631,
					1,
					"paste",
					null,
					"AgAAAFMdAAAAAAAAXB0AAAAAAAAAAAAAXB0AAAAAAABcHQAAAAAAAAsAAABDb2xvciBjb2xvcg",
					"AQAAAAAAAAABAAAAUx0AAAAAAABeHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7638,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF0dAAAAAAAAXh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXR0AAAAAAABdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7643,
					1,
					"reindent",
					null,
					"AQAAAF8dAAAAAAAAZx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXx0AAAAAAABfHQAAAAAAAAAAAAAAwHhA"
				],
				[
					7650,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAHEdAAAAAAAAch0AAAAAAAAAAAAAXx0AAAAAAABfHQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAcR0AAAAAAABxHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7652,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAGodAAAAAAAAax0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAah0AAAAAAABqHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7655,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAGsdAAAAAAAAbB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAax0AAAAAAABrHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7657,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAGwdAAAAAAAAbR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbB0AAAAAAABsHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7668,
					1,
					"paste",
					null,
					"AgAAAL0dAAAAAAAAwh0AAAAAAAAAAAAAwh0AAAAAAADCHQAAAAAAAAEAAABo",
					"AQAAAAAAAAABAAAAvh0AAAAAAAC9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7690,
					1,
					"paste",
					null,
					"AgAAAGgdAAAAAAAAbx0AAAAAAAAAAAAAbx0AAAAAAABvHQAAAAAAAAUAAABoc3YueA",
					"AQAAAAAAAAABAAAAaB0AAAAAAABtHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7705,
					1,
					"paste",
					null,
					"AgAAAL8dAAAAAAAAxh0AAAAAAAAAAAAAxh0AAAAAAADGHQAAAAAAAAUAAABoc3YueA",
					"AQAAAAAAAAABAAAAvx0AAAAAAADEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7720,
					1,
					"paste",
					null,
					"AgAAAOkUAAAAAAAA8BQAAAAAAAAAAAAA8BQAAAAAAADwFAAAAAAAAAoAAABjdXJyZW50SFNW",
					"AQAAAAAAAAABAAAA6RQAAAAAAADzFAAAAAAAAAAAAAAAAPC/"
				],
				[
					7725,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAgVAAAAAAAACRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACBUAAAAAAAAIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					7727,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAAkVAAAAAAAAChUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRUAAAAAAAAJFQAAAAAAAAAAAAAAAPC/"
				],
				[
					7735,
					1,
					"reindent",
					null,
					"AQAAAMgdAAAAAAAA0B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyB0AAAAAAADIHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7739,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANAdAAAAAAAA0R0AAAAAAAAAAAAA0R0AAAAAAADZHQAAAAAAAAAAAADIHQAAAAAAAMgdAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA0B0AAAAAAADQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7743,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAANEdAAAAAAAA0h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0R0AAAAAAADRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7745,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAANIdAAAAAAAA0x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0h0AAAAAAADSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7747,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMdAAAAAAAA1B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0x0AAAAAAADTHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7749,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANQdAAAAAAAA1h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1B0AAAAAAADUHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7751,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAANUdAAAAAAAA1h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1R0AAAAAAADVHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7753,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANYdAAAAAAAA1x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1h0AAAAAAADWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7755,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANcdAAAAAAAA2B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1x0AAAAAAADXHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7757,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AQAAANgdAAAAAAAA2R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2B0AAAAAAADYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7759,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAANkdAAAAAAAA2h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2R0AAAAAAADZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7762,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" GetMousePosition()\",\"detail\":\"Vector2\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nGet mouse position XY\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":13,\"line\":259},\"start\":{\"character\":12,\"line\":259}},\"newText\":\"GetMousePosition()\"},\"filterText\":\"GetMousePosition\",\"score\":0.5182026028633118,\"kind\":3,\"sortText\":\"40fb5713GetMousePosition\",\"insertText\":\"GetMousePosition()\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4026,
							7751,
							1
						],
						"trigger": "GetMousePosition"
					},
					"BgAAANkdAAAAAAAA2R0AAAAAAAABAAAAb9gdAAAAAAAA2B0AAAAAAAABAAAATdcdAAAAAAAA1x0AAAAAAAABAAAAdNYdAAAAAAAA1h0AAAAAAAABAAAAZdUdAAAAAAAA1R0AAAAAAAABAAAAZ9UdAAAAAAAA5x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7766,
					1,
					"cut",
					null,
					"AQAAANUdAAAAAAAA1R0AAAAAAAASAAAAR2V0TW91c2VQb3NpdGlvbigp",
					"AQAAAAAAAAABAAAA5x0AAAAAAADVHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7771,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAANUdAAAAAAAA1h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1R0AAAAAAADVHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7774,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAANYdAAAAAAAA1x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1h0AAAAAAADWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7776,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANcdAAAAAAAA2B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1x0AAAAAAADXHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7778,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAANgdAAAAAAAA2R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2B0AAAAAAADYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7780,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAANkdAAAAAAAA2h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2R0AAAAAAADZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7782,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAANodAAAAAAAA2x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2h0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7794,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" CheckCollisionPointRec(Vector2 point, Rectangle rec)\",\"detail\":\"bool\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nCheck if point is inside rectangle\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":18,\"line\":259},\"start\":{\"character\":12,\"line\":259}},\"newText\":\"CheckCollisionPointRec(${1:Vector2 point}, ${2:Rectangle rec})\"},\"filterText\":\"CheckCollisionPointRec\",\"score\":0.745274543762207,\"kind\":3,\"sortText\":\"40c135b0CheckCollisionPointRec\",\"insertText\":\"CheckCollisionPointRec(${1:Vector2 point}, ${2:Rectangle rec})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4039,
							7782,
							1
						],
						"trigger": "CheckCollisionPointRec"
					},
					"AgAAANUdAAAAAAAA1R0AAAAAAAAGAAAAY2hlY2tD1R0AAAAAAAAJHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2x0AAAAAAADbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7797,
					1,
					"left_delete",
					null,
					"AQAAAOwdAAAAAAAA7B0AAAAAAAANAAAAVmVjdG9yMiBwb2ludA",
					"AQAAAAAAAAABAAAA7B0AAAAAAAD5HQAAAAAAAAAAAAAAAPC/"
				],
				[
					7800,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAOwdAAAAAAAA7R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7B0AAAAAAADsHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7802,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAO0dAAAAAAAA7h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7R0AAAAAAADtHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7804,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAO4dAAAAAAAA7x0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7h0AAAAAAADuHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7806,
					1,
					"insert",
					{
						"characters": "M"
					},
					"AQAAAO8dAAAAAAAA8B0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7x0AAAAAAADvHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7811,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" GetMousePosition()\",\"detail\":\"Vector2\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nGet mouse position XY\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":36,\"line\":259},\"start\":{\"character\":35,\"line\":259}},\"newText\":\"GetMousePosition()\"},\"filterText\":\"GetMousePosition\",\"score\":1.1376502513885498,\"kind\":3,\"sortText\":\"406e617aGetMousePosition\",\"insertText\":\"GetMousePosition()\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4042,
							7800,
							1
						],
						"trigger": "GetMousePosition"
					},
					"BQAAAO8dAAAAAAAA7x0AAAAAAAABAAAATe4dAAAAAAAA7h0AAAAAAAABAAAAdO0dAAAAAAAA7R0AAAAAAAABAAAAZewdAAAAAAAA7B0AAAAAAAABAAAAZ+wdAAAAAAAA/h0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8B0AAAAAAADwHQAAAAAAAAAAAAAAAPC/"
				],
				[
					7826,
					1,
					"paste",
					null,
					"AgAAAAAeAAAAAAAAHR4AAAAAAAAAAAAAHR4AAAAAAAAdHgAAAAAAAA0AAABSZWN0YW5nbGUgcmVj",
					"AQAAAAAAAAABAAAAAB4AAAAAAAANHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7831,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB8eAAAAAAAAIB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHx4AAAAAAAAfHgAAAAAAAP///////+9/"
				],
				[
					7834,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACAeAAAAAAAAIh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIB4AAAAAAAAgHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7836,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACEeAAAAAAAAIh4AAAAAAAAAAAAAIh4AAAAAAAAqHgAAAAAAAAAAAAAqHgAAAAAAACseAAAAAAAAAAAAACseAAAAAAAAMx4AAAAAAAAAAAAAIh4AAAAAAAAiHgAAAAAAAAgAAAAgICAgICAgICIeAAAAAAAALh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIR4AAAAAAAAhHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7840,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAC4eAAAAAAAALx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALh4AAAAAAAAuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7843,
					1,
					"left_delete",
					null,
					"AQAAAC4eAAAAAAAALh4AAAAAAAABAAAAQw",
					"AQAAAAAAAAABAAAALx4AAAAAAAAvHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7846,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAAC4eAAAAAAAALx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALh4AAAAAAAAuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7849,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAC8eAAAAAAAAMB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALx4AAAAAAAAvHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7851,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAADAeAAAAAAAAMR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMB4AAAAAAAAwHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7853,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADEeAAAAAAAAMh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMR4AAAAAAAAxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7855,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADIeAAAAAAAAMx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMh4AAAAAAAAyHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7857,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADMeAAAAAAAANB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMx4AAAAAAAAzHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7859,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADQeAAAAAAAANR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANB4AAAAAAAA0HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7861,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAADUeAAAAAAAANh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANR4AAAAAAAA1HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7863,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAADYeAAAAAAAANx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANh4AAAAAAAA2HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7865,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAADceAAAAAAAAOB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANx4AAAAAAAA3HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7867,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgeAAAAAAAAOR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOB4AAAAAAAA4HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7870,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADkeAAAAAAAAOh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOR4AAAAAAAA5HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7872,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoeAAAAAAAAOx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOh4AAAAAAAA6HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7876,
					1,
					"left_delete",
					null,
					"AQAAAC4eAAAAAAAALh4AAAAAAAANAAAAQ29sb3IgdGVtcCA9IA",
					"AQAAAAAAAAABAAAAOx4AAAAAAAAuHgAAAAAAAAAAAAAAAFtA"
				],
				[
					7879,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAC4eAAAAAAAALx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALh4AAAAAAAAuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7882,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAC8eAAAAAAAAMB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALx4AAAAAAAAvHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7885,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADAeAAAAAAAAMR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMB4AAAAAAAAwHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7892,
					1,
					"insert_completion",
					{
						"completion": "currentFg",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "currentFg"
					},
					"AgAAAC4eAAAAAAAALh4AAAAAAAADAAAAY3VyLh4AAAAAAAA3HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMR4AAAAAAAAxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7895,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADceAAAAAAAAOB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANx4AAAAAAAA3HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7898,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADgeAAAAAAAAOR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOB4AAAAAAAA4HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7900,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkeAAAAAAAAOh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOR4AAAAAAAA5HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7902,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAADoeAAAAAAAAOx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOh4AAAAAAAA6HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7904,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADseAAAAAAAAPB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOx4AAAAAAAA7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7906,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAADweAAAAAAAAPR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPB4AAAAAAAA8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7908,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAD0eAAAAAAAAPh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPR4AAAAAAAA9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7910,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAD4eAAAAAAAAPx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPh4AAAAAAAA+HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7912,
					1,
					"insert",
					{
						"characters": "F"
					},
					"AQAAAD8eAAAAAAAAQB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPx4AAAAAAAA/HgAAAAAAAAAAAAAAAPC/"
				],
				[
					7914,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEAeAAAAAAAAQR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB4AAAAAAABAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7916,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAEEeAAAAAAAAQh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR4AAAAAAABBHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7918,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAEIeAAAAAAAAQx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh4AAAAAAABCHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7920,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" ColorFromHSV(float hue, float saturation, float value)\",\"detail\":\"Color\",\"documentation\":{\"value\":\"From `\\\"raylib.h\\\"`  \\nGet a Color from HSV values Implementation reference: https://en.wikipedia.org/wiki/HSL_and_HSV#Alternative_HSV_conversion NOTE: Color->HSV->Color conversion will not yield exactly the same color due to rounding errors Hue is provided in degrees: [0..360] Saturation/Value are provided normalized: [0.0f..1.0f]\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":33,\"line\":260},\"start\":{\"character\":24,\"line\":260}},\"newText\":\"ColorFromHSV(${1:float hue}, ${2:float saturation}, ${3:float value})\"},\"filterText\":\"ColorFromHSV\",\"score\":0.745274543762207,\"kind\":3,\"sortText\":\"40c135b0ColorFromHSV\",\"insertText\":\"ColorFromHSV(${1:float hue}, ${2:float saturation}, ${3:float value})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4092,
							7918,
							1
						],
						"trigger": "ColorFromHSV"
					},
					"AgAAADoeAAAAAAAAOh4AAAAAAAAJAAAAQ29sb3JGcm9tOh4AAAAAAABwHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx4AAAAAAABDHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7923,
					1,
					"left_delete",
					null,
					"AQAAAEceAAAAAAAARx4AAAAAAAAJAAAAZmxvYXQgaHVl",
					"AQAAAAAAAAABAAAARx4AAAAAAABQHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7926,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAEceAAAAAAAASB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARx4AAAAAAABHHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7928,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAEgeAAAAAAAASR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASB4AAAAAAABIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7930,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEkeAAAAAAAASh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASR4AAAAAAABJHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7942,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEoeAAAAAAAASx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASh4AAAAAAABKHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7944,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAEseAAAAAAAATB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASx4AAAAAAABLHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7946,
					1,
					"insert_completion",
					{
						"completion": "lastHue",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "lastHue"
					},
					"AgAAAEceAAAAAAAARx4AAAAAAAAFAAAAbGFzdEhHHgAAAAAAAE4eAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATB4AAAAAAABMHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7951,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAFAeAAAAAAAAUR4AAAAAAAAAAAAAUR4AAAAAAABRHgAAAAAAABAAAABmbG9hdCBzYXR1cmF0aW9u",
					"AQAAAAAAAAABAAAAUB4AAAAAAABgHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7954,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFEeAAAAAAAAUh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR4AAAAAAABRHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7956,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFIeAAAAAAAAUx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUh4AAAAAAABSHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7958,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFMeAAAAAAAAVB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUx4AAAAAAABTHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7961,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAFQeAAAAAAAAVR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVB4AAAAAAABUHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7967,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAFceAAAAAAAAWB4AAAAAAAAAAAAAWB4AAAAAAABYHgAAAAAAAAsAAABmbG9hdCB2YWx1ZQ",
					"AQAAAAAAAAABAAAAVx4AAAAAAABiHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7970,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFgeAAAAAAAAWR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWB4AAAAAAABYHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7972,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAFkeAAAAAAAAWh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWR4AAAAAAABZHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7974,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFoeAAAAAAAAWx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWh4AAAAAAABaHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7976,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAFseAAAAAAAAXB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWx4AAAAAAABbHgAAAAAAAAAAAAAAAPC/"
				],
				[
					7988,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF0eAAAAAAAAXh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXR4AAAAAAABdHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8006,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAADkdAAAAAAAAOh0AAAAAAAAAAAAAOh0AAAAAAAA6HQAAAAAAACQAAABWZWN0b3IzIGhzdiA9IENvbG9yVG9IU1YoY3VycmVudEZnKTs",
					"AQAAAAAAAAABAAAAOR0AAAAAAABdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8008,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAADodAAAAAAAAOx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOh0AAAAAAAA6HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8010,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAADsdAAAAAAAAPB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOx0AAAAAAAA7HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8012,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADwdAAAAAAAAPR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPB0AAAAAAAA8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8014,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD0dAAAAAAAAPh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPR0AAAAAAAA9HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8017,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4dAAAAAAAAPx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPh0AAAAAAAA+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8019,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAD8dAAAAAAAAQB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPx0AAAAAAAA/HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8021,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEAdAAAAAAAAQR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB0AAAAAAABAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8023,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEEdAAAAAAAAQh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR0AAAAAAABBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8026,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAEIdAAAAAAAAQx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8029,
					1,
					"left_delete",
					null,
					"AQAAAEIdAAAAAAAAQh0AAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8032,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEIdAAAAAAAAQx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8034,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAEMdAAAAAAAARB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8036,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEQdAAAAAAAARR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8040,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEdAAAAAAAAQh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR0AAAAAAABBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8043,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQdAAAAAAAARR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8048,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEcdAAAAAAAASB0AAAAAAAAAAAAASB0AAAAAAABQHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARx0AAAAAAABHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8052,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAFAdAAAAAAAAUR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUB0AAAAAAABQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8055,
					1,
					"left_delete",
					null,
					"AQAAAFAdAAAAAAAAUB0AAAAAAAABAAAASA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8058,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAAFAdAAAAAAAAUR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUB0AAAAAAABQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8060,
					1,
					"insert",
					{
						"characters": "G"
					},
					"AQAAAFEdAAAAAAAAUh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8063,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAFIdAAAAAAAAUx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUh0AAAAAAABSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8068,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAFMdAAAAAAAAVB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUx0AAAAAAABTHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8070,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAFQdAAAAAAAAVR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVB0AAAAAAABUHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8073,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" RGBtoHSV(float &fR, float &fG, float fB, float &fH, float &fS, float &fV)\",\"detail\":\"void\",\"documentation\":{\"value\":\"\\\\\\\\brief Convert RGB to HSV color space  \\nConverts a given set of RGB values \\\\`r', \\\\`g', \\\\`b' into HSV coordinates. The input RGB values are in the range [0, 1], and the output HSV values are in the ranges h = [0, 360], and s, v = [0,  \\n1], respectively.  \\n\\\\\\\\param fR Red component, used as input, range: [0, 1]  \\n\\\\\\\\param fG Green component, used as input, range: [0, 1]  \\n\\\\\\\\param fB Blue component, used as input, range: [0, 1]  \\n\\\\\\\\param fH Hue component, used as output, range: [0, 360]  \\n\\\\\\\\param fS Hue component, used as output, range: [0, 1]  \\n\\\\\\\\param fV Hue component, used as output, range: [0, 1]\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":11,\"line\":254},\"start\":{\"character\":8,\"line\":254}},\"newText\":\"RGBtoHSV(${1:float &fR}, ${2:float &fG}, ${3:float fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"},\"filterText\":\"RGBtoHSV\",\"score\":1.4183518886566162,\"kind\":3,\"sortText\":\"404a7372RGBtoHSV\",\"insertText\":\"RGBtoHSV(${1:float &fR}, ${2:float &fG}, ${3:float fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4151,
							8063,
							1
						],
						"trigger": "RGBtoHSV"
					},
					"BAAAAFQdAAAAAAAAVB0AAAAAAAABAAAAb1MdAAAAAAAAUx0AAAAAAAABAAAAdFAdAAAAAAAAUB0AAAAAAAADAAAAUkdCUB0AAAAAAACZHQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVR0AAAAAAABVHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8082,
					1,
					"duplicate_line",
					null,
					"AQAAAEgdAAAAAAAAXx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARx0AAAAAAABHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8088,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAAD8dAAAAAAAAQB0AAAAAAAAAAAAAQB0AAAAAAABAHQAAAAAAAAEAAABo",
					"AQAAAAAAAAABAAAAPx0AAAAAAABAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8092,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAEMdAAAAAAAARB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8095,
					1,
					"left_delete",
					null,
					"AQAAAEMdAAAAAAAAQx0AAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8097,
					1,
					"left_delete",
					null,
					"AQAAAEIdAAAAAAAAQh0AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8106,
					1,
					"left_delete",
					null,
					"AQAAAEQdAAAAAAAARB0AAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAARR0AAAAAAABFHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8108,
					1,
					"left_delete",
					null,
					"AQAAAEMdAAAAAAAAQx0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARB0AAAAAAABEHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8110,
					1,
					"left_delete",
					null,
					"AQAAAEIdAAAAAAAAQh0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8112,
					1,
					"left_delete",
					null,
					"AQAAAEEdAAAAAAAAQR0AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8114,
					1,
					"left_delete",
					null,
					"AQAAAEAdAAAAAAAAQB0AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAQR0AAAAAAABBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8116,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEAdAAAAAAAAQR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB0AAAAAAABAHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8118,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEEdAAAAAAAAQh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR0AAAAAAABBHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8120,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIdAAAAAAAAQx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh0AAAAAAABCHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8130,
					1,
					"paste",
					null,
					"AQAAAEMdAAAAAAAATB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQx0AAAAAAABDHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8133,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAEwdAAAAAAAATR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATB0AAAAAAABMHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8136,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAE0dAAAAAAAATh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATR0AAAAAAABNHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8139,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAE4dAAAAAAAATx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATh0AAAAAAABOHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8141,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAE8dAAAAAAAAUB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATx0AAAAAAABPHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8143,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFAdAAAAAAAAUR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUB0AAAAAAABQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8145,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAFEdAAAAAAAAUh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8147,
					1,
					"left_delete",
					null,
					"AQAAAFEdAAAAAAAAUR0AAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAUh0AAAAAAABSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8149,
					1,
					"left_delete",
					null,
					"AQAAAFAdAAAAAAAAUB0AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8151,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFAdAAAAAAAAUR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUB0AAAAAAABQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8153,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAFEdAAAAAAAAUh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8155,
					1,
					"left_delete",
					null,
					"AQAAAFEdAAAAAAAAUR0AAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAUh0AAAAAAABSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8157,
					1,
					"left_delete",
					null,
					"AQAAAFAdAAAAAAAAUB0AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8159,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFAdAAAAAAAAUR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUB0AAAAAAABQHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8161,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAFEdAAAAAAAAUh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR0AAAAAAABRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8163,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAFIdAAAAAAAAUx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUh0AAAAAAABSHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8166,
					1,
					"duplicate_line",
					null,
					"AQAAAFUdAAAAAAAAeR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUx0AAAAAAABTHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8168,
					1,
					"duplicate_line",
					null,
					"AQAAAHkdAAAAAAAAnR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdx0AAAAAAAB3HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8170,
					1,
					"duplicate_line",
					null,
					"AQAAAJ0dAAAAAAAAwR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmx0AAAAAAACbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8176,
					1,
					"left_delete",
					null,
					"AQAAAGMdAAAAAAAAYx0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAZB0AAAAAAABkHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8178,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAGMdAAAAAAAAZB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYx0AAAAAAABjHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8181,
					1,
					"left_delete",
					null,
					"AQAAAIcdAAAAAAAAhx0AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAiB0AAAAAAACIHQAAAAAAAAAAAAAA4GBA"
				],
				[
					8183,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAIcdAAAAAAAAiB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhx0AAAAAAACHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8189,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAJ0dAAAAAAAAnR0AAAAAAAAkAAAAICAgICAgICBmbG9hdCByID0gY3VycmVudEZnLzI1NS4wZjsK",
					"AQAAAAAAAAABAAAArB0AAAAAAACsHQAAAAAAAAAAAAAA4GBA"
				],
				[
					8200,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAAMUdAAAAAAAAxh0AAAAAAAAAAAAAxh0AAAAAAADGHQAAAAAAAAkAAABmbG9hdCAmZlI",
					"AQAAAAAAAAABAAAAxR0AAAAAAADOHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8210,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAMgdAAAAAAAAyR0AAAAAAAAAAAAAyR0AAAAAAADJHQAAAAAAAAkAAABmbG9hdCAmZkc",
					"AQAAAAAAAAABAAAAyB0AAAAAAADRHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8220,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAAMsdAAAAAAAAzB0AAAAAAAAAAAAAzB0AAAAAAADMHQAAAAAAAAgAAABmbG9hdCBmQg",
					"AQAAAAAAAAABAAAAyx0AAAAAAADTHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8229,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AgAAAM4dAAAAAAAAzx0AAAAAAAAAAAAAzx0AAAAAAADPHQAAAAAAAAkAAABmbG9hdCAmZkg",
					"AQAAAAAAAAABAAAAzh0AAAAAAADXHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8242,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAANEdAAAAAAAA0h0AAAAAAAAAAAAA0h0AAAAAAADSHQAAAAAAAAkAAABmbG9hdCAmZlM",
					"AQAAAAAAAAABAAAA0R0AAAAAAADaHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8258,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAANQdAAAAAAAA1R0AAAAAAAAAAAAA1R0AAAAAAADVHQAAAAAAAAkAAABmbG9hdCAmZlY",
					"AQAAAAAAAAABAAAA1B0AAAAAAADdHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8264,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAEwdAAAAAAAATR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATB0AAAAAAABMHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8266,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAE0dAAAAAAAATh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATR0AAAAAAABNHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8270,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAHIdAAAAAAAAcx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAch0AAAAAAAByHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8272,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAHMdAAAAAAAAdB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcx0AAAAAAABzHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8276,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJgdAAAAAAAAmR0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmB0AAAAAAACYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8278,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAJkdAAAAAAAAmh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmR0AAAAAAACZHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8286,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANwdAAAAAAAA3R0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3B0AAAAAAADcHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8299,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAANAeAAAAAAAA0R4AAAAAAAAAAAAA0R4AAAAAAADRHgAAAAAAAAUAAABoc3YueQ",
					"AQAAAAAAAAABAAAA0B4AAAAAAADVHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8308,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAANMeAAAAAAAA1B4AAAAAAAAAAAAA1B4AAAAAAADUHgAAAAAAAAUAAABoc3Yueg",
					"AQAAAAAAAAABAAAA0x4AAAAAAADYHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8329,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK4eAAAAAAAArx4AAAAAAAAAAAAArx4AAAAAAAC7HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArh4AAAAAAACuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8361,
					1,
					"left_delete",
					null,
					"AQAAAKIeAAAAAAAAoh4AAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAArh4AAAAAAACiHgAAAAAAAAAAAAAAAAAA"
				],
				[
					8364,
					1,
					"left_delete",
					null,
					"AQAAAKEeAAAAAAAAoR4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAoh4AAAAAAACiHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8394,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK4eAAAAAAAArx4AAAAAAAAAAAAArx4AAAAAAAC7HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArh4AAAAAAACuHgAAAAAAAAAAAAAAAFtA"
				],
				[
					8399,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAK4eAAAAAAAArx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArh4AAAAAAACuHgAAAAAAAAAAAAAAAFtA"
				],
				[
					8402,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAK8eAAAAAAAAsB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArx4AAAAAAACvHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8405,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAALAeAAAAAAAAsR4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsB4AAAAAAACwHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8410,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" HSVtoRGB(float &fR, float &fG, float &fB, float &fH, float &fS, float &fV)\",\"detail\":\"void\",\"documentation\":{\"value\":\"\\\\\\\\brief Convert HSV to RGB color space  \\nConverts a given set of HSV values \\\\`h', \\\\`s', \\\\`v' into RGB coordinates. The output RGB values are in the range [0, 1], and the input HSV values are in the ranges h = [0, 360], and s, v = [0, 1], respectively.  \\n\\\\\\\\param fR Red component, used as output, range: [0, 1]  \\n\\\\\\\\param fG Green component, used as output, range: [0, 1]  \\n\\\\\\\\param fB Blue component, used as output, range: [0, 1]  \\n\\\\\\\\param fH Hue component, used as input, range: [0, 360]  \\n\\\\\\\\param fS Hue component, used as input, range: [0, 1]  \\n\\\\\\\\param fV Hue component, used as input, range: [0, 1]\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":13,\"line\":264},\"start\":{\"character\":12,\"line\":264}},\"newText\":\"HSVtoRGB(${1:float &fR}, ${2:float &fG}, ${3:float &fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"},\"filterText\":\"HSVtoRGB\",\"score\":1.4183518886566162,\"kind\":3,\"sortText\":\"404a7372HSVtoRGB\",\"insertText\":\"HSVtoRGB(${1:float &fR}, ${2:float &fG}, ${3:float &fB}, ${4:float &fH}, ${5:float &fS}, ${6:float &fV})\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4309,
							8399,
							1
						],
						"trigger": "HSVtoRGB"
					},
					"BAAAALAeAAAAAAAAsB4AAAAAAAABAAAAVq8eAAAAAAAArx4AAAAAAAABAAAAU64eAAAAAAAArh4AAAAAAAABAAAASK4eAAAAAAAA+B4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsR4AAAAAAACxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8413,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAALceAAAAAAAAuB4AAAAAAAAAAAAAuB4AAAAAAAC4HgAAAAAAAAkAAABmbG9hdCAmZlI",
					"AQAAAAAAAAABAAAAtx4AAAAAAADAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8417,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAALoeAAAAAAAAux4AAAAAAAAAAAAAux4AAAAAAAC7HgAAAAAAAAkAAABmbG9hdCAmZkc",
					"AQAAAAAAAAABAAAAuh4AAAAAAADDHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8421,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAAL0eAAAAAAAAvh4AAAAAAAAAAAAAvh4AAAAAAAC+HgAAAAAAAAkAAABmbG9hdCAmZkI",
					"AQAAAAAAAAABAAAAvR4AAAAAAADGHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8425,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AgAAAMAeAAAAAAAAwR4AAAAAAAAAAAAAwR4AAAAAAADBHgAAAAAAAAkAAABmbG9hdCAmZkg",
					"AQAAAAAAAAABAAAAwB4AAAAAAADJHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8427,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAMEeAAAAAAAAwh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwR4AAAAAAADBHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8429,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMIeAAAAAAAAwx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwh4AAAAAAADCHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8431,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAMMeAAAAAAAAxB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwx4AAAAAAADDHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8435,
					1,
					"insert_completion",
					{
						"completion": "lastHue",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "lastHue"
					},
					"AgAAAMAeAAAAAAAAwB4AAAAAAAAEAAAAbGFzdMAeAAAAAAAAxx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxB4AAAAAAADEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8439,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAMkeAAAAAAAAyh4AAAAAAAAAAAAAyh4AAAAAAADKHgAAAAAAAAkAAABmbG9hdCAmZlM",
					"AQAAAAAAAAABAAAAyR4AAAAAAADSHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8443,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AgAAAMweAAAAAAAAzR4AAAAAAAAAAAAAzR4AAAAAAADNHgAAAAAAAAkAAABmbG9hdCAmZlY",
					"AQAAAAAAAAABAAAAzB4AAAAAAADVHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8447,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM4eAAAAAAAAzx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzh4AAAAAAADOHgAAAAAAAP///////+9/"
				],
				[
					8450,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM8eAAAAAAAA0B4AAAAAAAAAAAAA0B4AAAAAAADcHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzx4AAAAAAADPHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8470,
					1,
					"left_delete",
					null,
					"AgAAAPUeAAAAAAAA9R4AAAAAAAAcAAAAQ29sb3JGcm9tSFNWKGxhc3RIdWUsIHMsIHYpO9AeAAAAAAAA0B4AAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAA9R4AAAAAAAARHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8474,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOkeAAAAAAAA6x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6R4AAAAAAADpHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8477,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAOoeAAAAAAAA6x4AAAAAAAAAAAAA6x4AAAAAAAD3HgAAAAAAAAAAAAD3HgAAAAAAAPgeAAAAAAAAAAAAAPgeAAAAAAAABB8AAAAAAAAAAAAA6x4AAAAAAADrHgAAAAAAAAwAAAAgICAgICAgICAgICDrHgAAAAAAAPseAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6h4AAAAAAADqHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8483,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAPseAAAAAAAA/B4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x4AAAAAAAD7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8486,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAPweAAAAAAAA/R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/B4AAAAAAAD8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8489,
					1,
					"left_delete",
					null,
					"AQAAAPweAAAAAAAA/B4AAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAA/R4AAAAAAAD9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8492,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAPweAAAAAAAA/R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/B4AAAAAAAD8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8495,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAP0eAAAAAAAA/h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/R4AAAAAAAD9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8498,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAP4eAAAAAAAA/x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/h4AAAAAAAD+HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8500,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAP8eAAAAAAAAAB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/x4AAAAAAAD/HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8502,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAAfAAAAAAAAAR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8504,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAAEfAAAAAAAAAh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAR8AAAAAAAABHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8506,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAAIfAAAAAAAAAx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAh8AAAAAAAACHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8509,
					1,
					"left_delete",
					null,
					"AQAAAAIfAAAAAAAAAh8AAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAAx8AAAAAAAADHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8511,
					1,
					"left_delete",
					null,
					"AQAAAAEfAAAAAAAAAR8AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAAh8AAAAAAAACHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8513,
					1,
					"left_delete",
					null,
					"AQAAAAAfAAAAAAAAAB8AAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAAR8AAAAAAAABHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8516,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAAfAAAAAAAAAR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8518,
					1,
					"duplicate_line",
					null,
					"AQAAAAIfAAAAAAAAGR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAR8AAAAAAAABHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8520,
					1,
					"duplicate_line",
					null,
					"AQAAABkfAAAAAAAAMB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGB8AAAAAAAAYHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8525,
					1,
					"duplicate_line",
					null,
					"AQAAADAfAAAAAAAARx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALx8AAAAAAAAvHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8529,
					1,
					"left_delete",
					null,
					"AQAAAEUfAAAAAAAARR8AAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAARh8AAAAAAABGHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8531,
					1,
					"left_delete",
					null,
					"AQAAAEQfAAAAAAAARB8AAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAARR8AAAAAAABFHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8533,
					1,
					"left_delete",
					null,
					"AQAAAEMfAAAAAAAAQx8AAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAARB8AAAAAAABEHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8535,
					1,
					"left_delete",
					null,
					"AQAAAEIfAAAAAAAAQh8AAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAQx8AAAAAAABDHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8537,
					1,
					"left_delete",
					null,
					"AQAAAEEfAAAAAAAAQR8AAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAQh8AAAAAAABCHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8540,
					1,
					"left_delete",
					null,
					"AQAAAEAfAAAAAAAAQB8AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAQR8AAAAAAABBHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8543,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAEAfAAAAAAAAQR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB8AAAAAAABAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8546,
					1,
					"left_delete",
					null,
					"AQAAAEAfAAAAAAAAQB8AAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAQR8AAAAAAABBHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8548,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEAfAAAAAAAAQR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQB8AAAAAAABAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8550,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAEEfAAAAAAAAQh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQR8AAAAAAABBHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8552,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAEIfAAAAAAAAQx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh8AAAAAAABCHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8558,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFEfAAAAAAAAUh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUR8AAAAAAABRHwAAAAAAAAAAAAAAYGVA"
				],
				[
					8566,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAAAfAAAAAAAAAR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8569,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAAEfAAAAAAAAAh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAR8AAAAAAAABHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8571,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAAIfAAAAAAAAAx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAh8AAAAAAAACHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8576,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABofAAAAAAAAGx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGh8AAAAAAAAaHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8580,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAABsfAAAAAAAAHB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGx8AAAAAAAAbHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8582,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAABwfAAAAAAAAHR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHB8AAAAAAAAcHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8588,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAADQfAAAAAAAANR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANB8AAAAAAAA0HwAAAAAAAAAAAAAAAPC/"
				],
				[
					8590,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADUfAAAAAAAANh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANR8AAAAAAAA1HwAAAAAAAAAAAAAAAPC/"
				],
				[
					8592,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAADYfAAAAAAAANx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANh8AAAAAAAA2HwAAAAAAAAAAAAAAAPC/"
				],
				[
					8598,
					1,
					"left_delete",
					null,
					"AQAAABUfAAAAAAAAFR8AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFh8AAAAAAAAWHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8600,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAABUfAAAAAAAAFh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFR8AAAAAAAAVHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8605,
					1,
					"left_delete",
					null,
					"AQAAAC8fAAAAAAAALx8AAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAMB8AAAAAAAAwHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8607,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAC8fAAAAAAAAMB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALx8AAAAAAAAvHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8617,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAPseAAAAAAAA/B4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+x4AAAAAAAD7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8619,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAPweAAAAAAAA/R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/B4AAAAAAAD8HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8621,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAP0eAAAAAAAA/h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/R4AAAAAAAD9HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8623,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAP4eAAAAAAAA/x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/h4AAAAAAAD+HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8625,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAP8eAAAAAAAAAB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/x4AAAAAAAD/HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8628,
					1,
					"insert_completion",
					{
						"completion": "unsigned",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "unsigned"
					},
					"AgAAAPseAAAAAAAA+x4AAAAAAAAFAAAAdW5zaWf7HgAAAAAAAAMfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8631,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMfAAAAAAAABB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAx8AAAAAAAADHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8634,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAAQfAAAAAAAABR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABB8AAAAAAAAEHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8637,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAAUfAAAAAAAABh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABR8AAAAAAAAFHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8639,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAYfAAAAAAAABx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABh8AAAAAAAAGHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8641,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAAcfAAAAAAAACB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABx8AAAAAAAAHHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8643,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAAgfAAAAAAAACR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACB8AAAAAAAAIHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8647,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABEfAAAAAAAAEh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAER8AAAAAAAARHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8653,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAAPseAAAAAAAA+x4AAAAAAAANAAAAdW5zaWduZWQgY2hhcvseAAAAAAAACh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACB8AAAAAAAD7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					8672,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAACYfAAAAAAAAJh8AAAAAAAAIAAAAZyoyNTUuMGYmHwAAAAAAADAfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJh8AAAAAAAAuHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8679,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"AgAAAEIfAAAAAAAAQh8AAAAAAAAIAAAAYioyNTUuMGZCHwAAAAAAAEwfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASh8AAAAAAABCHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8683,
					1,
					"paste",
					null,
					"AQAAAEIfAAAAAAAAUR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQh8AAAAAAABCHwAAAAAAAAAAAAAAAGJA"
				],
				[
					8688,
					1,
					"paste",
					null,
					"AQAAACYfAAAAAAAANR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJh8AAAAAAAAmHwAAAAAAAAAAAAAAAGJA"
				],
				[
					8707,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAC8dAAAAAAAAMB0AAAAAAAAAAAAAMB0AAAAAAAA8HQAAAAAAAAAAAAAwHQAAAAAAADAdAAAAAAAADAAAACAgICAgICAgICAgIDAdAAAAAAAAOB0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALx0AAAAAAAAvHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8709,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADgdAAAAAAAAOR0AAAAAAAAAAAAAOR0AAAAAAABBHQAAAAAAAAAAAAAwHQAAAAAAADAdAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAOB0AAAAAAAA4HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8711,
					1,
					"paste",
					null,
					"AQAAADkdAAAAAAAAox0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOR0AAAAAAAA5HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8721,
					1,
					"left_delete",
					null,
					"AQAAAFcdAAAAAAAAVx0AAAAAAAAPAAAAUkFZR1VJX0NMSVRFUkFM",
					"AQAAAAAAAAABAAAAVx0AAAAAAABmHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8737,
					1,
					"paste",
					null,
					"BgAAAIIdAAAAAAAAix0AAAAAAAAAAAAAix0AAAAAAACLHQAAAAAAAAUAAABjb2xvcnIdAAAAAAAAex0AAAAAAAAAAAAAex0AAAAAAAB7HQAAAAAAAAUAAABjb2xvcmIdAAAAAAAAax0AAAAAAAAAAAAAax0AAAAAAABrHQAAAAAAAAUAAABjb2xvcg",
					"AQAAAAAAAAADAAAAYh0AAAAAAABnHQAAAAAAAAAAAAAAAPC/ch0AAAAAAAB3HQAAAAAAAAAAAAAAAPC/gh0AAAAAAACHHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8759,
					1,
					"left_delete",
					null,
					"AQAAAKEdAAAAAAAAoR0AAAAAAACtAAAACiAgICAgICAgZmxvYXQgciA9IGN1cnJlbnRGZy5yLzI1NS4wZjsKICAgICAgICBmbG9hdCBnID0gY3VycmVudEZnLmcvMjU1LjBmOwogICAgICAgIGZsb2F0IGIgPSBjdXJyZW50RmcuYi8yNTUuMGY7CiAgICAgICAgZmxvYXQgaCwgcywgdjsKICAgICAgICBSR0J0b0hTVihyLCBnLCBiLCBoLCBzLCB2KTs",
					"AQAAAAAAAAABAAAATh4AAAAAAAChHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8762,
					1,
					"left_delete",
					null,
					"AQAAAKAdAAAAAAAAoB0AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAoR0AAAAAAAChHQAAAAAAAAAAAAAAAPC/"
				],
				[
					8791,
					1,
					"paste",
					null,
					"BAAAAAEeAAAAAAAABB4AAAAAAAAAAAAABB4AAAAAAAAEHgAAAAAAAAcAAABsYXN0SHVlqh0AAAAAAACtHQAAAAAAAAAAAACtHQAAAAAAAK0dAAAAAAAABwAAAGxhc3RIdWU",
					"AQAAAAAAAAACAAAAqh0AAAAAAACxHQAAAAAAAAAAAAAAAPC/AR4AAAAAAAAIHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8794,
					1,
					"insert",
					{
						"characters": "."
					},
					"AgAAAAAeAAAAAAAAAR4AAAAAAAAAAAAArR0AAAAAAACuHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArR0AAAAAAACtHQAAAAAAAAAAAAAAAPC/AB4AAAAAAAAAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8796,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AgAAAAIeAAAAAAAAAx4AAAAAAAAAAAAArh0AAAAAAACvHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArh0AAAAAAACuHQAAAAAAAAAAAAAAAPC/Ah4AAAAAAAACHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8806,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAGEeAAAAAAAAYR4AAAAAAAAuAAAAICAgICAgICAgICAgSFNWdG9SR0IociwgZywgYiwgbGFzdEh1ZSwgcywgdik7Cg",
					"AQAAAAAAAAABAAAAjB4AAAAAAACMHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8809,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAGEeAAAAAAAAYR4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAYR4AAAAAAABhHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8822,
					1,
					"insert",
					{
						"characters": "l"
					},
					"BAAAAP8dAAAAAAAAAB4AAAAAAAAAAAAAAB4AAAAAAAAAHgAAAAAAAAUAAABoc3YueKodAAAAAAAAqx0AAAAAAAAAAAAAqx0AAAAAAACrHQAAAAAAAAUAAABoc3YueA",
					"AQAAAAAAAAACAAAAqh0AAAAAAACvHQAAAAAAAAAAAAAAAPC//x0AAAAAAAAEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8824,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAAPwdAAAAAAAA/R0AAAAAAAAAAAAAqx0AAAAAAACsHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAqx0AAAAAAACrHQAAAAAAAAAAAAAAAPC//B0AAAAAAAD8HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8826,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAP4dAAAAAAAA/x0AAAAAAAAAAAAArB0AAAAAAACtHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArB0AAAAAAACsHQAAAAAAAAAAAAAAAPC//h0AAAAAAAD+HQAAAAAAAAAAAAAAAPC/"
				],
				[
					8828,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAAAeAAAAAAAAAR4AAAAAAAAAAAAArR0AAAAAAACuHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArR0AAAAAAACtHQAAAAAAAAAAAAAAAPC/AB4AAAAAAAAAHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8830,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AgAAAAIeAAAAAAAAAx4AAAAAAAAAAAAArh0AAAAAAACvHQAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArh0AAAAAAACuHQAAAAAAAAAAAAAAAPC/Ah4AAAAAAAACHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8832,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"BAAAAAQeAAAAAAAABR4AAAAAAAAAAAAArx0AAAAAAACwHQAAAAAAAAAAAAAGHgAAAAAAAAceAAAAAAAAAAAAALAdAAAAAAAAsR0AAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAArx0AAAAAAACvHQAAAAAAAAAAAAAAAPC/BB4AAAAAAAAEHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8842,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHEeAAAAAAAAch4AAAAAAAAAAAAAch4AAAAAAAB+HgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcR4AAAAAAABxHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8846,
					1,
					"paste",
					null,
					"AQAAAHEeAAAAAAAAlB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcR4AAAAAAABxHgAAAAAAAAAAAAAAAFtA"
				],
				[
					8849,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJQeAAAAAAAAlR4AAAAAAAAAAAAAlR4AAAAAAAChHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlB4AAAAAAACUHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8864,
					1,
					"paste",
					null,
					"AgAAAMweAAAAAAAA7x4AAAAAAAAAAAAA7x4AAAAAAADvHgAAAAAAABkAAAAodW5zaWduZWQgY2hhcikocioyNTUuMGYp",
					"AQAAAAAAAAABAAAAzB4AAAAAAADlHgAAAAAAAAAAAAAAAPC/"
				],
				[
					8871,
					1,
					"paste",
					null,
					"AgAAAAEfAAAAAAAAJB8AAAAAAAAAAAAAJB8AAAAAAAAkHwAAAAAAABkAAAAodW5zaWduZWQgY2hhcikoZyoyNTUuMGYp",
					"AQAAAAAAAAABAAAAAR8AAAAAAAAaHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8879,
					1,
					"paste",
					null,
					"AgAAADYfAAAAAAAAWR8AAAAAAAAAAAAAWR8AAAAAAABZHwAAAAAAABkAAAAodW5zaWduZWQgY2hhcikoYioyNTUuMGYp",
					"AQAAAAAAAAABAAAANh8AAAAAAABPHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8887,
					1,
					"left_delete",
					null,
					"AgAAABsfAAAAAAAAGx8AAAAAAAABAAAAeJUeAAAAAAAAlR4AAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAHB8AAAAAAAAcHwAAAAAAAAAAAAAAMHhA"
				],
				[
					8891,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAA8fAAAAAAAAEB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADx8AAAAAAAAPHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8896,
					1,
					"left_delete",
					null,
					"AQAAAEQfAAAAAAAARB8AAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAARR8AAAAAAABFHwAAAAAAAAAAAAAAMHhA"
				],
				[
					8898,
					1,
					"insert",
					{
						"characters": "z"
					},
					"AQAAAEQfAAAAAAAARR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARB8AAAAAAABEHwAAAAAAAAAAAAAAAPC/"
				],
				[
					8909,
					1,
					"paste_and_indent",
					null,
					"AgAAAEQFAAAAAAAAtREAAAAAAAAAAAAAtREAAAAAAAC1EQAAAAAAAE8IAAAvKiEgXGJyaWVmIENvbnZlcnQgUkdCIHRvIEhTViBjb2xvciBzcGFjZQogICAgICAKICAgICAgQ29udmVydHMgYSBnaXZlbiBzZXQgb2YgUkdCIHZhbHVlcyBgcicsIGBnJywgYGInIGludG8gSFNWCiAgICAgIGNvb3JkaW5hdGVzLiBUaGUgaW5wdXQgUkdCIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlIFswLCAxXSwgYW5kIHRoZQogICAgICBvdXRwdXQgSFNWIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlcyBoID0gWzAsIDM2MF0sIGFuZCBzLCB2ID0gWzAsCiAgICAgIDFdLCByZXNwZWN0aXZlbHkuCiAgICAgIAogICAgICBccGFyYW0gZlIgUmVkIGNvbXBvbmVudCwgdXNlZCBhcyBpbnB1dCwgcmFuZ2U6IFswLCAxXQogICAgICBccGFyYW0gZkcgR3JlZW4gY29tcG9uZW50LCB1c2VkIGFzIGlucHV0LCByYW5nZTogWzAsIDFdCiAgICAgIFxwYXJhbSBmQiBCbHVlIGNvbXBvbmVudCwgdXNlZCBhcyBpbnB1dCwgcmFuZ2U6IFswLCAxXQogICAgICBccGFyYW0gZkggSHVlIGNvbXBvbmVudCwgdXNlZCBhcyBvdXRwdXQsIHJhbmdlOiBbMCwgMzYwXQogICAgICBccGFyYW0gZlMgSHVlIGNvbXBvbmVudCwgdXNlZCBhcyBvdXRwdXQsIHJhbmdlOiBbMCwgMV0KICAgICAgXHBhcmFtIGZWIEh1ZSBjb21wb25lbnQsIHVzZWQgYXMgb3V0cHV0LCByYW5nZTogWzAsIDFdCiAgICAgIAogICAgKi8KICAgIHZvaWQgUkdCdG9IU1YoZmxvYXQmIGZSLCBmbG9hdCYgZkcsIGZsb2F0IGZCLCBmbG9hdCYgZkgsIGZsb2F0JiBmUywgZmxvYXQmIGZWKSB7CiAgICAgIGZsb2F0IGZDTWF4ID0gc3RkOjptYXgoc3RkOjptYXgoZlIsIGZHKSwgZkIpOwogICAgICBmbG9hdCBmQ01pbiA9IHN0ZDo6bWluKHN0ZDo6bWluKGZSLCBmRyksIGZCKTsKICAgICAgZmxvYXQgZkRlbHRhID0gZkNNYXggLSBmQ01pbjsKICAgICAgCiAgICAgIGlmKGZEZWx0YSA+IDApIHsKICAgICAgICBpZihmQ01heCA9PSBmUikgewogICAgICAgICAgZkggPSA2MCAqIChmbW9kKCgoZkcgLSBmQikgLyBmRGVsdGEpLCA2KSk7CiAgICAgICAgfSBlbHNlIGlmKGZDTWF4ID09IGZHKSB7CiAgICAgICAgICBmSCA9IDYwICogKCgoZkIgLSBmUikgLyBmRGVsdGEpICsgMik7CiAgICAgICAgfSBlbHNlIGlmKGZDTWF4ID09IGZCKSB7CiAgICAgICAgICBmSCA9IDYwICogKCgoZlIgLSBmRykgLyBmRGVsdGEpICsgNCk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKGZDTWF4ID4gMCkgewogICAgICAgICAgZlMgPSBmRGVsdGEgLyBmQ01heDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZlMgPSAwOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBmViA9IGZDTWF4OwogICAgICB9IGVsc2UgewogICAgICAgIGZIID0gMDsKICAgICAgICBmUyA9IDA7CiAgICAgICAgZlYgPSBmQ01heDsKICAgICAgfQogICAgICAKICAgICAgaWYoZkggPCAwKSB7CiAgICAgICAgZkggPSAzNjAgKyBmSDsKICAgICAgfQogICAgfQoKCiAgICAvKiEgXGJyaWVmIENvbnZlcnQgSFNWIHRvIFJHQiBjb2xvciBzcGFjZQogICAgICAKICAgICAgQ29udmVydHMgYSBnaXZlbiBzZXQgb2YgSFNWIHZhbHVlcyBgaCcsIGBzJywgYHYnIGludG8gUkdCCiAgICAgIGNvb3JkaW5hdGVzLiBUaGUgb3V0cHV0IFJHQiB2YWx1ZXMgYXJlIGluIHRoZSByYW5nZSBbMCwgMV0sIGFuZAogICAgICB0aGUgaW5wdXQgSFNWIHZhbHVlcyBhcmUgaW4gdGhlIHJhbmdlcyBoID0gWzAsIDM2MF0sIGFuZCBzLCB2ID0KICAgICAgWzAsIDFdLCByZXNwZWN0aXZlbHkuCiAgICAgIAogICAgICBccGFyYW0gZlIgUmVkIGNvbXBvbmVudCwgdXNlZCBhcyBvdXRwdXQsIHJhbmdlOiBbMCwgMV0KICAgICAgXHBhcmFtIGZHIEdyZWVuIGNvbXBvbmVudCwgdXNlZCBhcyBvdXRwdXQsIHJhbmdlOiBbMCwgMV0KICAgICAgXHBhcmFtIGZCIEJsdWUgY29tcG9uZW50LCB1c2VkIGFzIG91dHB1dCwgcmFuZ2U6IFswLCAxXQogICAgICBccGFyYW0gZkggSHVlIGNvbXBvbmVudCwgdXNlZCBhcyBpbnB1dCwgcmFuZ2U6IFswLCAzNjBdCiAgICAgIFxwYXJhbSBmUyBIdWUgY29tcG9uZW50LCB1c2VkIGFzIGlucHV0LCByYW5nZTogWzAsIDFdCiAgICAgIFxwYXJhbSBmViBIdWUgY29tcG9uZW50LCB1c2VkIGFzIGlucHV0LCByYW5nZTogWzAsIDFdCiAgICAgIAogICAgKi8",
					"AQAAAAAAAAABAAAARAUAAAAAAACTDQAAAAAAAAAAAAAAAPC/"
				],
				[
					8919,
					1,
					"left_delete",
					null,
					"AgAAAKQLAAAAAAAApAsAAAAAAAAHAAAAc3RhdGljIKIFAAAAAAAAogUAAAAAAAAHAAAAc3RhdGljIA",
					"AQAAAAAAAAACAAAAogUAAAAAAACpBQAAAAAAAAAAAAAAAPC/pAsAAAAAAACrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					8934,
					1,
					"left_delete",
					null,
					"AQAAAI8jAAAAAAAAjyMAAAAAAAAOAQAACiAgICAgICAgLy8gUkdCdG9IU1YociwgZywgYiwgaCwgcywgdik7CgogICAgICAgIC8vIGN1cnJlbnRGZyA9IHsKICAgICAgICAvLyAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHIqMjU1LjBmKSwKICAgICAgICAvLyAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKGcqMjU1LjBmKSwKICAgICAgICAvLyAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKGIqMjU1LjBmKSwKICAgICAgICAvLyAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKGEqMjU1LjBmKQogICAgICAgIC8vIH07",
					"AQAAAAAAAAABAAAAnSQAAAAAAACPIwAAAAAAAAAAAAAAAPC/"
				],
				[
					8958,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIUiAAAAAAAAhiIAAAAAAAAAAAAAhiIAAAAAAACSIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSIAAAAAAACFIgAAAAAAAAAAAAAAAFtA"
				],
				[
					8962,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAIUiAAAAAAAAhiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSIAAAAAAACFIgAAAAAAAAAAAAAAAFtA"
				],
				[
					8965,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAIYiAAAAAAAAhyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhiIAAAAAAACGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8968,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAIciAAAAAAAAiCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyIAAAAAAACHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8971,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIgiAAAAAAAAiSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCIAAAAAAACIIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8974,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAIkiAAAAAAAAiiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSIAAAAAAACJIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8977,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoiAAAAAAAAiyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiiIAAAAAAACKIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8980,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIsiAAAAAAAAjCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiyIAAAAAAACLIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8983,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwiAAAAAAAAjSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjCIAAAAAAACMIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8986,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAI0iAAAAAAAAjiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSIAAAAAAACNIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8988,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAI4iAAAAAAAAjyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjiIAAAAAAACOIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8990,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAI8iAAAAAAAAkCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjyIAAAAAAACPIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8992,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAJAiAAAAAAAAkSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCIAAAAAAACQIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8994,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAJEiAAAAAAAAkiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkSIAAAAAAACRIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8996,
					1,
					"insert_completion",
					{
						"completion": "lastHue",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "lastHue"
					},
					"AgAAAI0iAAAAAAAAjSIAAAAAAAAFAAAAbGFzdGiNIgAAAAAAAJQiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkiIAAAAAAACSIgAAAAAAAAAAAAAAAPC/"
				],
				[
					8998,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJQiAAAAAAAAlSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlCIAAAAAAACUIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9008,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACgiAAAAAAAAKyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOCIAAAAAAAA4IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9014,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAK4jAAAAAAAAsSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAryMAAAAAAACvIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9028,
					1,
					"left_delete",
					null,
					"AQAAABUhAAAAAAAAFSEAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAFiEAAAAAAAAWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9030,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAABUhAAAAAAAAFiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSEAAAAAAAAVIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9036,
					1,
					"left_delete",
					null,
					"AQAAAB0hAAAAAAAAHSEAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAHiEAAAAAAAAeIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9038,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAB0hAAAAAAAAHiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSEAAAAAAAAdIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9052,
					1,
					"left_delete",
					null,
					"AQAAABUhAAAAAAAAFSEAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAFiEAAAAAAAAWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9054,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAABUhAAAAAAAAFiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSEAAAAAAAAVIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9059,
					1,
					"left_delete",
					null,
					"AQAAABUhAAAAAAAAFSEAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAFiEAAAAAAAAWIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9062,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAABUhAAAAAAAAFiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSEAAAAAAAAVIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9067,
					1,
					"left_delete",
					null,
					"AQAAAB0hAAAAAAAAHSEAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAHiEAAAAAAAAeIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9070,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAB0hAAAAAAAAHiEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSEAAAAAAAAdIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9175,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACgiAAAAAAAAKCIAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAOyIAAAAAAAA7IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9181,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAKsjAAAAAAAAqyMAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAriMAAAAAAACuIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9189,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAKsjAAAAAAAAriMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqyMAAAAAAACrIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9198,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAACgiAAAAAAAAKyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKyIAAAAAAAArIgAAAAAAAAAAAAAAwFhA"
				],
				[
					9213,
					1,
					"swap_line_up",
					null,
					"AgAAAHwiAAAAAAAAfCIAAAAAAAAqAQAAICAgICAgICAgICAgaHN2LnggPSBsYXN0SHVlOwogICAgICAgICAgICBWZWN0b3IzIHJnYiA9IENvbnZlcnRIU1Z0b1JHQihoc3YpOwoKICAgICAgICAgICAgY3VycmVudEZnID0gewogICAgICAgICAgICAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHJnYi54KjI1NS4wZiksCiAgICAgICAgICAgICAgICAodW5zaWduZWQgY2hhcilyb3VuZGYocmdiLnkqMjU1LjBmKSwKICAgICAgICAgICAgICAgICh1bnNpZ25lZCBjaGFyKXJvdW5kZihyZ2IueioyNTUuMGYpLAogICAgICAgICAgICAgICAgMjU1CiAgICAgICAgICAgIH07CiAiAAAAAAAASiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApSMAAAAAAACHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9215,
					1,
					"swap_line_up",
					null,
					"AgAAACAiAAAAAAAAICIAAAAAAAAqAQAAICAgICAgICAgICAgaHN2LnggPSBsYXN0SHVlOwogICAgICAgICAgICBWZWN0b3IzIHJnYiA9IENvbnZlcnRIU1Z0b1JHQihoc3YpOwoKICAgICAgICAgICAgY3VycmVudEZnID0gewogICAgICAgICAgICAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHJnYi54KjI1NS4wZiksCiAgICAgICAgICAgICAgICAodW5zaWduZWQgY2hhcilyb3VuZGYocmdiLnkqMjU1LjBmKSwKICAgICAgICAgICAgICAgICh1bnNpZ25lZCBjaGFyKXJvdW5kZihyZ2IueioyNTUuMGYpLAogICAgICAgICAgICAgICAgMjU1CiAgICAgICAgICAgIH07Ch8iAAAAAAAASSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSMAAAAAAAArIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9217,
					1,
					"swap_line_up",
					null,
					"AgAAAB8iAAAAAAAAHyIAAAAAAAAqAQAAICAgICAgICAgICAgaHN2LnggPSBsYXN0SHVlOwogICAgICAgICAgICBWZWN0b3IzIHJnYiA9IENvbnZlcnRIU1Z0b1JHQihoc3YpOwoKICAgICAgICAgICAgY3VycmVudEZnID0gewogICAgICAgICAgICAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHJnYi54KjI1NS4wZiksCiAgICAgICAgICAgICAgICAodW5zaWduZWQgY2hhcilyb3VuZGYocmdiLnkqMjU1LjBmKSwKICAgICAgICAgICAgICAgICh1bnNpZ25lZCBjaGFyKXJvdW5kZihyZ2IueioyNTUuMGYpLAogICAgICAgICAgICAgICAgMjU1CiAgICAgICAgICAgIH07CgMiAAAAAAAALSMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCMAAAAAAAAqIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9219,
					1,
					"swap_line_up",
					null,
					"AgAAAAMiAAAAAAAAAyIAAAAAAAAqAQAAICAgICAgICAgICAgaHN2LnggPSBsYXN0SHVlOwogICAgICAgICAgICBWZWN0b3IzIHJnYiA9IENvbnZlcnRIU1Z0b1JHQihoc3YpOwoKICAgICAgICAgICAgY3VycmVudEZnID0gewogICAgICAgICAgICAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHJnYi54KjI1NS4wZiksCiAgICAgICAgICAgICAgICAodW5zaWduZWQgY2hhcilyb3VuZGYocmdiLnkqMjU1LjBmKSwKICAgICAgICAgICAgICAgICh1bnNpZ25lZCBjaGFyKXJvdW5kZihyZ2IueioyNTUuMGYpLAogICAgICAgICAgICAgICAgMjU1CiAgICAgICAgICAgIH07CtghAAAAAAAAAiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALCMAAAAAAAAOIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9221,
					1,
					"swap_line_up",
					null,
					"AgAAANghAAAAAAAA2CEAAAAAAAAqAQAAICAgICAgICAgICAgaHN2LnggPSBsYXN0SHVlOwogICAgICAgICAgICBWZWN0b3IzIHJnYiA9IENvbnZlcnRIU1Z0b1JHQihoc3YpOwoKICAgICAgICAgICAgY3VycmVudEZnID0gewogICAgICAgICAgICAgICAgKHVuc2lnbmVkIGNoYXIpcm91bmRmKHJnYi54KjI1NS4wZiksCiAgICAgICAgICAgICAgICAodW5zaWduZWQgY2hhcilyb3VuZGYocmdiLnkqMjU1LjBmKSwKICAgICAgICAgICAgICAgICh1bnNpZ25lZCBjaGFyKXJvdW5kZihyZ2IueioyNTUuMGYpLAogICAgICAgICAgICAgICAgMjU1CiAgICAgICAgICAgIH07CrYhAAAAAAAA4CIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAASMAAAAAAADjIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9223,
					1,
					"unindent",
					null,
					"CAAAALYhAAAAAAAAtiEAAAAAAAAEAAAAICAgIM8hAAAAAAAAzyEAAAAAAAAEAAAAICAgIPwhAAAAAAAA/CEAAAAAAAAEAAAAICAgIBIiAAAAAAAAEiIAAAAAAAAEAAAAICAgIEMiAAAAAAAAQyIAAAAAAAAEAAAAICAgIHQiAAAAAAAAdCIAAAAAAAAEAAAAICAgIKUiAAAAAAAApSIAAAAAAAAEAAAAICAgILUiAAAAAAAAtSIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA3yIAAAAAAADBIQAAAAAAAAAAAAAAAPC/"
				],
				[
					9226,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL8iAAAAAAAAwCIAAAAAAAAAAAAAwCIAAAAAAADIIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvyIAAAAAAAC/IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9238,
					1,
					"cut",
					null,
					"AQAAAOEgAAAAAAAA4SAAAAAAAABiAAAAY3VycmVudEZnID0gR3VpQ29sb3JQYW5lbCgKICAgICAgICAgICAgezAuMGYsIDAuMGYsIDQwMC4wZiwgNDAwLjBmfSwKICAgICAgICAgICAgTlVMTCwgY3VycmVudEZnKTs",
					"AQAAAAAAAAABAAAAQyEAAAAAAADhIAAAAAAAAAAAAAAAAPC/"
				],
				[
					9242,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AgAAANkgAAAAAAAA2SAAAAAAAAAJAAAAICAgICAgICAKVSIAAAAAAABVIgAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAA4SAAAAAAAADhIAAAAAAAAAAAAAAAAPC/"
				],
				[
					9244,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAANkgAAAAAAAA2SAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA2SAAAAAAAADZIAAAAAAAAAAAAAAAAPC/"
				],
				[
					9251,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFMiAAAAAAAAVCIAAAAAAAAAAAAAVCIAAAAAAABcIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyIAAAAAAABTIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9253,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFwiAAAAAAAAXSIAAAAAAAAAAAAAXSIAAAAAAABlIgAAAAAAAAAAAABUIgAAAAAAAFQiAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAAXCIAAAAAAABcIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9256,
					1,
					"paste_and_indent",
					null,
					"AQAAAF0iAAAAAAAAvyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSIAAAAAAABdIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9289,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AgAAAHIiAAAAAAAAcyIAAAAAAAAAAAAAcyIAAAAAAABzIgAAAAAAAAQAAABhbmVs",
					"AQAAAAAAAAABAAAAdiIAAAAAAAByIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9292,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAHMiAAAAAAAAdCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcyIAAAAAAABzIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9294,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHQiAAAAAAAAdSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdCIAAAAAAAB0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9296,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAHUiAAAAAAAAdiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSIAAAAAAAB1IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9298,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAHYiAAAAAAAAdyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdiIAAAAAAAB2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9302,
					1,
					"left_delete",
					null,
					"AQAAAHYiAAAAAAAAdiIAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAdyIAAAAAAAB3IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9304,
					1,
					"left_delete",
					null,
					"AQAAAHUiAAAAAAAAdSIAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAdiIAAAAAAAB2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9306,
					1,
					"left_delete",
					null,
					"AQAAAHQiAAAAAAAAdCIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAdSIAAAAAAAB1IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9308,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAHQiAAAAAAAAdSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdCIAAAAAAAB0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9310,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHUiAAAAAAAAdiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdSIAAAAAAAB1IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9312,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAHYiAAAAAAAAdyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdiIAAAAAAAB2IgAAAAAAAAAAAAAAAPC/"
				],
				[
					9320,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAABcjAAAAAAAAGiMAAAAAAAAAAAAA7CIAAAAAAADvIgAAAAAAAAAAAADKIgAAAAAAAM0iAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJSMAAAAAAADWIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9331,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CQAAAFEiAAAAAAAAVCIAAAAAAAAAAAAAQSIAAAAAAABEIgAAAAAAAAAAAAAQIgAAAAAAABMiAAAAAAAAAAAAAN8hAAAAAAAA4iEAAAAAAAAAAAAAriEAAAAAAACxIQAAAAAAAAAAAACYIQAAAAAAAJshAAAAAAAAAAAAAGshAAAAAAAAbiEAAAAAAAAAAAAAUiEAAAAAAABVIQAAAAAAAAAAAADhIAAAAAAAAOQgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUyIAAAAAAADmIAAAAAAAAAAAAAAAQF1A"
				],
				[
					9348,
					1,
					"left_delete",
					null,
					"AQAAAHcAAAAAAAAAdwAAAAAAAAAaAAAAI2luY2x1ZGUgPGNvbG9yL2NvbG9yLmhwcD4",
					"AQAAAAAAAAABAAAAkQAAAAAAAAB3AAAAAAAAAAAAAAAAAAAA"
				],
				[
					9351,
					1,
					"left_delete",
					null,
					"AQAAAHYAAAAAAAAAdgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9367,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHYAAAAAAAAAdwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9369,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHcAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9371,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAHgAAAAAAAAAeQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAAAAAAAAAB4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9374,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAHkAAAAAAAAAegAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9376,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegAAAAAAAAB6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9378,
					1,
					"insert",
					{
						"characters": "clk"
					},
					"AwAAAHsAAAAAAAAAfAAAAAAAAAAAAAAAfAAAAAAAAAB9AAAAAAAAAAAAAAB9AAAAAAAAAH4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9382,
					1,
					"left_delete",
					null,
					"AQAAAH0AAAAAAAAAfQAAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9384,
					1,
					"left_delete",
					null,
					"AQAAAHwAAAAAAAAAfAAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9386,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAHwAAAAAAAAAfQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9388,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAH0AAAAAAAAAfgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9390,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9392,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					9394,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIAAAAAAAAAAgQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9396,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAIEAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9398,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9400,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAIMAAAAAAAAAhAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9402,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAIQAAAAAAAAAhQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9407,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":1,\"label\":\" imgui.h>\",\"textEdit\":{\"range\":{\"end\":{\"character\":12,\"line\":8},\"start\":{\"character\":10,\"line\":8}},\"newText\":\"imgui.h>\"},\"filterText\":\"imgui.h>\",\"score\":0.787254273891449,\"kind\":17,\"sortText\":\"40b67681imgui.h>\",\"insertText\":\"imgui.h>\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4695,
							9398,
							1
						],
						"trigger": "imgui.h>"
					},
					"BAAAAIQAAAAAAAAAhAAAAAAAAAABAAAAZ4MAAAAAAAAAgwAAAAAAAAABAAAAbYIAAAAAAAAAggAAAAAAAAACAAAAaT6CAAAAAAAAAIoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQAAAAAAAACFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9413,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAP///////+9/"
				],
				[
					9416,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAIsAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9419,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9421,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9423,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAI4AAAAAAAAAjwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9428,
					1,
					"insert_completion",
					{
						"completion": "include",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "include"
					},
					"AgAAAIwAAAAAAAAAjAAAAAAAAAADAAAAaW5jjAAAAAAAAACTAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwAAAAAAAACPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9430,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJMAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9432,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAJQAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9435,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9438,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9441,
					1,
					"insert_completion",
					{
						"completion": "rlImGui",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rlImGui"
					},
					"AgAAAJUAAAAAAAAAlQAAAAAAAAACAAAAcmyVAAAAAAAAAJwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9447,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9450,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAJ0AAAAAAAAAngAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9457,
					1,
					"left_delete",
					null,
					"AQAAAHYAAAAAAAAAdgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAYGVA"
				],
				[
					9472,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAANMiAAAAAAAA1iIAAAAAAAAAAAAAqSIAAAAAAACsIgAAAAAAAAAAAACFIgAAAAAAAIgiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjiIAAAAAAADbIgAAAAAAAAAAAAAAAPC/"
				],
				[
					9480,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAM4jAAAAAAAA2iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAziMAAAAAAADOIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9482,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAANojAAAAAAAA5iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2iMAAAAAAADaIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9484,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAOYjAAAAAAAA5yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5iMAAAAAAADmIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9486,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAOcjAAAAAAAA6CMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5yMAAAAAAADnIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9489,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAOgjAAAAAAAA6SMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6CMAAAAAAADoIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9491,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAOMjAAAAAAAA4yMAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA6SMAAAAAAADpIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9497,
					1,
					"left_delete",
					null,
					"AQAAANcjAAAAAAAA1yMAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA2iMAAAAAAADXIwAAAAAAAAAAAAAAAFJA"
				],
				[
					9503,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAOAjAAAAAAAA4yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4CMAAAAAAADgIwAAAAAAAAAAAAAAAFJA"
				],
				[
					9509,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAANgjAAAAAAAA2CMAAAAAAAAPAAAAICAgICAgICAvLyBybEkK",
					"AQAAAAAAAAABAAAA4yMAAAAAAADjIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9512,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAANgjAAAAAAAA2CMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA2CMAAAAAAADYIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9530,
					1,
					"left_delete",
					null,
					"AQAAAJQAAAAAAAAAlAAAAAAAAAAJAAAAcmxJbUd1aS5o",
					"AQAAAAAAAAABAAAAlAAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9533,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9535,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9539,
					1,
					"insert_completion",
					{
						"completion": "rlImGui",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rlImGui"
					},
					"AgAAAJQAAAAAAAAAlAAAAAAAAAACAAAAcmyUAAAAAAAAAJsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9542,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJsAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9545,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9559,
					1,
					"left_delete",
					null,
					"AQAAAJMAAAAAAAAAkwAAAAAAAAALAAAAPHJsSW1HdWkuaD4",
					"AQAAAAAAAAABAAAAngAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9562,
					1,
					"insert_snippet",
					{
						"contents": "<$0>"
					},
					"AQAAAJMAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9565,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9568,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9574,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9576,
					1,
					"left_delete",
					null,
					"AQAAAJQAAAAAAAAAlAAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9578,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9580,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9582,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9584,
					1,
					"left_delete",
					null,
					"AQAAAJQAAAAAAAAAlAAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9587,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9589,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9592,
					1,
					"insert_completion",
					{
						"completion": "rlimgui",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rlimgui"
					},
					"AgAAAJQAAAAAAAAAlAAAAAAAAAACAAAAcmyUAAAAAAAAAJsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9595,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAJsAAAAAAAAAnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9598,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9713,
					1,
					"left_delete",
					null,
					"AQAAAJYAAAAAAAAAlgAAAAAAAAAHAAAAaW1ndWkuaA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9716,
					1,
					"insert_completion",
					{
						"completion": "rlImGui",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "rlImGui"
					},
					"AgAAAJQAAAAAAAAAlAAAAAAAAAACAAAAcmyUAAAAAAAAAJsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9723,
					1,
					"paste",
					null,
					"AgAAAJQAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACdAAAAAAAAAAcAAABybEltR3Vp",
					"AQAAAAAAAAABAAAAlAAAAAAAAACbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9806,
					1,
					"insert_snippet",
					{
						"contents": "\n${TM_CURRENT_LINE/^\\s*((?:#|\\/\\/[\\/!]?)\\s*).*/$1/}"
					},
					"AQAAAM4jAAAAAAAA2iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAziMAAAAAAADOIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9822,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAANcjAAAAAAAA1yMAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA2iMAAAAAAADaIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9824,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANcjAAAAAAAA2CMAAAAAAAAAAAAA2CMAAAAAAADgIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1yMAAAAAAADXIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9826,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAOAjAAAAAAAA4SMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4CMAAAAAAADgIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9828,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAOEjAAAAAAAA4iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4SMAAAAAAADhIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9830,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAOIjAAAAAAAA4yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4iMAAAAAAADiIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9836,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" rlImGuiBegin()\",\"detail\":\"void\",\"documentation\":{\"value\":\"From `\\\"rlImGui.h\\\"`\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":11,\"line\":333},\"start\":{\"character\":8,\"line\":333}},\"newText\":\"rlImGuiBegin()\"},\"filterText\":\"rlImGuiBegin\",\"score\":0.5933540463447571,\"kind\":3,\"sortText\":\"40e819f3rlImGuiBegin\",\"insertText\":\"rlImGuiBegin()\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4824,
							9830,
							1
						],
						"trigger": "rlImGuiBegin"
					},
					"AgAAAOAjAAAAAAAA4CMAAAAAAAADAAAAcmxJ4CMAAAAAAADuIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4yMAAAAAAADjIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9840,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO4jAAAAAAAA7yMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7iMAAAAAAADuIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9843,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAO8jAAAAAAAA8CMAAAAAAAAAAAAA8CMAAAAAAAD4IwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7yMAAAAAAADvIwAAAAAAAAAAAAAAAPC/"
				],
				[
					9852,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPgjAAAAAAAA+SMAAAAAAAAAAAAA+SMAAAAAAAABJAAAAAAAAAAAAADwIwAAAAAAAPAjAAAAAAAACAAAACAgICAgICAg",
					"AQAAAAAAAAABAAAA+CMAAAAAAAD4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					9853,
					1,
					"paste_and_indent",
					null,
					"AQAAAPkjAAAAAAAAOCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SMAAAAAAAD5IwAAAAAAAAAAAAAAAPC/"
				],
				[
					9860,
					1,
					"unindent",
					null,
					"AQAAAAskAAAAAAAACyQAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAGyQAAAAAAAAbJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9863,
					1,
					"unindent",
					null,
					"AQAAAAskAAAAAAAACyQAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAFyQAAAAAAAAXJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9871,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADAkAAAAAAAAMSQAAAAAAAAAAAAAMSQAAAAAAAA5JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCQAAAAAAAAwJAAAAAAAAP///////+9/"
				],
				[
					9875,
					1,
					"paste",
					null,
					"AQAAADkkAAAAAAAARiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSQAAAAAAAA5JAAAAAAAAAAAAAAAAPC/"
				],
				[
					9879,
					1,
					"reindent",
					null,
					"AQAAAPAjAAAAAAAA+CMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CMAAAAAAADwIwAAAAAAAAAAAAAAoGdA"
				],
				[
					9882,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPgjAAAAAAAA+iMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CMAAAAAAAD4IwAAAAAAAAAAAAAAAPC/"
				],
				[
					9885,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAPkjAAAAAAAA+iMAAAAAAAAAAAAA+iMAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAMkAAAAAAAAAAAAAAMkAAAAAAAACyQAAAAAAAAAAAAA+iMAAAAAAAD6IwAAAAAAAAgAAAAgICAgICAgIPojAAAAAAAABiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SMAAAAAAAD5IwAAAAAAAAAAAAAAAPC/"
				],
				[
					9890,
					1,
					"swap_line_up",
					null,
					"AgAAABEkAAAAAAAAESQAAAAAAABAAAAAICAgICAgICBib29sIG9wZW4gPSB0cnVlOwogICAgICAgIEltR3VpOjpTaG93RGVtb1dpbmRvdygmb3Blbik7CgckAAAAAAAARyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANyQAAAAAAAAdJAAAAAAAAAAAAAAAAFtA"
				],
				[
					9893,
					1,
					"indent",
					null,
					"AgAAAAckAAAAAAAACyQAAAAAAAAAAAAAJSQAAAAAAAApJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALSQAAAAAAAATJAAAAAAAAAAAAAAAAFtA"
				],
				[
					9897,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAPojAAAAAAAA+iMAAAAAAAANAAAAICAgICAgICAgICAgCg",
					"AQAAAAAAAAABAAAABiQAAAAAAAAGJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9923,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABckAAAAAAAAGCQAAAAAAAAAAAAAGCQAAAAAAAAkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFyQAAAAAAAAXJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9926,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAACQkAAAAAAAAJSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCQAAAAAAAAkJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9929,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAACUkAAAAAAAAJiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJSQAAAAAAAAlJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9932,
					1,
					"insert_completion",
					{
						"completion": "ImGui",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "ImGui"
					},
					"AgAAACQkAAAAAAAAJCQAAAAAAAACAAAASW0kJAAAAAAAACkkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJiQAAAAAAAAmJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9935,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACkkAAAAAAAAKiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKSQAAAAAAAApJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9938,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACokAAAAAAAAKyQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKiQAAAAAAAAqJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9941,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAACskAAAAAAAALCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKyQAAAAAAAArJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9945,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAACwkAAAAAAAALSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALCQAAAAAAAAsJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9948,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAC0kAAAAAAAALiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALSQAAAAAAAAtJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9951,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"insertTextFormat\":2,\"label\":\" NewFrame()\",\"detail\":\"void\",\"documentation\":{\"value\":\"From `\\\"imgui.h\\\"`\",\"kind\":\"markdown\"},\"textEdit\":{\"range\":{\"end\":{\"character\":22,\"line\":336},\"start\":{\"character\":19,\"line\":336}},\"newText\":\"NewFrame()\"},\"filterText\":\"NewFrame\",\"score\":0.6483889818191528,\"kind\":3,\"sortText\":\"40da032eNewFrame\",\"insertText\":\"NewFrame()\"}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							4859,
							9948,
							1
						],
						"trigger": "NewFrame"
					},
					"AgAAACskAAAAAAAAKyQAAAAAAAADAAAAbmV3KyQAAAAAAAA1JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALiQAAAAAAAAuJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9954,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADUkAAAAAAAANiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANSQAAAAAAAA1JAAAAAAAAAAAAAAAAPC/"
				],
				[
					9964,
					1,
					"paste_and_indent",
					null,
					"AgAAAEMkAAAAAAAAriQAAAAAAAAAAAAAriQAAAAAAACuJAAAAAAAAB0AAABJbUd1aTo6U2hvd0RlbW9XaW5kb3coJm9wZW4pOw",
					"AQAAAAAAAAABAAAAYCQAAAAAAABDJAAAAAAAAAAAAAAAAFtA"
				],
				[
					9969,
					1,
					"unindent",
					null,
					"AgAAAGAkAAAAAAAAYCQAAAAAAAAEAAAAICAgIIkkAAAAAAAAiSQAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAriQAAAAAAACBJAAAAAAAAAAAAAAAkHJA"
				],
				[
					9972,
					1,
					"unindent",
					null,
					"AgAAAGAkAAAAAAAAYCQAAAAAAAAEAAAAICAgIIUkAAAAAAAAhSQAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAApiQAAAAAAAB9JAAAAAAAAAAAAAAAAPC/"
				],
				[
					9991,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ4kAAAAAAAAnyQAAAAAAAAAAAAAnyQAAAAAAACrJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAniQAAAAAAACeJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9993,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKskAAAAAAAArCQAAAAAAAAAAAAArCQAAAAAAAC4JAAAAAAAAAAAAACfJAAAAAAAAJ8kAAAAAAAADAAAACAgICAgICAgICAgIA",
					"AQAAAAAAAAABAAAAqyQAAAAAAACrJAAAAAAAAAAAAAAAAPC/"
				],
				[
					9995,
					1,
					"paste",
					null,
					"AQAAAKwkAAAAAAAAvSQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArCQAAAAAAACsJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10020,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BgAAAKwkAAAAAAAAryQAAAAAAAAAAAAAkSQAAAAAAACUJAAAAAAAAAAAAABsJAAAAAAAAG8kAAAAAAAAAAAAAEMkAAAAAAAARiQAAAAAAAAAAAAAJCQAAAAAAAAnJAAAAAAAAAAAAAAGJAAAAAAAAAkkAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtCQAAAAAAAANJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10032,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAPojAAAAAAAA+iMAAAAAAAAhAAAAICAgICAgICAgICAgLy8gYm9vbCBvcGVuID0gdHJ1ZTsK",
					"AQAAAAAAAAABAAAAESQAAAAAAAARJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10034,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAPojAAAAAAAA+iMAAAAAAAAiAAAAICAgICAgICAgICAgLy8gSW1HdWk6Ok5ld0ZyYW1lKCk7Cg",
					"AQAAAAAAAAABAAAA+iMAAAAAAAD6IwAAAAAAAAAAAAAAAPC/"
				],
				[
					10040,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAAYkAAAAAAAABiQAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAABCQAAAAAAAAEJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10045,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAC8kAAAAAAAALyQAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAALyQAAAAAAAAvJAAAAAAAAAAAAAAAAFtA"
				],
				[
					10050,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAC8kAAAAAAAAMiQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALyQAAAAAAAAvJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10053,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAC8kAAAAAAAALyQAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAMiQAAAAAAAAyJAAAAAAAAAAAAAAAAPC/"
				],
				[
					10057,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAFQkAAAAAAAAVCQAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAAVCQAAAAAAABUJAAAAAAAAAAAAAAAAFtA"
				],
				[
					10070,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACAkAAAAAAAAISQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAICQAAAAAAAAgJAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/TestScene/UILayout.cpp",
			"settings":
			{
				"buffer_size": 1801,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					1667,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAM4DAAAAAAAAzwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4DAAAAAAAAzgMAAAAAAAAAAAAAAADwvw"
				],
				[
					1669,
					1,
					"left_delete",
					null,
					"AQAAAM4DAAAAAAAAzgMAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8DAAAAAAAAzwMAAAAAAAAAAAAAAADwvw"
				],
				[
					1671,
					1,
					"left_delete",
					null,
					"AQAAAM0DAAAAAAAAzQMAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4DAAAAAAAAzgMAAAAAAAAAAAAAAADwvw"
				],
				[
					1673,
					1,
					"left_delete",
					null,
					"AQAAAMwDAAAAAAAAzAMAAAAAAAABAAAAYg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0DAAAAAAAAzQMAAAAAAAAAAAAAAADwvw"
				],
				[
					1678,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAMwDAAAAAAAAzQMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwDAAAAAAAAzAMAAAAAAAAAAAAAAADwvw"
				],
				[
					1680,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAM0DAAAAAAAAzgMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0DAAAAAAAAzQMAAAAAAAAAAAAAAADwvw"
				],
				[
					1684,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8DAAAAAAAA0AMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8DAAAAAAAAzwMAAAAAAAD////////vfw"
				],
				[
					1698,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAADQBAAAAAAAANQEAAAAAAAAAAAAANQEAAAAAAAA1AQAAAAAAAAMAAAAxMjg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADQBAAAAAAAANwEAAAAAAAAAAAAAAADwvw"
				],
				[
					1701,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAADUBAAAAAAAANgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUBAAAAAAAANQEAAAAAAAAAAAAAAADwvw"
				],
				[
					1704,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAADYBAAAAAAAANwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYBAAAAAAAANgEAAAAAAAAAAAAAAADwvw"
				],
				[
					1722,
					1,
					"paste",
					null,
					"AgAAADgBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA7AQAAAAAAAAMAAAAxMjg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgBAAAAAAAAOwEAAAAAAAAAAAAAAADwvw"
				],
				[
					1733,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAAA9AQAAAAAAAAMAAAAxMjg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwBAAAAAAAAPwEAAAAAAAAAAAAAAADwvw"
				],
				[
					1736,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAD0BAAAAAAAAPgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0BAAAAAAAAPQEAAAAAAAAAAAAAAADwvw"
				],
				[
					1739,
					1,
					"insert",
					{
						"characters": "8"
					},
					"AQAAAD4BAAAAAAAAPwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4BAAAAAAAAPgEAAAAAAAAAAAAAAADwvw"
				],
				[
					1751,
					1,
					"left_delete",
					null,
					"AQAAAKwDAAAAAAAArAMAAAAAAAABAAAAMA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAArQMAAAAAAAAAAAAAAADwvw"
				],
				[
					1753,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKwDAAAAAAAArQMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwDAAAAAAAArAMAAAAAAAAAAAAAAADwvw"
				],
				[
					1806,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJADAAAAAAAAkQMAAAAAAAAAAAAAkQMAAAAAAACVAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJADAAAAAAAAkAMAAAAAAAAAAAAAAADwvw"
				],
				[
					1812,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANUDAAAAAAAA1gMAAAAAAAAAAAAA1gMAAAAAAADaAwAAAAAAAAAAAACRAwAAAAAAAJEDAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUDAAAAAAAA1QMAAAAAAAD////////vfw"
				],
				[
					1814,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAANYDAAAAAAAA1wMAAAAAAAAAAAAA1wMAAAAAAADbAwAAAAAAAAAAAADSAwAAAAAAANIDAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYDAAAAAAAA1gMAAAAAAAAAAAAAAADwvw"
				],
				[
					1816,
					1,
					"paste",
					null,
					"AQAAANcDAAAAAAAALQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcDAAAAAAAA1wMAAAAAAAAAAAAAAADwvw"
				],
				[
					1837,
					1,
					"paste",
					null,
					"AgAAAO4DAAAAAAAA+AMAAAAAAAAAAAAA+AMAAAAAAAD4AwAAAAAAAAEAAAAw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8DAAAAAAAA7gMAAAAAAAAAAAAAAADwvw"
				],
				[
					1840,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAPgDAAAAAAAA+QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgDAAAAAAAA+AMAAAAAAAAAAAAAAADwvw"
				],
				[
					1843,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAAPkDAAAAAAAA+gMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkDAAAAAAAA+QMAAAAAAAAAAAAAAADwvw"
				],
				[
					1849,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADgEAAAAAAAAOQQAAAAAAAAAAAAAOQQAAAAAAAA9BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgEAAAAAAAAOAQAAAAAAAD////////vfw"
				],
				[
					1864,
					1,
					"paste",
					null,
					"AQAAAD0EAAAAAAAAeAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0EAAAAAAAAPQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1880,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAGcEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABoBAAAAAAAAAYAAABSZWFkeSE",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcEAAAAAAAAbQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1883,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAGgEAAAAAAAAaQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGgEAAAAAAAAaAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1886,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGkEAAAAAAAAagQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkEAAAAAAAAaQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1889,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAGoEAAAAAAAAawQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoEAAAAAAAAagQAAAAAAAAAAAAAAADwvw"
				],
				[
					1893,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAD0EAAAAAAAAPgQAAAAAAAAAAAAAPgQAAAAAAABCBAAAAAAAAAAAAAA5BAAAAAAAADkEAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0EAAAAAAAAPQQAAAAAAAAAAAAAAABCQA"
				],
				[
					1895,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAD4EAAAAAAAAPwQAAAAAAAAAAAAAPwQAAAAAAABDBAAAAAAAAAAAAAA6BAAAAAAAADoEAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4EAAAAAAAAPgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1899,
					1,
					"left_delete",
					null,
					"AQAAADsEAAAAAAAAOwQAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8EAAAAAAAAPwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1902,
					1,
					"left_delete",
					null,
					"AQAAADoEAAAAAAAAOgQAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsEAAAAAAAAOwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1905,
					1,
					"left_delete",
					null,
					"AQAAADkEAAAAAAAAOQQAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoEAAAAAAAAOgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1908,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADkEAAAAAAAAPQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkEAAAAAAAAOQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1911,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD0EAAAAAAAAPgQAAAAAAAAAAAAAPgQAAAAAAABCBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0EAAAAAAAAPQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1915,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAD0EAAAAAAAAPgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD0EAAAAAAAAPQQAAAAAAAAAAAAAAABCQA"
				],
				[
					1917,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD4EAAAAAAAAPwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4EAAAAAAAAPgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1919,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAD8EAAAAAAAAQAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8EAAAAAAAAPwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1921,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEAEAAAAAAAAQQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAEAAAAAAAAQAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1923,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEEEAAAAAAAAQgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEEAAAAAAAAQQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1925,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAEIEAAAAAAAAQwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEIEAAAAAAAAQgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1927,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEMEAAAAAAAARAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMEAAAAAAAAQwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1929,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEQEAAAAAAAARQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1931,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAEUEAAAAAAAARgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUEAAAAAAAARQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1933,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAEYEAAAAAAAARwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEYEAAAAAAAARgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1935,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAEcEAAAAAAAASAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEcEAAAAAAAARwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1938,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgEAAAAAAAASQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1940,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAEkEAAAAAAAASgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkEAAAAAAAASQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1942,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAEoEAAAAAAAASwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoEAAAAAAAASgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1944,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAEsEAAAAAAAATAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEsEAAAAAAAASwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1946,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEwEAAAAAAAATQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEwEAAAAAAAATAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1948,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAE0EAAAAAAAATgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE0EAAAAAAAATQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1950,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE4EAAAAAAAATwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE4EAAAAAAAATgQAAAAAAAAAAAAAAADwvw"
				],
				[
					1952,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAE8EAAAAAAAAUAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAE8EAAAAAAAATwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1954,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFAEAAAAAAAAUQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAEAAAAAAAAUAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1964,
					1,
					"paste",
					null,
					"AQAAAFEEAAAAAAAAVwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFEEAAAAAAAAUQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1974,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFcEAAAAAAAAWAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFcEAAAAAAAAVwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1981,
					1,
					"paste",
					null,
					"AgAAAIYEAAAAAAAAiwQAAAAAAAAAAAAAiwQAAAAAAACLBAAAAAAAAAYAAAAiMjAsMyI",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYEAAAAAAAAjAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1985,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIsEAAAAAAAAjAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsEAAAAAAAAiwQAAAAAAAAAAAAAAADwvw"
				],
				[
					1988,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwEAAAAAAAAjAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1991,
					1,
					"left_delete",
					null,
					"AQAAAIwEAAAAAAAAjAQAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0EAAAAAAAAjQQAAAAAAAAAAAAAAADwvw"
				],
				[
					1994,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwEAAAAAAAAjAQAAAAAAAAAAAAAAADwvw"
				],
				[
					1997,
					1,
					"left_delete",
					null,
					"AQAAAIwEAAAAAAAAjAQAAAAAAAABAAAAcw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0EAAAAAAAAjQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2000,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAIwEAAAAAAAAjQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwEAAAAAAAAjAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2002,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAI0EAAAAAAAAjgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0EAAAAAAAAjQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2006,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"length()\",\"range\":{\"end\":{\"line\":41,\"character\":52},\"start\":{\"line\":41,\"character\":51}}},\"insertText\":\"length()\",\"sortText\":\"40b68816length\",\"label\":\" length() const\",\"insertTextFormat\":2,\"filterText\":\"length\",\"kind\":2,\"detail\":\"size_type\",\"score\":0.7869859933853149}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							851,
							2000,
							1
						],
						"trigger": "length"
					},
					"AwAAAI0EAAAAAAAAjQQAAAAAAAABAAAAZYwEAAAAAAAAjAQAAAAAAAABAAAAbIwEAAAAAAAAlAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4EAAAAAAAAjgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2013,
					1,
					"left_delete",
					null,
					"AQAAAHQEAAAAAAAAdAQAAAAAAAABAAAAMQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUEAAAAAAAAdQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2016,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHQEAAAAAAAAdQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQEAAAAAAAAdAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2018,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAHUEAAAAAAAAdgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUEAAAAAAAAdQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2020,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAHYEAAAAAAAAdwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYEAAAAAAAAdgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2022,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAHcEAAAAAAAAeAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcEAAAAAAAAdwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2025,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAHgEAAAAAAAAeQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2027,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAHkEAAAAAAAAegQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkEAAAAAAAAeQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2029,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAHoEAAAAAAAAewQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoEAAAAAAAAegQAAAAAAAAAAAAAAADwvw"
				],
				[
					2031,
					1,
					"insert_completion",
					{
						"completion": "width",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "width"
					},
					"AgAAAHkEAAAAAAAAeQQAAAAAAAACAAAAd2l5BAAAAAAAAH4EAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsEAAAAAAAAewQAAAAAAAAAAAAAAADwvw"
				],
				[
					2033,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAH4EAAAAAAAAfwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4EAAAAAAAAfgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2035,
					1,
					"paste",
					null,
					"AQAAAH8EAAAAAAAAjQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8EAAAAAAAAfwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2095,
					1,
					"left_delete",
					null,
					"AQAAAKQEAAAAAAAApAQAAAAAAAAIAAAAbGVuZ3RoKCk",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQEAAAAAAAArAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2098,
					1,
					"left_delete",
					null,
					"AQAAAKMEAAAAAAAAowQAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2131,
					1,
					"duplicate_line",
					null,
					"AQAAABQAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMAAAAAAAAAEwAAAAAAAAAAAAAAAADwvw"
				],
				[
					2136,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfAAAAAAAAAAgAAABpb3N0cmVhbQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4AAAAAAAAAJgAAAAAAAAAAAAAAAADwvw"
				],
				[
					2139,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAADwvw"
				],
				[
					2141,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACAAAAAAAAAAIQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2143,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAACEAAAAAAAAAIgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAADwvw"
				],
				[
					2145,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAACIAAAAAAAAAIwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACIAAAAAAAAAIgAAAAAAAAAAAAAAAADwvw"
				],
				[
					2147,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAACMAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAADwvw"
				],
				[
					2149,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2151,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAACUAAAAAAAAAJgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAADwvw"
				],
				[
					2153,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACYAAAAAAAAAJwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYAAAAAAAAAJgAAAAAAAAAAAAAAAADwvw"
				],
				[
					2155,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAADwvw"
				],
				[
					2157,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAACgAAAAAAAAAKQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAADwvw"
				],
				[
					2159,
					1,
					"insert_completion",
					{
						"completion": "stringstream",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "stringstream"
					},
					"AgAAAB4AAAAAAAAAHgAAAAAAAAALAAAAc3RyaW5nc3RyZWEeAAAAAAAAACoAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAADwvw"
				],
				[
					2186,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMUEAAAAAAAAxgQAAAAAAAAAAAAAxgQAAAAAAADKBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUEAAAAAAAAxQQAAAAAAAD////////vfw"
				],
				[
					2189,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAMoEAAAAAAAAywQAAAAAAAAAAAAAywQAAAAAAADPBAAAAAAAAAAAAADGBAAAAAAAAMYEAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoEAAAAAAAAygQAAAAAAAAAAAAAAADwvw"
				],
				[
					2195,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMsEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsEAAAAAAAAywQAAAAAAAAAAAAAAADwvw"
				],
				[
					2198,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAMwEAAAAAAAAzQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2201,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAM0EAAAAAAAAzgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0EAAAAAAAAzQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2204,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAM4EAAAAAAAAzwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4EAAAAAAAAzgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2206,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAM8EAAAAAAAA0AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8EAAAAAAAAzwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2209,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANAEAAAAAAAA0QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAEAAAAAAAA0AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2212,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANEEAAAAAAAA0gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEEAAAAAAAA0QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2215,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANIEAAAAAAAA0wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIEAAAAAAAA0gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2217,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAANMEAAAAAAAA1AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMEAAAAAAAA0wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2219,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANQEAAAAAAAA1QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQEAAAAAAAA1AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2221,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAANUEAAAAAAAA1gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUEAAAAAAAA1QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2224,
					1,
					"insert_completion",
					{
						"completion": "sstream",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "sstream"
					},
					"AgAAANAEAAAAAAAA0AQAAAAAAAAGAAAAc3N0cmVh0AQAAAAAAADXBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYEAAAAAAAA1gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2227,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcEAAAAAAAA2AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcEAAAAAAAA1wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2230,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAANgEAAAAAAAA2QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgEAAAAAAAA2AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2232,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANkEAAAAAAAA2gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkEAAAAAAAA2QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2234,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANoEAAAAAAAA2wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoEAAAAAAAA2gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2236,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANsEAAAAAAAA3AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsEAAAAAAAA2wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2239,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANwEAAAAAAAA3QQAAAAAAAAAAAAA3QQAAAAAAADhBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2242,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEEAAAAAAAA4QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2244,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOIEAAAAAAAA4wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIEAAAAAAAA4gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2246,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2248,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOQEAAAAAAAA5QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQEAAAAAAAA5AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2250,
					1,
					"left_delete",
					null,
					"AQAAAOQEAAAAAAAA5AQAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUEAAAAAAAA5QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2252,
					1,
					"left_delete",
					null,
					"AQAAAOMEAAAAAAAA4wQAAAAAAAABAAAAcw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQEAAAAAAAA5AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2254,
					1,
					"left_delete",
					null,
					"AQAAAOIEAAAAAAAA4gQAAAAAAAABAAAAcw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2256,
					1,
					"left_delete",
					null,
					"AQAAAOEEAAAAAAAA4QQAAAAAAAABAAAAMA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIEAAAAAAAA4gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2258,
					1,
					"insert",
					{
						"characters": "os"
					},
					"AgAAAOEEAAAAAAAA4gQAAAAAAAAAAAAA4gQAAAAAAADjBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEEAAAAAAAA4QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2261,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMEAAAAAAAA4wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2263,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOQEAAAAAAAA5QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQEAAAAAAAA5AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2265,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAOUEAAAAAAAA5gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUEAAAAAAAA5QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2267,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYEAAAAAAAA5gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2269,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcEAAAAAAAA5wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2271,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAOgEAAAAAAAA6QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgEAAAAAAAA6AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2273,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkEAAAAAAAA6QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2275,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAOoEAAAAAAAA6wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoEAAAAAAAA6gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2277,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsEAAAAAAAA6wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2279,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2284,
					1,
					"left_delete",
					null,
					"AQAAAOwEAAAAAAAA7AQAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0EAAAAAAAA7QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2286,
					1,
					"left_delete",
					null,
					"AQAAAOsEAAAAAAAA6wQAAAAAAAABAAAAOg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2288,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOsEAAAAAAAA7AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsEAAAAAAAA6wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2290,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwEAAAAAAAA7AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2293,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO0EAAAAAAAA7QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2295,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4EAAAAAAAA7gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2298,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAO8EAAAAAAAA8AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8EAAAAAAAA7wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2301,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"hex(${1:ios_base &str})\",\"range\":{\"end\":{\"line\":45,\"character\":19},\"start\":{\"line\":45,\"character\":16}}},\"insertText\":\"hex(${1:ios_base &str})\",\"sortText\":\"412da6dehex\",\"label\":\" hex(ios_base &str)\",\"insertTextFormat\":2,\"filterText\":\"hex\",\"kind\":3,\"documentation\":{\"kind\":\"markdown\",\"value\":\"From `<ios>`\"},\"detail\":\"ios_base &\",\"score\":0.20541813969612122}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							967,
							2298,
							1
						],
						"trigger": "hex"
					},
					"AgAAAO0EAAAAAAAA7QQAAAAAAAADAAAAaGV47QQAAAAAAAD/BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2304,
					1,
					"left_delete",
					null,
					"AQAAAPEEAAAAAAAA8QQAAAAAAAANAAAAaW9zX2Jhc2UgJnN0cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEEAAAAAAAA/gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2313,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIEAAAAAAAA8gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2316,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMEAAAAAAAA8wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2318,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAPQEAAAAAAAA9QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQEAAAAAAAA9AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2320,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUEAAAAAAAA9gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPUEAAAAAAAA9QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2322,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPYEAAAAAAAA+AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYEAAAAAAAA9gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2326,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcEAAAAAAAA9wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2328,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgEAAAAAAAA+AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2330,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkEAAAAAAAA+QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2334,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAPsEAAAAAAAA/AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsEAAAAAAAA+wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2337,
					1,
					"left_delete",
					null,
					"AQAAAPsEAAAAAAAA+wQAAAAAAAABAAAAQQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2340,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPsEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsEAAAAAAAA+wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2343,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2352,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP4EAAAAAAAA/gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2360,
					1,
					"left_delete",
					null,
					"AQAAAPEEAAAAAAAA8QQAAAAAAAABAAAAKQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIEAAAAAAAA8gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2362,
					1,
					"left_delete",
					null,
					"AQAAAPAEAAAAAAAA8AQAAAAAAAABAAAAKA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEEAAAAAAAA8QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2374,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAANAEAAAAAAAA0QQAAAAAAAAAAAAA0QQAAAAAAADRBAAAAAAAAAcAAABzc3RyZWFt",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAEAAAAAAAA1wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2377,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANEEAAAAAAAA0gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEEAAAAAAAA0QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2379,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAANIEAAAAAAAA0wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIEAAAAAAAA0gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2381,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAANMEAAAAAAAA1AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMEAAAAAAAA0wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2383,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAANQEAAAAAAAA1QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQEAAAAAAAA1AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2385,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAANUEAAAAAAAA1gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUEAAAAAAAA1QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2387,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANYEAAAAAAAA1wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYEAAAAAAAA1gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2389,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANcEAAAAAAAA2AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcEAAAAAAAA1wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2391,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAANgEAAAAAAAA2QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgEAAAAAAAA2AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2393,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANkEAAAAAAAA2gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkEAAAAAAAA2QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2395,
					1,
					"insert_completion",
					{
						"completion": "stringstream",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "stringstream"
					},
					"AgAAANAEAAAAAAAA0AQAAAAAAAAKAAAAc3RyaW5nc3RyZdAEAAAAAAAA3AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoEAAAAAAAA2gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2400,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAIFAAAAAAAAAwUAAAAAAAAAAAAAAwUAAAAAAAAHBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIFAAAAAAAAAgUAAAAAAAD////////vfw"
				],
				[
					2402,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAAcFAAAAAAAACAUAAAAAAAAAAAAACAUAAAAAAAAMBQAAAAAAAAAAAAADBQAAAAAAAAMFAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcFAAAAAAAABwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2407,
					1,
					"left_delete",
					null,
					"AQAAAAQFAAAAAAAABAUAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgFAAAAAAAACAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2409,
					1,
					"left_delete",
					null,
					"AQAAAAMFAAAAAAAAAwUAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQFAAAAAAAABAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2411,
					1,
					"left_delete",
					null,
					"AQAAAAIFAAAAAAAAAgUAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMFAAAAAAAAAwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2414,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAIFAAAAAAAAAwUAAAAAAAAAAAAAAwUAAAAAAAAHBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIFAAAAAAAAAgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2428,
					1,
					"paste",
					null,
					"AgAAAB4AAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlAAAAAAAAAAwAAABzdHJpbmdzdHJlYW0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB4AAAAAAAAAKgAAAAAAAAAAAAAAAADwvw"
				],
				[
					2443,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAAIFAAAAAAAAAwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIFAAAAAAAAAgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2446,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAAMFAAAAAAAABAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAMFAAAAAAAAAwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2448,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAAQFAAAAAAAABQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAQFAAAAAAAABAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2450,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAAUFAAAAAAAABgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUFAAAAAAAABQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2452,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAAYFAAAAAAAABwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYFAAAAAAAABgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2454,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAAcFAAAAAAAACAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcFAAAAAAAABwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2456,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAgFAAAAAAAACQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgFAAAAAAAACAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2458,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAAkFAAAAAAAACgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkFAAAAAAAACQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2470,
					1,
					"swap_line_up",
					null,
					"AgAAAMIEAAAAAAAAwgQAAAAAAAAbAAAAICAgIHN0ZDo6c3RyaW5nc3RyZWFtIG9zczsKwQQAAAAAAADcBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwEAAAAAAAA3AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2473,
					1,
					"swap_line_up",
					null,
					"AgAAAMEEAAAAAAAAwQQAAAAAAAAbAAAAICAgIHN0ZDo6c3RyaW5nc3RyZWFtIG9zczsKbAQAAAAAAACHBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsEAAAAAAAA2wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2475,
					1,
					"swap_line_up",
					null,
					"AgAAAGwEAAAAAAAAbAQAAAAAAAAbAAAAICAgIHN0ZDo6c3RyaW5nc3RyZWFtIG9zczsKTAQAAAAAAABnBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYEAAAAAAAAhgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2477,
					1,
					"swap_line_up",
					null,
					"AgAAAEwEAAAAAAAATAQAAAAAAAAbAAAAICAgIHN0ZDo6c3RyaW5nc3RyZWFtIG9zczsK5gMAAAAAAAABBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYEAAAAAAAAZgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2480,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAAEAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAAFBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2486,
					1,
					"swap_line_up",
					null,
					"AgAAAGwEAAAAAAAAbAQAAAAAAAAgAAAAICAgIHN0ZDo6c3RyaW5nIGNvb3JkID0gIjIwLDMiOwoGBAAAAAAAACYEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHAEAAAAAAAAcAQAAAAAAAAAAAAAAABCQA"
				],
				[
					2492,
					1,
					"swap_line_up",
					null,
					"AgAAAOIEAAAAAAAA4gQAAAAAAAAhAAAAICAgIG9zcyA8PCBzdGQ6OmhleCA8PCAoaW50KSdBJzsK4QQAAAAAAAACBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYEAAAAAAAA5gQAAAAAAAAAAAAAAABCQA"
				],
				[
					2494,
					1,
					"swap_line_up",
					null,
					"AgAAAOEEAAAAAAAA4QQAAAAAAAAhAAAAICAgIG9zcyA8PCBzdGQ6OmhleCA8PCAoaW50KSdBJzsKjAQAAAAAAACtBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOUEAAAAAAAA5QQAAAAAAAAAAAAAAABCQA"
				],
				[
					2496,
					1,
					"swap_line_up",
					null,
					"AgAAAIwEAAAAAAAAjAQAAAAAAAAhAAAAICAgIG9zcyA8PCBzdGQ6OmhleCA8PCAoaW50KSdBJzsKJgQAAAAAAABHBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAABCQA"
				],
				[
					2500,
					1,
					"swap_line_up",
					null,
					"AgAAAAMFAAAAAAAAAwUAAAAAAAANAAAAICAgIFRlcm1pbmFsCgIFAAAAAAAADwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcFAAAAAAAABwUAAAAAAAAAAAAAAABCQA"
				],
				[
					2502,
					1,
					"swap_line_up",
					null,
					"AgAAAAIFAAAAAAAAAgUAAAAAAAANAAAAICAgIFRlcm1pbmFsCq0EAAAAAAAAugQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYFAAAAAAAABgUAAAAAAAAAAAAAAABCQA"
				],
				[
					2504,
					1,
					"swap_line_up",
					null,
					"AgAAAK0EAAAAAAAArQQAAAAAAAANAAAAICAgIFRlcm1pbmFsCkcEAAAAAAAAVAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEEAAAAAAAAsQQAAAAAAAAAAAAAAABCQA"
				],
				[
					2514,
					1,
					"left_delete",
					null,
					"AgAAAAoEAAAAAAAACgQAAAAAAAAbAAAAc3RkOjpzdHJpbmcgY29vcmQgPSAiMjAsMyI7AQQAAAAAAAABBAAAAAAAAAQAAAAgICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoEAAAAAAAAJQQAAAAAAAD////////vfw"
				],
				[
					2543,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAAYEAAAAAAAABwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAYEAAAAAAAABgQAAAAAAAAAAAAAAIBPQA"
				],
				[
					2545,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAcEAAAAAAAACAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAcEAAAAAAAABwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2547,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAgEAAAAAAAACQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAgEAAAAAAAACAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2549,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAkEAAAAAAAACgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkEAAAAAAAACQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2551,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAAoEAAAAAAAACwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoEAAAAAAAACgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2553,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAAsEAAAAAAAADAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsEAAAAAAAACwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2555,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwEAAAAAAAADQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2558,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAA0EAAAAAAAADwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0EAAAAAAAADQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2561,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAA4EAAAAAAAADwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4EAAAAAAAADgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2564,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAA8EAAAAAAAAEAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8EAAAAAAAADwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2567,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABAEAAAAAAAAEQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAEAAAAAAAAEAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2570,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAABEEAAAAAAAAEgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEEAAAAAAAAEQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2573,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIEAAAAAAAAEwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABIEAAAAAAAAEgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2582,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAABMEAAAAAAAAFAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMEAAAAAAAAEwQAAAAAAAAAAAAAACBjQA"
				],
				[
					2585,
					1,
					"left_delete",
					null,
					"AQAAABMEAAAAAAAAEwQAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2588,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAABMEAAAAAAAAFAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMEAAAAAAAAEwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2591,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAABQEAAAAAAAAFQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2601,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABYEAAAAAAAAFwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYEAAAAAAAAFgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2613,
					1,
					"left_delete",
					null,
					"AQAAAD0EAAAAAAAAPQQAAAAAAAAIAAAAVGVybWluYWw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUEAAAAAAAAPQQAAAAAAAAAAAAAAABCQA"
				],
				[
					2620,
					1,
					"left_delete",
					null,
					"AQAAAGQEAAAAAAAAZAQAAAAAAAABAAAANw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUEAAAAAAAAZQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2622,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGQEAAAAAAAAZQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQEAAAAAAAAZAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2624,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGUEAAAAAAAAZgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUEAAAAAAAAZQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2640,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAAMsEAAAAAAAAzAQAAAAAAAAAAAAAzAQAAAAAAADMBAAAAAAAAAUAAABjb29yZA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsEAAAAAAAA0AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2642,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMwEAAAAAAAAzQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwEAAAAAAAAzAQAAAAAAAAAAAAAAADwvw"
				],
				[
					2644,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAM0EAAAAAAAAzgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0EAAAAAAAAzQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2646,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAM4EAAAAAAAAzwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4EAAAAAAAAzgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2651,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"str($0)\",\"range\":{\"end\":{\"line\":46,\"character\":42},\"start\":{\"line\":46,\"character\":42}}},\"insertText\":\"str($0)\",\"sortText\":\"40b68816str\",\"label\":\" str(…)\",\"insertTextFormat\":2,\"filterText\":\"str\",\"kind\":2,\"detail\":\"[2 overloads]\",\"score\":0.7869859933853149}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							1111,
							2646,
							1
						],
						"trigger": "str"
					},
					"AQAAAM8EAAAAAAAA1AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8EAAAAAAAAzwQAAAAAAAAAAAAAAADwvw"
				],
				[
					2660,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAAO4EAAAAAAAA7wQAAAAAAAAAAAAA7wQAAAAAAADvBAAAAAAAAAUAAABjb29yZA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO4EAAAAAAAA8wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2662,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAO8EAAAAAAAA8AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO8EAAAAAAAA7wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2664,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAPAEAAAAAAAA8QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2666,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAPEEAAAAAAAA8gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEEAAAAAAAA8QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2668,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAPIEAAAAAAAA8wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIEAAAAAAAA8gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2670,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMEAAAAAAAA8wQAAAAAAAAAAAAAAADwvw"
				],
				[
					2672,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"str($0)\",\"range\":{\"end\":{\"line\":46,\"character\":77},\"start\":{\"line\":46,\"character\":77}}},\"insertText\":\"str($0)\",\"sortText\":\"404ec47bstr\",\"label\":\" str(…)\",\"insertTextFormat\":2,\"filterText\":\"str\",\"kind\":2,\"detail\":\"[2 overloads]\",\"score\":1.3846288919448853}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1119,
							2666,
							1
						],
						"trigger": "str"
					},
					"AwAAAPMEAAAAAAAA8wQAAAAAAAABAAAAdPIEAAAAAAAA8gQAAAAAAAABAAAAc/IEAAAAAAAA9wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQEAAAAAAAA9AQAAAAAAAAAAAAAAADwvw"
				],
				[
					2682,
					1,
					"left_delete",
					null,
					"AQAAAAEFAAAAAAAAAQUAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIFAAAAAAAAAgUAAAAAAAAAAAAAAAAAAA"
				],
				[
					2697,
					1,
					"left_delete",
					null,
					"AQAAADUEAAAAAAAANQQAAAAAAAABAAAAQQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYEAAAAAAAANgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2699,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAADUEAAAAAAAANgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUEAAAAAAAANQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2726,
					1,
					"left_delete",
					null,
					"AQAAAGUEAAAAAAAAZQQAAAAAAAABAAAAMQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYEAAAAAAAAZgQAAAAAAAAAAAAAAADwvw"
				],
				[
					2728,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAGUEAAAAAAAAZgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUEAAAAAAAAZQQAAAAAAAAAAAAAAADwvw"
				],
				[
					2735,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0EAAAAAAAA3QQAAAAAAAAAAAAAAADwvw"
				],
				[
					2737,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAN4EAAAAAAAA3wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4EAAAAAAAA3gQAAAAAAAAAAAAAAADwvw"
				],
				[
					2761,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMDAAAAAAAA1AMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMDAAAAAAAA0wMAAAAAAAAAAAAAAADwvw"
				],
				[
					2766,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANMDAAAAAAAA1QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANMDAAAAAAAA0wMAAAAAAAAAAAAAAADwvw"
				],
				[
					2773,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAANQDAAAAAAAA1QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQDAAAAAAAA1AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2776,
					1,
					"left_delete",
					null,
					"AQAAANQDAAAAAAAA1AMAAAAAAAABAAAAKg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUDAAAAAAAA1QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2779,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAANQDAAAAAAAA1QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQDAAAAAAAA1AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2784,
					1,
					"left_delete",
					null,
					"AQAAANQDAAAAAAAA1AMAAAAAAAABAAAAXw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUDAAAAAAAA1QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2787,
					1,
					"insert",
					{
						"characters": "@"
					},
					"AQAAANQDAAAAAAAA1QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQDAAAAAAAA1AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2790,
					1,
					"left_delete",
					null,
					"AQAAANQDAAAAAAAA1AMAAAAAAAABAAAAQA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUDAAAAAAAA1QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2793,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAANQDAAAAAAAA1QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQDAAAAAAAA1AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2815,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AgAAANcDAAAAAAAA2AMAAAAAAAAAAAAA2AMAAAAAAADYAwAAAAAAAAYAAABSZWFkeSE",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANcDAAAAAAAA3QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2818,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANgDAAAAAAAA2QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgDAAAAAAAA2AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2821,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAANkDAAAAAAAA2gMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANkDAAAAAAAA2QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2824,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAANoDAAAAAAAA2wMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoDAAAAAAAA2gMAAAAAAAAAAAAAAADwvw"
				],
				[
					2827,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsDAAAAAAAA3AMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsDAAAAAAAA2wMAAAAAAAAAAAAAAADwvw"
				],
				[
					2829,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANwDAAAAAAAA3QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwDAAAAAAAA3AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2831,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0DAAAAAAAA3QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2833,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAN4DAAAAAAAA3wMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4DAAAAAAAA3gMAAAAAAAAAAAAAAADwvw"
				],
				[
					2835,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAN8DAAAAAAAA4AMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8DAAAAAAAA3wMAAAAAAAAAAAAAAADwvw"
				],
				[
					2851,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOADAAAAAAAA4QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOADAAAAAAAA4AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2854,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOEDAAAAAAAA4gMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEDAAAAAAAA4QMAAAAAAAAAAAAAAADwvw"
				],
				[
					2856,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOIDAAAAAAAA4wMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIDAAAAAAAA4gMAAAAAAAAAAAAAAADwvw"
				],
				[
					2860,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAOIDAAAAAAAA4wMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIDAAAAAAAA4gMAAAAAAAAAAAAAAADwvw"
				],
				[
					2863,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOMDAAAAAAAA5AMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMDAAAAAAAA4wMAAAAAAAAAAAAAAADwvw"
				],
				[
					2865,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAOQDAAAAAAAA5QMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQDAAAAAAAA5AMAAAAAAAAAAAAAAADwvw"
				],
				[
					2874,
					1,
					"left_delete",
					null,
					"AQAAAAACAAAAAAAAAAIAAAAAAAABAAAAMg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAECAAAAAAAAAQIAAAAAAAAAAAAAAADwvw"
				],
				[
					2886,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAAACAAAAAAAAAQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAACAAAAAAAAAAIAAAAAAAAAAAAAAADwvw"
				],
				[
					2891,
					1,
					"left_delete",
					null,
					"AQAAABsCAAAAAAAAGwIAAAAAAAABAAAAMg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwCAAAAAAAAHAIAAAAAAAAAAAAAAADwvw"
				],
				[
					2893,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAABsCAAAAAAAAHAIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsCAAAAAAAAGwIAAAAAAAAAAAAAAADwvw"
				],
				[
					2899,
					1,
					"duplicate_line",
					null,
					"AQAAANIBAAAAAAAAMQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0BAAAAAAAAvQEAAAAAAAAAAAAAANCEQA"
				],
				[
					2905,
					1,
					"left_delete",
					null,
					"AQAAAAACAAAAAAAAAAIAAAAAAAABAAAAMQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAECAAAAAAAAAQIAAAAAAAAAAAAAAADwvw"
				],
				[
					2907,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAACAAAAAAAAAQIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAACAAAAAAAAAAIAAAAAAAAAAAAAAADwvw"
				],
				[
					2913,
					1,
					"left_delete",
					null,
					"AQAAABsCAAAAAAAAGwIAAAAAAAABAAAAMQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwCAAAAAAAAHAIAAAAAAAAAAAAAAADwvw"
				],
				[
					2915,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAABsCAAAAAAAAHAIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsCAAAAAAAAGwIAAAAAAAAAAAAAAADwvw"
				],
				[
					2931,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAAB0BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8FAAAAAAAAbwUAAAAAAAD////////vfw"
				],
				[
					2933,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHQFAAAAAAAAdQUAAAAAAAAAAAAAdQUAAAAAAAB5BQAAAAAAAAAAAABwBQAAAAAAAHAFAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHQFAAAAAAAAdAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2938,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAHUFAAAAAAAAdgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUFAAAAAAAAdQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2940,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAHYFAAAAAAAAdwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHYFAAAAAAAAdgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2942,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAHcFAAAAAAAAeAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcFAAAAAAAAdwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2944,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgFAAAAAAAAeAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2946,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHkFAAAAAAAAewUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkFAAAAAAAAeQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2948,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAHoFAAAAAAAAewUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoFAAAAAAAAegUAAAAAAAAAAAAAAADwvw"
				],
				[
					2950,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAHsFAAAAAAAAfAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHsFAAAAAAAAewUAAAAAAAAAAAAAAADwvw"
				],
				[
					2952,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAHwFAAAAAAAAfQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwFAAAAAAAAfAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2954,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH0FAAAAAAAAfgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0FAAAAAAAAfQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2956,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAH4FAAAAAAAAfwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH4FAAAAAAAAfgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2958,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAH8FAAAAAAAAgAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2960,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAIAFAAAAAAAAgQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIAFAAAAAAAAgAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2962,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIEFAAAAAAAAggUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIEFAAAAAAAAgQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2964,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIFAAAAAAAAgwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIIFAAAAAAAAggUAAAAAAAAAAAAAAADwvw"
				],
				[
					2966,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIMFAAAAAAAAhAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIMFAAAAAAAAgwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2968,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAIQFAAAAAAAAhQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIQFAAAAAAAAhAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2970,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAIUFAAAAAAAAhgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUFAAAAAAAAhQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2972,
					1,
					"insert",
					{
						"characters": "erm"
					},
					"AwAAAIYFAAAAAAAAhwUAAAAAAAAAAAAAhwUAAAAAAACIBQAAAAAAAAAAAACIBQAAAAAAAIkFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIYFAAAAAAAAhgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2976,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAIkFAAAAAAAAigUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIkFAAAAAAAAiQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2978,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAIoFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIoFAAAAAAAAigUAAAAAAAAAAAAAAADwvw"
				],
				[
					2980,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIsFAAAAAAAAjAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIsFAAAAAAAAiwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2982,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"width\",\"range\":{\"end\":{\"line\":49,\"character\":25},\"start\":{\"line\":49,\"character\":25}}},\"insertText\":\"width\",\"sortText\":\"4023ff83width\",\"label\":\" width\",\"insertTextFormat\":1,\"filterText\":\"width\",\"kind\":5,\"detail\":\"int\",\"score\":1.7187649011611938}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1245,
							2976,
							1
						],
						"trigger": "width"
					},
					"AwAAAIsFAAAAAAAAiwUAAAAAAAABAAAAaYoFAAAAAAAAigUAAAAAAAABAAAAd4oFAAAAAAAAjwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwFAAAAAAAAjAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2986,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAI8FAAAAAAAAkAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2989,
					1,
					"left_delete",
					null,
					"AQAAAI8FAAAAAAAAjwUAAAAAAAABAAAAbA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAFAAAAAAAAkAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2991,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI8FAAAAAAAAkAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8FAAAAAAAAjwUAAAAAAAAAAAAAAADwvw"
				],
				[
					2993,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJAFAAAAAAAAkQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAFAAAAAAAAkAUAAAAAAAAAAAAAAADwvw"
				],
				[
					2995,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAJEFAAAAAAAAkgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEFAAAAAAAAkQUAAAAAAAAAAAAAAADwvw"
				],
				[
					2997,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAJIFAAAAAAAAkwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIFAAAAAAAAkgUAAAAAAAAAAAAAAADwvw"
				],
				[
					2999,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAJMFAAAAAAAAlAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJMFAAAAAAAAkwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3002,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUFAAAAAAAAlgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJUFAAAAAAAAlQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3004,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYFAAAAAAAAmAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYFAAAAAAAAlgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3006,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJcFAAAAAAAAmAUAAAAAAAAAAAAAmAUAAAAAAACcBQAAAAAAAAAAAACcBQAAAAAAAJ0FAAAAAAAAAAAAAJ0FAAAAAAAAoQUAAAAAAAAAAAAAmAUAAAAAAACYBQAAAAAAAAQAAAAgICAgmAUAAAAAAACgBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcFAAAAAAAAlwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3012,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAKAFAAAAAAAAoQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAFAAAAAAAAoAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3015,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAKEFAAAAAAAAogUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEFAAAAAAAAoQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3017,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAKIFAAAAAAAAowUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIFAAAAAAAAogUAAAAAAAAAAAAAAADwvw"
				],
				[
					3019,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAKMFAAAAAAAApAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMFAAAAAAAAowUAAAAAAAAAAAAAAADwvw"
				],
				[
					3021,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAKQFAAAAAAAApQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQFAAAAAAAApAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3023,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAKUFAAAAAAAApgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUFAAAAAAAApQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3025,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKYFAAAAAAAApwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYFAAAAAAAApgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3027,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAKcFAAAAAAAAqAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcFAAAAAAAApwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3029,
					1,
					"insert",
					{
						"characters": "D"
					},
					"AQAAAKgFAAAAAAAAqQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKgFAAAAAAAAqAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3031,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAKkFAAAAAAAAqgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKkFAAAAAAAAqQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3033,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKoFAAAAAAAAqwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKoFAAAAAAAAqgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3035,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAKsFAAAAAAAArAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsFAAAAAAAAqwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3037,
					1,
					"insert",
					{
						"characters": "X"
					},
					"AQAAAKwFAAAAAAAArQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwFAAAAAAAArAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3039,
					1,
					"insert_completion",
					{
						"completion": "TerminalDrawXY",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TerminalDrawXY"
					},
					"AgAAAKAFAAAAAAAAoAUAAAAAAAANAAAAVGVybWluYWxEcmF3WKAFAAAAAAAArgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0FAAAAAAAArQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3041,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK4FAAAAAAAAsAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4FAAAAAAAArgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3044,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAK8FAAAAAAAAsAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8FAAAAAAAArwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3047,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALAFAAAAAAAAsQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAFAAAAAAAAsAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3050,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEFAAAAAAAAsgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEFAAAAAAAAsQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3064,
					1,
					"paste",
					null,
					"AQAAALIFAAAAAAAAvwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIFAAAAAAAAsgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3067,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL8FAAAAAAAAwAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8FAAAAAAAAvwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3070,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMAFAAAAAAAAwQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAFAAAAAAAAwAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3073,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAMEFAAAAAAAAwwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEFAAAAAAAAwQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3078,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMIFAAAAAAAAxAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIFAAAAAAAAwgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3082,
					1,
					"left_delete",
					null,
					"AQAAAMMFAAAAAAAAwwUAAAAAAAABAAAAIg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMQFAAAAAAAAxAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3084,
					1,
					"left_delete",
					null,
					"AQAAAMIFAAAAAAAAwgUAAAAAAAABAAAAIg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMFAAAAAAAAwwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3086,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMIFAAAAAAAAxAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIFAAAAAAAAwgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3088,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMFAAAAAAAAxAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMFAAAAAAAAwwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3091,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMUFAAAAAAAAxgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMUFAAAAAAAAxQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3093,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMYFAAAAAAAAxwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMYFAAAAAAAAxgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3096,
					1,
					"insert",
					{
						"characters": "ra"
					},
					"AgAAAMcFAAAAAAAAyAUAAAAAAAAAAAAAyAUAAAAAAADJBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAAxwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3099,
					1,
					"left_delete",
					null,
					"AQAAAMgFAAAAAAAAyAUAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkFAAAAAAAAyQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3101,
					1,
					"left_delete",
					null,
					"AQAAAMcFAAAAAAAAxwUAAAAAAAABAAAAcg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgFAAAAAAAAyAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3128,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAMcFAAAAAAAAyAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAAxwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3130,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAMgFAAAAAAAAyQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgFAAAAAAAAyAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3132,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAMkFAAAAAAAAygUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkFAAAAAAAAyQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3134,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAMoFAAAAAAAAywUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoFAAAAAAAAygUAAAAAAAAAAAAAAADwvw"
				],
				[
					3137,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMsFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMsFAAAAAAAAywUAAAAAAAAAAAAAAADwvw"
				],
				[
					3141,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM0FAAAAAAAAzgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0FAAAAAAAAzQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3144,
					1,
					"insert",
					{
						"characters": "%"
					},
					"AQAAAM4FAAAAAAAAzwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4FAAAAAAAAzgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3146,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3153,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAANAFAAAAAAAA0QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3156,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAANEFAAAAAAAA0gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEFAAAAAAAA0QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3159,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAANIFAAAAAAAA0wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIFAAAAAAAA0gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3166,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAMcFAAAAAAAAyAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcFAAAAAAAAxwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3173,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAANUFAAAAAAAA1gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUFAAAAAAAA1QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3177,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANQFAAAAAAAA1QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQFAAAAAAAA1AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANUFAAAAAAAA1gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUFAAAAAAAA1QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3181,
					1,
					"paste",
					null,
					"AQAAANYFAAAAAAAA4gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYFAAAAAAAA1gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3183,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOIFAAAAAAAA4wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIFAAAAAAAA4gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3185,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMFAAAAAAAA5AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMFAAAAAAAA4wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3187,
					1,
					"paste",
					null,
					"AQAAAOQFAAAAAAAA8AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQFAAAAAAAA5AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3189,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPAFAAAAAAAA8QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPAFAAAAAAAA8AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3191,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPEFAAAAAAAA8QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3193,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAPIFAAAAAAAA8wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPIFAAAAAAAA8gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3195,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPMFAAAAAAAA8wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3197,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAPQFAAAAAAAA9QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQFAAAAAAAA9AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3200,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgFAAAAAAAA+AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3208,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAK8FAAAAAAAAsAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8FAAAAAAAArwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3210,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAALAFAAAAAAAAsQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAFAAAAAAAAsAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3212,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAALEFAAAAAAAAsgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEFAAAAAAAAsQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3214,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAALIFAAAAAAAAswUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIFAAAAAAAAsgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3216,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALMFAAAAAAAAtAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMFAAAAAAAAswUAAAAAAAAAAAAAAADwvw"
				],
				[
					3218,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQFAAAAAAAAtQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQFAAAAAAAAtAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3233,
					1,
					"insert_snippet",
					{
						"contents": "(${0:$SELECTION})"
					},
					"BgAAAM4FAAAAAAAAzgUAAAAAAAAMAAAAcmFuZCgpICUgMjU2zgUAAAAAAADcBQAAAAAAAAAAAADeBQAAAAAAAN4FAAAAAAAADAAAAHJhbmQoKSAlIDI1Nt4FAAAAAAAA7AUAAAAAAAAAAAAA7gUAAAAAAADuBQAAAAAAAAwAAAByYW5kKCkgJSAyNTbuBQAAAAAAAPwFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAAM4FAAAAAAAA2gUAAAAAAAAAAAAAAADwv9wFAAAAAAAA6AUAAAAAAAAAAAAAAADwv+oFAAAAAAAA9gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3237,
					1,
					"insert",
					{
						"characters": "("
					},
					"AwAAAO4FAAAAAAAA7wUAAAAAAAAAAAAA3gUAAAAAAADfBQAAAAAAAAAAAADOBQAAAAAAAM8FAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAAM4FAAAAAAAAzgUAAAAAAAAAAAAAAADwv94FAAAAAAAA3gUAAAAAAAAAAAAAAADwv+4FAAAAAAAA7gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3239,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AwAAAPEFAAAAAAAA8gUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAADPBQAAAAAAANAFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwv+AFAAAAAAAA4AUAAAAAAAAAAAAAAADwv/EFAAAAAAAA8QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3242,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AwAAAPMFAAAAAAAA9AUAAAAAAAAAAAAA4QUAAAAAAADiBQAAAAAAAAAAAADPBQAAAAAAANAFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwv+EFAAAAAAAA4QUAAAAAAAAAAAAAAADwv/MFAAAAAAAA8wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3244,
					1,
					"insert",
					{
						"characters": "ha"
					},
					"BgAAAPYFAAAAAAAA9wUAAAAAAAAAAAAA4wUAAAAAAADkBQAAAAAAAAAAAADQBQAAAAAAANEFAAAAAAAAAAAAAPkFAAAAAAAA+gUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwv+MFAAAAAAAA4wUAAAAAAAAAAAAAAADwv/YFAAAAAAAA9gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3262,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AwAAAPwFAAAAAAAA/QUAAAAAAAAAAAAA5wUAAAAAAADoBQAAAAAAAAAAAADSBQAAAAAAANMFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANIFAAAAAAAA0gUAAAAAAAAAAAAAAADwv+cFAAAAAAAA5wUAAAAAAAAAAAAAAADwv/wFAAAAAAAA/AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3266,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AwAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAADPBQAAAAAAANAFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwv+UFAAAAAAAA5QUAAAAAAAAAAAAAAADwv/sFAAAAAAAA+wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3268,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AwAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA5wUAAAAAAADoBQAAAAAAAAAAAADQBQAAAAAAANEFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwv+cFAAAAAAAA5wUAAAAAAAAAAAAAAADwv/4FAAAAAAAA/gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3270,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AwAAAAEGAAAAAAAAAgYAAAAAAAAAAAAA6QUAAAAAAADqBQAAAAAAAAAAAADRBQAAAAAAANIFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANEFAAAAAAAA0QUAAAAAAAAAAAAAAADwv+kFAAAAAAAA6QUAAAAAAAAAAAAAAADwvwEGAAAAAAAAAQYAAAAAAAAAAAAAAADwvw"
				],
				[
					3272,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AwAAAAQGAAAAAAAABQYAAAAAAAAAAAAA6wUAAAAAAADsBQAAAAAAAAAAAADSBQAAAAAAANMFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANIFAAAAAAAA0gUAAAAAAAAAAAAAAADwv+sFAAAAAAAA6wUAAAAAAAAAAAAAAADwvwQGAAAAAAAABAYAAAAAAAAAAAAAAADwvw"
				],
				[
					3274,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AwAAAAcGAAAAAAAACAYAAAAAAAAAAAAA7QUAAAAAAADuBQAAAAAAAAAAAADTBQAAAAAAANQFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANMFAAAAAAAA0wUAAAAAAAAAAAAAAADwv+0FAAAAAAAA7QUAAAAAAAAAAAAAAADwvwcGAAAAAAAABwYAAAAAAAAAAAAAAADwvw"
				],
				[
					3276,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AwAAAAoGAAAAAAAACwYAAAAAAAAAAAAA7wUAAAAAAADwBQAAAAAAAAAAAADUBQAAAAAAANUFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANQFAAAAAAAA1AUAAAAAAAAAAAAAAADwv+8FAAAAAAAA7wUAAAAAAAAAAAAAAADwvwoGAAAAAAAACgYAAAAAAAAAAAAAAADwvw"
				],
				[
					3278,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AwAAAA0GAAAAAAAADgYAAAAAAAAAAAAA8QUAAAAAAADyBQAAAAAAAAAAAADVBQAAAAAAANYFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANUFAAAAAAAA1QUAAAAAAAAAAAAAAADwv/EFAAAAAAAA8QUAAAAAAAAAAAAAAADwvw0GAAAAAAAADQYAAAAAAAAAAAAAAADwvw"
				],
				[
					3280,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AwAAABAGAAAAAAAAEQYAAAAAAAAAAAAA8wUAAAAAAAD0BQAAAAAAAAAAAADWBQAAAAAAANcFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANYFAAAAAAAA1gUAAAAAAAAAAAAAAADwv/MFAAAAAAAA8wUAAAAAAAAAAAAAAADwvxAGAAAAAAAAEAYAAAAAAAAAAAAAAADwvw"
				],
				[
					3282,
					1,
					"insert",
					{
						"characters": " "
					},
					"AwAAABMGAAAAAAAAFAYAAAAAAAAAAAAA9QUAAAAAAAD2BQAAAAAAAAAAAADXBQAAAAAAANgFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAwAAANcFAAAAAAAA1wUAAAAAAAAAAAAAAADwv/UFAAAAAAAA9QUAAAAAAAAAAAAAAADwvxMGAAAAAAAAEwYAAAAAAAAAAAAAAADwvw"
				],
				[
					3298,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC8GAAAAAAAAMAYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC8GAAAAAAAALwYAAAAAAAAAAAAAAADwvw"
				],
				[
					3301,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADAGAAAAAAAAMQYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAGAAAAAAAAMAYAAAAAAAAAAAAAAADwvw"
				],
				[
					3306,
					1,
					"left_delete",
					null,
					"AQAAAC8GAAAAAAAALwYAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAGAAAAAAAAMAYAAAAAAAAAAAAAAADwvw"
				],
				[
					3310,
					1,
					"left_delete",
					null,
					"AQAAAC8GAAAAAAAALwYAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADAGAAAAAAAAMAYAAAAAAAAAAAAAAADwvw"
				],
				[
					3315,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMwFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMwFAAAAAAAAzAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3318,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAM0FAAAAAAAAzgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0FAAAAAAAAzQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3320,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAAM4FAAAAAAAAzwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4FAAAAAAAAzgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3322,
					1,
					"insert",
					{
						"characters": "A"
					},
					"AQAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8FAAAAAAAAzwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3324,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAANAFAAAAAAAA0QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAFAAAAAAAA0AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3326,
					1,
					"insert",
					{
						"characters": "K"
					},
					"AQAAANEFAAAAAAAA0gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANEFAAAAAAAA0QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3328,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANIFAAAAAAAA0wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANIFAAAAAAAA0gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3339,
					1,
					"left_delete",
					null,
					"AQAAAMkFAAAAAAAAyQUAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMoFAAAAAAAAygUAAAAAAAAAAAAAAADwvw"
				],
				[
					3342,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAMkFAAAAAAAAygUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMkFAAAAAAAAyQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3353,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AgAAAM0FAAAAAAAAzgUAAAAAAAAAAAAAzgUAAAAAAADOBQAAAAAAAAUAAABCTEFOSw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM0FAAAAAAAA0gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3355,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAM4FAAAAAAAAzwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM4FAAAAAAAAzgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3371,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMUDAAAAAAAAyAMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUDAAAAAAAA1QMAAAAAAAAAAAAAAADwvw"
				],
				[
					3380,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAMEDAAAAAAAAwQMAAAAAAAAyAAAAICAgIC8vIFRlcm1pbmFsQ2xlYXIodGVybSwgezB4ZmEsIEJMQUNLLCBCTEFOS30pOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANgDAAAAAAAA2AMAAAAAAAAAAAAAAADwvw"
				],
				[
					3395,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAJcDAAAAAAAAmAMAAAAAAAAAAAAAmAMAAAAAAACYAwAAAAAAABUAAABDb25maWc6OldJTkRPV19TSVpFLnk",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcDAAAAAAAArAMAAAAAAAAAAAAAAADwvw"
				],
				[
					3401,
					1,
					"left_delete",
					null,
					"AQAAAI8DAAAAAAAAjwMAAAAAAAAIAAAAICAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJcDAAAAAAAAjwMAAAAAAAAAAAAAAAAAAA"
				],
				[
					3403,
					1,
					"left_delete",
					null,
					"AQAAAI4DAAAAAAAAjgMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8DAAAAAAAAjwMAAAAAAAAAAAAAAADwvw"
				],
				[
					3406,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4DAAAAAAAAjwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI4DAAAAAAAAjgMAAAAAAAAAAAAAAADwvw"
				],
				[
					3411,
					1,
					"left_delete",
					null,
					"AQAAAJIDAAAAAAAAkgMAAAAAAAAIAAAAICAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoDAAAAAAAAkgMAAAAAAAAAAAAAAAAAAA"
				],
				[
					3413,
					1,
					"left_delete",
					null,
					"AQAAAJEDAAAAAAAAkQMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJIDAAAAAAAAkgMAAAAAAAAAAAAAAADwvw"
				],
				[
					3415,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJEDAAAAAAAAkgMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEDAAAAAAAAkQMAAAAAAAAAAAAAAADwvw"
				],
				[
					3420,
					1,
					"left_delete",
					null,
					"AQAAAHADAAAAAAAAcAMAAAAAAAAIAAAAICAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgDAAAAAAAAcAMAAAAAAAAAAAAAAAAAAA"
				],
				[
					3423,
					1,
					"left_delete",
					null,
					"AQAAAG8DAAAAAAAAbwMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHADAAAAAAAAcAMAAAAAAAAAAAAAAADwvw"
				],
				[
					3433,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAOYGAAAAAAAA5wYAAAAAAAAAAAAA5wYAAAAAAADnBgAAAAAAAAQAAAAwLjBm",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYGAAAAAAAA6gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3435,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAAAAAAAA5wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3437,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOgGAAAAAAAA6QYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgGAAAAAAAA6AYAAAAAAAAAAAAAAADwvw"
				],
				[
					3439,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkGAAAAAAAA6QYAAAAAAAAAAAAAAADwvw"
				],
				[
					3445,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"GetScreenWidth()\",\"range\":{\"end\":{\"line\":58,\"character\":23},\"start\":{\"line\":58,\"character\":19}}},\"insertText\":\"GetScreenWidth()\",\"sortText\":\"40c23f42GetScreenWidth\",\"label\":\" GetScreenWidth()\",\"insertTextFormat\":2,\"filterText\":\"GetScreenWidth\",\"kind\":3,\"documentation\":{\"kind\":\"markdown\",\"value\":\"From `\\\"raylib.h\\\"`\"},\"detail\":\"int\",\"score\":0.7412222623825073}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1444,
							3439,
							1
						],
						"trigger": "GetScreenWidth"
					},
					"AgAAAOYGAAAAAAAA5gYAAAAAAAAEAAAAZ2V0U+YGAAAAAAAA9gYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoGAAAAAAAA6gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3448,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYGAAAAAAAA9wYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPYGAAAAAAAA9gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3450,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAPcGAAAAAAAA+AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcGAAAAAAAA9wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3452,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgGAAAAAAAA+QYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgGAAAAAAAA+AYAAAAAAAAAAAAAAADwvw"
				],
				[
					3455,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAPkGAAAAAAAA+gYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkGAAAAAAAA+QYAAAAAAAAAAAAAAADwvw"
				],
				[
					3458,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAPoGAAAAAAAA+wYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoGAAAAAAAA+gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3461,
					1,
					"insert",
					{
						"characters": "term"
					},
					"BAAAAPsGAAAAAAAA/AYAAAAAAAAAAAAA/AYAAAAAAAD9BgAAAAAAAAAAAAD9BgAAAAAAAP4GAAAAAAAAAAAAAP4GAAAAAAAA/wYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsGAAAAAAAA+wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3466,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAP8GAAAAAAAAAAcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP8GAAAAAAAA/wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3468,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"height\",\"range\":{\"end\":{\"line\":58,\"character\":45},\"start\":{\"line\":58,\"character\":45}}},\"insertText\":\"height\",\"sortText\":\"4023ff83height\",\"label\":\" height\",\"insertTextFormat\":1,\"filterText\":\"height\",\"kind\":5,\"detail\":\"int\",\"score\":1.7187649011611938}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							1452,
							3466,
							1
						],
						"trigger": "height"
					},
					"AQAAAAAHAAAAAAAABgcAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAADwvw"
				],
				[
					3474,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAOYGAAAAAAAA5wYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYGAAAAAAAA5gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3476,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAAAAAAAA5wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3479,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAOcGAAAAAAAA6AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcGAAAAAAAA5wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3481,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAOgGAAAAAAAA6QYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOgGAAAAAAAA6AYAAAAAAAAAAAAAAADwvw"
				],
				[
					3483,
					1,
					"insert",
					{
						"characters": "ao"
					},
					"AgAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA6gYAAAAAAADrBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkGAAAAAAAA6QYAAAAAAAAAAAAAAADwvw"
				],
				[
					3486,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAAAAAAAA6wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3489,
					1,
					"left_delete",
					null,
					"AQAAAOsGAAAAAAAA6wYAAAAAAAABAAAAdA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOwGAAAAAAAA7AYAAAAAAAAAAAAAAADwvw"
				],
				[
					3491,
					1,
					"left_delete",
					null,
					"AQAAAOoGAAAAAAAA6gYAAAAAAAABAAAAbw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAAAAAAAA6wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3493,
					1,
					"left_delete",
					null,
					"AQAAAOkGAAAAAAAA6QYAAAAAAAABAAAAYQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoGAAAAAAAA6gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3495,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAOkGAAAAAAAA6gYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOkGAAAAAAAA6QYAAAAAAAAAAAAAAADwvw"
				],
				[
					3497,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAOoGAAAAAAAA6wYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOoGAAAAAAAA6gYAAAAAAAAAAAAAAADwvw"
				],
				[
					3499,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAOsGAAAAAAAA7AYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAAAAAAAA6wYAAAAAAAAAAAAAAADwvw"
				],
				[
					3515,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAE4EAAAAAAAATgQAAAAAAABnAAAAICAgIFRlcm1pbmFsRHJhd0xpbmUodGVybSwgdGVybS53aWR0aC0xMiwgdGVybS5oZWlnaHQtMSwgdGVybS53aWR0aCwgdGVybS5oZWlnaHQtMSwgeycgJywgQkxBTkssIGZnfSk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGAEAAAAAAAAYAQAAAAAAAAAAAAAAADwvw"
				],
				[
					3520,
					1,
					"swap_line_down",
					null,
					"AgAAAPYDAAAAAAAAQwQAAAAAAAAAAAAAqAMAAAAAAACoAwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMcDAAAAAAAAxwMAAAAAAAAAAAAAAADwvw"
				],
				[
					3522,
					1,
					"swap_line_down",
					null,
					"AgAAABEEAAAAAAAAXgQAAAAAAAAAAAAAqQMAAAAAAACpAwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMgDAAAAAAAAyAMAAAAAAAAAAAAAAADwvw"
				],
				[
					3524,
					1,
					"swap_line_down",
					null,
					"AgAAABIEAAAAAAAAXwQAAAAAAAAAAAAAxAMAAAAAAADEAwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOMDAAAAAAAA4wMAAAAAAAAAAAAAAADwvw"
				],
				[
					3526,
					1,
					"swap_line_down",
					null,
					"AgAAACgEAAAAAAAAdQQAAAAAAAAAAAAAxQMAAAAAAADFAwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQDAAAAAAAA5AMAAAAAAAAAAAAAAADwvw"
				],
				[
					3528,
					1,
					"swap_line_down",
					null,
					"AgAAAEkEAAAAAAAAlgQAAAAAAAAAAAAA2wMAAAAAAADbAwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoDAAAAAAAA+gMAAAAAAAAAAAAAAADwvw"
				],
				[
					3530,
					1,
					"swap_line_down",
					null,
					"AgAAAE4EAAAAAAAAmwQAAAAAAAAAAAAA/AMAAAAAAAD8AwAAAAAAAE0AAAAgICAgVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsEAAAAAAAAGwQAAAAAAAAAAAAAAADwvw"
				],
				[
					3538,
					1,
					"cut",
					null,
					"AQAAAAUEAAAAAAAABQQAAAAAAAB0AQAAVGVybWluYWxEcmF3VGV4dCh0ZXJtLCAxLCB0ZXJtLmhlaWdodC0xLCAiW0FdIFRleHQgbW9kZSAoMCwwKSIsIHAyLCBmZyk7CiAgICBUZXJtaW5hbERyYXdUZXh0KHRlcm0sIHRlcm0ud2lkdGgtb3NzLnN0cigpLmxlbmd0aCgpLTEsIHRlcm0uaGVpZ2h0LTEsIG9zcy5zdHIoKSwgcDIsIGZnKTsKCiAgICBmb3IgKGludCBpPTA7IGk8dGVybS53aWR0aDsgaSsrKSB7CiAgICAgICAgVGVybWluYWxEcmF3WFkodGVybSwgaSwgdGVybS5oZWlnaHQtMiwgeydfJywgYmcsIHsodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgKHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksICh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAyNTV9fSk7CiAgICB9",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHkFAAAAAAAABQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3544,
					1,
					"left_delete",
					null,
					"AQAAAPwDAAAAAAAA/AMAAAAAAAAJAAAAICAgIAogICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUEAAAAAAAA/AMAAAAAAAAAAAAAAAAAAA"
				],
				[
					3547,
					1,
					"left_delete",
					null,
					"AQAAAPsDAAAAAAAA+wMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwDAAAAAAAA/AMAAAAAAAAAAAAAAADwvw"
				],
				[
					3558,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcFAAAAAAAAeAUAAAAAAAAAAAAAeAUAAAAAAAB8BQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcFAAAAAAAAdwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3560,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAHwFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAACBBQAAAAAAAAAAAAB4BQAAAAAAAHgFAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHwFAAAAAAAAfAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3563,
					1,
					"paste_and_indent",
					null,
					"AQAAAH0FAAAAAAAA8QYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH0FAAAAAAAAfQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3578,
					1,
					"cut",
					null,
					"AQAAAK0DAAAAAAAArQMAAAAAAAAWAAAAc3RkOjpzdHJpbmdzdHJlYW0gb3NzOw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMMDAAAAAAAArQMAAAAAAAAAAAAAAABCQA"
				],
				[
					3581,
					1,
					"left_delete",
					null,
					"AQAAAKcDAAAAAAAApwMAAAAAAAAGAAAACgogICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0DAAAAAAAApwMAAAAAAAAAAAAAAABCQA"
				],
				[
					3583,
					1,
					"left_delete",
					null,
					"AQAAAKYDAAAAAAAApgMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKcDAAAAAAAApwMAAAAAAAAAAAAAAADwvw"
				],
				[
					3592,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFgBAAAAAAAAWQEAAAAAAAAAAAAAWQEAAAAAAABdAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFgBAAAAAAAAWAEAAAAAAAAAAAAAAADwvw"
				],
				[
					3594,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAF0BAAAAAAAAXgEAAAAAAAAAAAAAXgEAAAAAAABiAQAAAAAAAAAAAABZAQAAAAAAAFkBAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0BAAAAAAAAXQEAAAAAAAAAAAAAAADwvw"
				],
				[
					3596,
					1,
					"paste",
					null,
					"AQAAAF4BAAAAAAAAdAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4BAAAAAAAAXgEAAAAAAAAAAAAAAADwvw"
				],
				[
					3606,
					1,
					"cut",
					null,
					"AQAAALQDAAAAAAAAtAMAAAAAAAAOAAAAQ2xlYXJTdGF0dXMoKTs",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQDAAAAAAAAwgMAAAAAAAAAAAAAAADwvw"
				],
				[
					3611,
					1,
					"left_delete",
					null,
					"AQAAAK8DAAAAAAAArwMAAAAAAAAFAAAACiAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQDAAAAAAAArwMAAAAAAAAAAAAAAABCQA"
				],
				[
					3613,
					1,
					"left_delete",
					null,
					"AQAAAKsDAAAAAAAAqwMAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8DAAAAAAAArwMAAAAAAAAAAAAAAADwvw"
				],
				[
					3615,
					1,
					"left_delete",
					null,
					"AQAAAKoDAAAAAAAAqgMAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsDAAAAAAAAqwMAAAAAAAAAAAAAAADwvw"
				],
				[
					3621,
					1,
					"reindent",
					null,
					"AQAAAF8FAAAAAAAAYwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8FAAAAAAAAXwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3624,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAGMFAAAAAAAAZAUAAAAAAAAAAAAAZAUAAAAAAABoBQAAAAAAAAAAAABfBQAAAAAAAF8FAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGMFAAAAAAAAYwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3627,
					1,
					"paste",
					null,
					"AQAAAGQFAAAAAAAAcgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQFAAAAAAAAZAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3641,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAAOoGAAAAAAAA7QYAAAAAAAAAAAAASwYAAAAAAABOBgAAAAAAAAAAAAAkBgAAAAAAACcGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAAAAAAAAJwYAAAAAAAAAAAAAAADwvw"
				],
				[
					3661,
					1,
					"swap_line_up",
					null,
					"AgAAAE0CAAAAAAAATQIAAAAAAABfAAAAICAgICAgICBUZXJtaW5hbERyYXdMaW5lKHRlcm0sIDAsIHRlcm0uaGVpZ2h0LTMsIHRlcm0ud2lkdGgsIHRlcm0uaGVpZ2h0LTMsIHsnXycsIGJnLCBCTEFOS30pOwruAQAAAAAAAE0CAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoCAAAAAAAAegIAAAAAAAAAAAAAAFB5QA"
				],
				[
					3663,
					1,
					"swap_line_up",
					null,
					"AgAAAO4BAAAAAAAA7gEAAAAAAABfAAAAICAgICAgICBUZXJtaW5hbERyYXdMaW5lKHRlcm0sIDAsIHRlcm0uaGVpZ2h0LTMsIHRlcm0ud2lkdGgsIHRlcm0uaGVpZ2h0LTMsIHsnXycsIGJnLCBCTEFOS30pOwqPAQAAAAAAAO4BAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsCAAAAAAAAGwIAAAAAAAAAAAAAAFB5QA"
				],
				[
					3668,
					1,
					"swap_line_up",
					null,
					"AgAAAE0CAAAAAAAATQIAAAAAAABfAAAAICAgICAgICBUZXJtaW5hbERyYXdMaW5lKHRlcm0sIDAsIHRlcm0uaGVpZ2h0LTIsIHRlcm0ud2lkdGgsIHRlcm0uaGVpZ2h0LTIsIHsnICcsIEJMQU5LLCBmZ30pOwruAQAAAAAAAE0CAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoCAAAAAAAAegIAAAAAAAAAAAAAAFB5QA"
				],
				[
					3713,
					1,
					"insert",
					{
						"characters": "0"
					},
					"BAAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADNAQAAAAAAAA0AAAB0ZXJtLmhlaWdodC0zsQEAAAAAAACyAQAAAAAAAAAAAACyAQAAAAAAALIBAAAAAAAADQAAAHRlcm0uaGVpZ2h0LTM",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAgAAALEBAAAAAAAAvgEAAAAAAAAAAAAAAADwv8wBAAAAAAAA2QEAAAAAAAAAAAAAAADwvw"
				],
				[
					3729,
					1,
					"insert",
					{
						"characters": "1"
					},
					"BAAAABMCAAAAAAAAFAIAAAAAAAAAAAAAFAIAAAAAAAAUAgAAAAAAAA0AAAB0ZXJtLmhlaWdodC0y+AEAAAAAAAD5AQAAAAAAAAAAAAD5AQAAAAAAAPkBAAAAAAAADQAAAHRlcm0uaGVpZ2h0LTI",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAgAAAPgBAAAAAAAABQIAAAAAAAAAAAAAAADwvxMCAAAAAAAAIAIAAAAAAAAAAAAAAADwvw"
				],
				[
					3741,
					1,
					"insert",
					{
						"characters": "2"
					},
					"BAAAAFoCAAAAAAAAWwIAAAAAAAAAAAAAWwIAAAAAAABbAgAAAAAAAA0AAAB0ZXJtLmhlaWdodC0xPwIAAAAAAABAAgAAAAAAAAAAAABAAgAAAAAAAEACAAAAAAAADQAAAHRlcm0uaGVpZ2h0LTE",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAgAAAD8CAAAAAAAATAIAAAAAAAAAAAAAAADwv1oCAAAAAAAAZwIAAAAAAAAAAAAAAADwvw"
				],
				[
					3768,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AgAAAKAEAAAAAAAAoQQAAAAAAAAAAAAAoQQAAAAAAAChBAAAAAAAACcAAAAoZmxvYXQpR2V0U2NyZWVuV2lkdGgoKSAtIDMqdGVybS5oZWlnaHQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAEAAAAAAAAxwQAAAAAAAAAAAAAAADwvw"
				],
				[
					3771,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAKEEAAAAAAAAogQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKEEAAAAAAAAoQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3773,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKIEAAAAAAAAowQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIEAAAAAAAAogQAAAAAAAAAAAAAAADwvw"
				],
				[
					3775,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKMEAAAAAAAApAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMEAAAAAAAAowQAAAAAAAAAAAAAAADwvw"
				],
				[
					3795,
					1,
					"reindent",
					null,
					"AQAAAPQEAAAAAAAA+AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPQEAAAAAAAA9AQAAAAAAAAAAAAAAADwvw"
				],
				[
					3799,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAPgEAAAAAAAA+QQAAAAAAAAAAAAA+QQAAAAAAAD9BAAAAAAAAAAAAAD0BAAAAAAAAPQEAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPgEAAAAAAAA+AQAAAAAAAAAAAAAAADwvw"
				],
				[
					3802,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPkEAAAAAAAA+QQAAAAAAAAAAAAAAADwvw"
				],
				[
					3804,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAPoEAAAAAAAA+wQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPoEAAAAAAAA+gQAAAAAAAAAAAAAAADwvw"
				],
				[
					3806,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAAPsEAAAAAAAA/AQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsEAAAAAAAA+wQAAAAAAAAAAAAAAADwvw"
				],
				[
					3808,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwEAAAAAAAA/AQAAAAAAAAAAAAAAADwvw"
				],
				[
					3815,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"BeginTextureMode(${1:RenderTexture2D target})\",\"range\":{\"end\":{\"line\":53,\"character\":5},\"start\":{\"line\":53,\"character\":4}}},\"insertText\":\"BeginTextureMode(${1:RenderTexture2D target})\",\"sortText\":\"40e6127fBeginTextureMode\",\"label\":\" BeginTextureMode(RenderTexture2D target)\",\"insertTextFormat\":2,\"filterText\":\"BeginTextureMode\",\"kind\":3,\"documentation\":{\"kind\":\"markdown\",\"value\":\"From `\\\"raylib.h\\\"`\"},\"detail\":\"void\",\"score\":0.6012802720069885}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1579,
							3802,
							1
						],
						"trigger": "BeginTextureMode"
					},
					"BQAAAPwEAAAAAAAA/AQAAAAAAAABAAAAafsEAAAAAAAA+wQAAAAAAAABAAAAZ/oEAAAAAAAA+gQAAAAAAAABAAAAZfkEAAAAAAAA+QQAAAAAAAABAAAAYvkEAAAAAAAAIQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAP0EAAAAAAAA/QQAAAAAAAAAAAAAAADwvw"
				],
				[
					3819,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAAoFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAALBQAAAAAAABYAAABSZW5kZXJUZXh0dXJlMkQgdGFyZ2V0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoFAAAAAAAAIAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3821,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAAsFAAAAAAAADAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAsFAAAAAAAACwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3823,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAAwFAAAAAAAADQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAwFAAAAAAAADAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3826,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAA0FAAAAAAAADgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0FAAAAAAAADQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3828,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAA4FAAAAAAAADwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA4FAAAAAAAADgUAAAAAAAAAAAAAAADwvw"
				],
				[
					3831,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAA8FAAAAAAAAEAUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA8FAAAAAAAADwUAAAAAAAAAAAAAAADwvw"
				],
				[
					3833,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAABAFAAAAAAAAEQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABAFAAAAAAAAEAUAAAAAAAAAAAAAAADwvw"
				],
				[
					3835,
					1,
					"insert_completion",
					{
						"completion": "buffer",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "buffer"
					},
					"AgAAAA8FAAAAAAAADwUAAAAAAAACAAAAYnUPBQAAAAAAABUFAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABEFAAAAAAAAEQUAAAAAAAAAAAAAAADwvw"
				],
				[
					3839,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABYFAAAAAAAAFwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABYFAAAAAAAAFgUAAAAAAAD////////vfw"
				],
				[
					3848,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADbBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANYFAAAAAAAA1gUAAAAAAAD////////vfw"
				],
				[
					3852,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANsFAAAAAAAA3AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsFAAAAAAAA2wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3854,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwFAAAAAAAA3AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3856,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0FAAAAAAAA3QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3860,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"EndDrawing()\",\"range\":{\"end\":{\"line\":57,\"character\":5},\"start\":{\"line\":57,\"character\":4}}},\"insertText\":\"EndDrawing()\",\"sortText\":\"404c9979EndDrawing\",\"label\":\" EndDrawing()\",\"insertTextFormat\":2,\"filterText\":\"EndDrawing\",\"kind\":3,\"detail\":\"void\",\"score\":1.4015663862228394}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1597,
							3852,
							1
						],
						"trigger": "EndDrawing"
					},
					"BAAAAN0FAAAAAAAA3QUAAAAAAAABAAAAZNwFAAAAAAAA3AUAAAAAAAABAAAAbtsFAAAAAAAA2wUAAAAAAAABAAAAZdsFAAAAAAAA5wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4FAAAAAAAA3gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3862,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcFAAAAAAAA5wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3874,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AgAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADcBQAAAAAAAA0AAABFbmREcmF3aW5nKCk7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsFAAAAAAAA6AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3877,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwFAAAAAAAA3AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3879,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0FAAAAAAAA3QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3881,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN4FAAAAAAAA3gUAAAAAAAAAAAAAAADwvw"
				],
				[
					3883,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN8FAAAAAAAA3wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3885,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAOAFAAAAAAAA4QUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOAFAAAAAAAA4AUAAAAAAAAAAAAAAADwvw"
				],
				[
					3887,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"EndTextureMode()\",\"range\":{\"end\":{\"line\":57,\"character\":8},\"start\":{\"line\":57,\"character\":4}}},\"insertText\":\"EndTextureMode()\",\"sortText\":\"406846f8EndTextureMode\",\"label\":\" EndTextureMode()\",\"insertTextFormat\":2,\"filterText\":\"EndTextureMode\",\"kind\":3,\"documentation\":{\"kind\":\"markdown\",\"value\":\"From `\\\"raylib.h\\\"`\"},\"detail\":\"void\",\"score\":1.1853342056274414}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1609,
							3881,
							1
						],
						"trigger": "EndTextureMode"
					},
					"BAAAAOAFAAAAAAAA4AUAAAAAAAABAAAAeN8FAAAAAAAA3wUAAAAAAAABAAAAZdsFAAAAAAAA2wUAAAAAAAAEAAAAZW5kVNsFAAAAAAAA6wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEFAAAAAAAA4QUAAAAAAAAAAAAAAADwvw"
				],
				[
					3889,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAOsFAAAAAAAA7AUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsFAAAAAAAA6wUAAAAAAAAAAAAAAADwvw"
				],
				[
					3902,
					1,
					"insert",
					{
						"characters": "ge"
					},
					"AwAAAKAEAAAAAAAAoQQAAAAAAAAAAAAAoQQAAAAAAAChBAAAAAAAAAQAAAAwLjBmoQQAAAAAAACiBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKAEAAAAAAAApAQAAAAAAAAAAAAAAADwvw"
				],
				[
					3904,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAKIEAAAAAAAAowQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKIEAAAAAAAAogQAAAAAAAAAAAAAAADwvw"
				],
				[
					3907,
					1,
					"insert",
					{
						"characters": "S"
					},
					"AQAAAKMEAAAAAAAApAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKMEAAAAAAAAowQAAAAAAAAAAAAAAADwvw"
				],
				[
					3909,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAKQEAAAAAAAApQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQEAAAAAAAApAQAAAAAAAAAAAAAAADwvw"
				],
				[
					3911,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"GetScreenHeight()\",\"range\":{\"end\":{\"line\":47,\"character\":24},\"start\":{\"line\":47,\"character\":19}}},\"insertText\":\"GetScreenHeight()\",\"sortText\":\"40ba07f7GetScreenHeight\",\"label\":\" GetScreenHeight()\",\"insertTextFormat\":2,\"filterText\":\"GetScreenHeight\",\"kind\":3,\"documentation\":{\"kind\":\"markdown\",\"value\":\"From `\\\"raylib.h\\\"`\"},\"detail\":\"int\",\"score\":0.773315966129303}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							1620,
							3909,
							1
						],
						"trigger": "GetScreenHeight"
					},
					"AgAAAKAEAAAAAAAAoAQAAAAAAAAFAAAAZ2V0U2OgBAAAAAAAALEEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKUEAAAAAAAApQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3914,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALEEAAAAAAAAsgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEEAAAAAAAAsQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3917,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAALIEAAAAAAAAswQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIEAAAAAAAAsgQAAAAAAAAAAAAAAADwvw"
				],
				[
					3918,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALMEAAAAAAAAtAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMEAAAAAAAAswQAAAAAAAAAAAAAAADwvw"
				],
				[
					3922,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAALQEAAAAAAAAtQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAADwvw"
				],
				[
					3924,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAALUEAAAAAAAAtgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUEAAAAAAAAtQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3926,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAALYEAAAAAAAAtwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYEAAAAAAAAtgQAAAAAAAAAAAAAAADwvw"
				],
				[
					3928,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAALcEAAAAAAAAuAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcEAAAAAAAAtwQAAAAAAAAAAAAAAADwvw"
				],
				[
					3930,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAALgEAAAAAAAAuQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgEAAAAAAAAuAQAAAAAAAAAAAAAAADwvw"
				],
				[
					3933,
					1,
					"insert",
					{
						"characters": "term"
					},
					"BAAAALkEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC7BAAAAAAAAAAAAAC7BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAvQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkEAAAAAAAAuQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3938,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAL0EAAAAAAAAvgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0EAAAAAAAAvQQAAAAAAAAAAAAAAADwvw"
				],
				[
					3942,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"session_name\":\"clangd\",\"item\":{\"textEdit\":{\"newText\":\"height\",\"range\":{\"end\":{\"line\":47,\"character\":49},\"start\":{\"line\":47,\"character\":49}}},\"insertText\":\"height\",\"sortText\":\"406106d0height\",\"label\":\" height\",\"insertTextFormat\":1,\"filterText\":\"height\",\"kind\":5,\"detail\":\"int\",\"score\":1.2419795989990234}}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							1631,
							3938,
							1
						],
						"trigger": "height"
					},
					"AQAAAL4EAAAAAAAAxAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4EAAAAAAAAvgQAAAAAAAAAAAAAAADwvw"
				],
				[
					4034,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAL0EAAAAAAAAvgQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0EAAAAAAAAvQQAAAAAAAAAAAAAAADwvw"
				],
				[
					4036,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAL4EAAAAAAAAvwQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4EAAAAAAAAvgQAAAAAAAAAAAAAAADwvw"
				],
				[
					4038,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAL8EAAAAAAAAwAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8EAAAAAAAAvwQAAAAAAAAAAAAAAADwvw"
				],
				[
					4040,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAMAEAAAAAAAAwQQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAADwvw"
				],
				[
					4051,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AwAAAOIGAAAAAAAA4gYAAAAAAAADAAAALy8gQAYAAAAAAABABgAAAAAAAAMAAAAvLyAWBgAAAAAAABYGAAAAAAAAAwAAAC8vIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOYGAAAAAAAAGgYAAAAAAAAAAAAAAADwvw"
				],
				[
					4056,
					1,
					"swap_line_up",
					null,
					"AgAAABIGAAAAAAAAEgYAAAAAAADMAAAAICAgIGZvciAoaW50IGk9MDsgaTx0ZXJtLndpZHRoOyBpKyspIHsKICAgICAgICBUZXJtaW5hbERyYXdYWSh0ZXJtLCBpLCB0ZXJtLmhlaWdodC0yLCB7J18nLCBiZywgeyh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgKHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksIDI1NX19KTsKICAgIH0KEQYAAAAAAADdBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAN0GAAAAAAAAFwYAAAAAAAAAAAAAAADwvw"
				],
				[
					4059,
					1,
					"swap_line_up",
					null,
					"AgAAABEGAAAAAAAAEQYAAAAAAADMAAAAICAgIGZvciAoaW50IGk9MDsgaTx0ZXJtLndpZHRoOyBpKyspIHsKICAgICAgICBUZXJtaW5hbERyYXdYWSh0ZXJtLCBpLCB0ZXJtLmhlaWdodC0yLCB7J18nLCBiZywgeyh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgKHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksIDI1NX19KTsKICAgIH0K+wUAAAAAAADHBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwGAAAAAAAAFgYAAAAAAAAAAAAAAADwvw"
				],
				[
					4065,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADsFAAAAAAAAPAUAAAAAAAAAAAAAPAUAAAAAAABABQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsFAAAAAAAAOwUAAAAAAAAAAAAAAADwvw"
				],
				[
					4074,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADsFAAAAAAAAPAUAAAAAAAAAAAAAPQUAAAAAAAA9BQAAAAAAAAQAAAAgICAg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsFAAAAAAAAOwUAAAAAAAAAAAAAAADwvw"
				],
				[
					4089,
					1,
					"left_delete",
					null,
					"AQAAADsFAAAAAAAAOwUAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADwFAAAAAAAAPAUAAAAAAAAAAAAAAADwvw"
				],
				[
					4091,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADsFAAAAAAAAPAUAAAAAAAAAAAAAPAUAAAAAAABABQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADsFAAAAAAAAOwUAAAAAAAAAAAAAAADwvw"
				],
				[
					4094,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEAFAAAAAAAAQgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAFAAAAAAAAQAUAAAAAAAAAAAAAAADwvw"
				],
				[
					4096,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAEEFAAAAAAAAQgUAAAAAAAAAAAAAQgUAAAAAAABGBQAAAAAAAAAAAABGBQAAAAAAAEcFAAAAAAAAAAAAAEcFAAAAAAAASwUAAAAAAAAAAAAAQgUAAAAAAABCBQAAAAAAAAQAAAAgICAgQgUAAAAAAABKBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEFAAAAAAAAQQUAAAAAAAAAAAAAAADwvw"
				],
				[
					4104,
					1,
					"swap_line_up",
					null,
					"AgAAAFIFAAAAAAAAUgUAAAAAAACLAQAAICAgIENsZWFyU3RhdHVzKCk7CiAgICBUZXJtaW5hbERyYXdUZXh0KHRlcm0sIDEsIHRlcm0uaGVpZ2h0LTEsICJbQV0gVGV4dCBtb2RlICgwLDApIiwgcDIsIGZnKTsKICAgIFRlcm1pbmFsRHJhd1RleHQodGVybSwgdGVybS53aWR0aC1vc3Muc3RyKCkubGVuZ3RoKCktMSwgdGVybS5oZWlnaHQtMSwgb3NzLnN0cigpLCBwMiwgZmcpOwogICAgZm9yIChpbnQgaT0wOyBpPHRlcm0ud2lkdGg7IGkrKykgewogICAgICAgIFRlcm1pbmFsRHJhd1hZKHRlcm0sIGksIHRlcm0uaGVpZ2h0LTIsIHsnXycsIGJnLCB7KHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksICh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgMjU1fX0pOwogICAgfQpRBQAAAAAAANwGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwGAAAAAAAAWgUAAAAAAAAAAAAAAADwvw"
				],
				[
					4106,
					1,
					"swap_line_up",
					null,
					"AgAAAFEFAAAAAAAAUQUAAAAAAACLAQAAICAgIENsZWFyU3RhdHVzKCk7CiAgICBUZXJtaW5hbERyYXdUZXh0KHRlcm0sIDEsIHRlcm0uaGVpZ2h0LTEsICJbQV0gVGV4dCBtb2RlICgwLDApIiwgcDIsIGZnKTsKICAgIFRlcm1pbmFsRHJhd1RleHQodGVybSwgdGVybS53aWR0aC1vc3Muc3RyKCkubGVuZ3RoKCktMSwgdGVybS5oZWlnaHQtMSwgb3NzLnN0cigpLCBwMiwgZmcpOwogICAgZm9yIChpbnQgaT0wOyBpPHRlcm0ud2lkdGg7IGkrKykgewogICAgICAgIFRlcm1pbmFsRHJhd1hZKHRlcm0sIGksIHRlcm0uaGVpZ2h0LTIsIHsnXycsIGJnLCB7KHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksICh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgMjU1fX0pOwogICAgfQpLBQAAAAAAANYGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsGAAAAAAAAWQUAAAAAAAAAAAAAAADwvw"
				],
				[
					4108,
					1,
					"indent",
					null,
					"BgAAAEsFAAAAAAAATwUAAAAAAAAAAAAAYgUAAAAAAABmBQAAAAAAAAAAAACzBQAAAAAAALcFAAAAAAAAAAAAABYGAAAAAAAAGgYAAAAAAAAAAAAAQQYAAAAAAABFBgAAAAAAAAAAAADkBgAAAAAAAOgGAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANUGAAAAAAAAUwUAAAAAAAAAAAAAAADwvw"
				],
				[
					4111,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAEIFAAAAAAAAQgUAAAAAAAAJAAAAICAgICAgICAK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEoFAAAAAAAASgUAAAAAAAAAAAAAAADwvw"
				],
				[
					4117,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAAOsGAAAAAAAA6wYAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOsGAAAAAAAA6wYAAAAAAAAAAAAAAADwvw"
				],
				[
					4129,
					1,
					"cut",
					null,
					"AQAAAB0FAAAAAAAAHQUAAAAAAADjAQAAQmVnaW5UZXh0dXJlTW9kZSh0ZXJtLmJ1ZmZlcik7CiAgICB7CiAgICAgICAgQ2xlYXJTdGF0dXMoKTsKICAgICAgICBUZXJtaW5hbERyYXdUZXh0KHRlcm0sIDEsIHRlcm0uaGVpZ2h0LTEsICJbQV0gVGV4dCBtb2RlICgwLDApIiwgcDIsIGZnKTsKICAgICAgICBUZXJtaW5hbERyYXdUZXh0KHRlcm0sIHRlcm0ud2lkdGgtb3NzLnN0cigpLmxlbmd0aCgpLTEsIHRlcm0uaGVpZ2h0LTEsIG9zcy5zdHIoKSwgcDIsIGZnKTsKICAgICAgICBmb3IgKGludCBpPTA7IGk8dGVybS53aWR0aDsgaSsrKSB7CiAgICAgICAgICAgIFRlcm1pbmFsRHJhd1hZKHRlcm0sIGksIHRlcm0uaGVpZ2h0LTIsIHsnXycsIGJnLCB7KHVuc2lnbmVkIGNoYXIpKHJhbmQoKSAlIDI1NiksICh1bnNpZ25lZCBjaGFyKShyYW5kKCkgJSAyNTYpLCAodW5zaWduZWQgY2hhcikocmFuZCgpICUgMjU2KSwgMjU1fX0pOwogICAgICAgIH0KICAgIH0KICAgIEVuZFRleHR1cmVNb2RlKCk7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAHAAAAAAAAHQUAAAAAAAAAAAAAAADwvw"
				],
				[
					4136,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACfAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJoDAAAAAAAAmgMAAAAAAAAAAAAAAADwvw"
				],
				[
					4138,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAAoAMAAAAAAACkAwAAAAAAAAAAAACbAwAAAAAAAJsDAAAAAAAABAAAACAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8DAAAAAAAAnwMAAAAAAAAAAAAAAADwvw"
				],
				[
					4140,
					1,
					"paste_and_indent",
					null,
					"AQAAAKADAAAAAAAAgwUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKADAAAAAAAAoAMAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/TestScene/TestScene.hpp",
			"settings":
			{
				"buffer_size": 535,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"insert",
					{
						"characters": "U"
					},
					"BAAAAIYBAAAAAAAAhwEAAAAAAAAAAAAAhwEAAAAAAACHAQAAAAAAAAwAAABDb25maWdMb2FkZXJUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVQEAAAAAAAAMAAAAQ29uZmlnTG9hZGVy",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVAEAAAAAAABgAQAAAAAAAAAAAAAAAPC/hgEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AgAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/fAEAAAAAAAB8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AgAAAH0BAAAAAAAAfQEAAAAAAAABAAAASVUBAAAAAAAAVQEAAAAAAAABAAAASQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/fgEAAAAAAAB+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AgAAAHsBAAAAAAAAewEAAAAAAAABAAAAVVQBAAAAAAAAVAEAAAAAAAABAAAAVQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/fAEAAAAAAAB8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "U"
					},
					"AgAAAHoBAAAAAAAAewEAAAAAAAAAAAAAVAEAAAAAAABVAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVAEAAAAAAABUAQAAAAAAAAAAAAAAAPC/egEAAAAAAAB6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AgAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAVQEAAAAAAABWAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/fAEAAAAAAAB8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AgAAAH4BAAAAAAAAfwEAAAAAAAAAAAAAVgEAAAAAAABXAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/fgEAAAAAAAB+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AgAAAIABAAAAAAAAgQEAAAAAAAAAAAAAVwEAAAAAAABYAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAVwEAAAAAAABXAQAAAAAAAAAAAAAAAPC/gAEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AgAAAIIBAAAAAAAAgwEAAAAAAAAAAAAAWAEAAAAAAABZAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAWAEAAAAAAABYAQAAAAAAAAAAAAAAAPC/ggEAAAAAAACCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AgAAAIQBAAAAAAAAhQEAAAAAAAAAAAAAWQEAAAAAAABaAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAWQEAAAAAAABZAQAAAAAAAAAAAAAAAPC/hAEAAAAAAACEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AgAAAIYBAAAAAAAAhwEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAWgEAAAAAAABaAQAAAAAAAAAAAAAAAPC/hgEAAAAAAACGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAAIgBAAAAAAAAiQEAAAAAAAAAAAAAWwEAAAAAAABcAQAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAACAAAAWwEAAAAAAABbAQAAAAAAAAAAAAAAAPC/iAEAAAAAAACIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKwBAAAAAAAArQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKwBAAAAAAAArAEAAAAAAAAAAAAAAADwvw"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK0BAAAAAAAArQEAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAAK4BAAAAAAAArwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK4BAAAAAAAArgEAAAAAAAAAAAAAAADwvw"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAK8BAAAAAAAAsAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8BAAAAAAAArwEAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALABAAAAAAAAsQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALABAAAAAAAAsAEAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALEBAAAAAAAAsgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALEBAAAAAAAAsQEAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAALIBAAAAAAAAswEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIBAAAAAAAAsgEAAAAAAAAAAAAAAADwvw"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALMBAAAAAAAAtAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALMBAAAAAAAAswEAAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AQAAALQBAAAAAAAAtQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQBAAAAAAAAtAEAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALUBAAAAAAAAtgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUBAAAAAAAAtQEAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAALYBAAAAAAAAtwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYBAAAAAAAAtgEAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAALcBAAAAAAAAuAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcBAAAAAAAAtwEAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALgBAAAAAAAAuQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgBAAAAAAAAuAEAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAALkBAAAAAAAAugEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkBAAAAAAAAuQEAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAALoBAAAAAAAAuwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoBAAAAAAAAugEAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAALsBAAAAAAAAvAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsBAAAAAAAAuwEAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALwBAAAAAAAAvQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0BAAAAAAAAvQEAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4BAAAAAAAAvgEAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAL8BAAAAAAAAwAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8BAAAAAAAAvwEAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAMABAAAAAAAAwQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMABAAAAAAAAwAEAAAAAAAAAAAAAAADwvw"
				],
				[
					59,
					1,
					"paste",
					null,
					"AgAAAK4BAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAANAgAAAAAAABMAAABjbGFzcyBDYW1OYXZpZ2F0aW9u",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMEBAAAAAAAArgEAAAAAAAAAAAAAAAAAAA"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "C"
					},
					"AgAAALQBAAAAAAAAtQEAAAAAAAAAAAAAtQEAAAAAAAC1AQAAAAAAAAgAAABVSUxheW91dA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALQBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALUBAAAAAAAAtgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALUBAAAAAAAAtQEAAAAAAAAAAAAAAADwvw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAALYBAAAAAAAAtwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYBAAAAAAAAtgEAAAAAAAAAAAAAAADwvw"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "N"
					},
					"AQAAALcBAAAAAAAAuAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALcBAAAAAAAAtwEAAAAAAAAAAAAAAADwvw"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALgBAAAAAAAAuQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgBAAAAAAAAuAEAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAALkBAAAAAAAAugEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkBAAAAAAAAuQEAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAALoBAAAAAAAAuwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoBAAAAAAAAugEAAAAAAAAAAAAAAADwvw"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAALsBAAAAAAAAvAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALsBAAAAAAAAuwEAAAAAAAAAAAAAAADwvw"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAALwBAAAAAAAAvQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwBAAAAAAAAvAEAAAAAAAAAAAAAAADwvw"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAL0BAAAAAAAAvgEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0BAAAAAAAAvQEAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4BAAAAAAAAvgEAAAAAAAAAAAAAAADwvw"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAL8BAAAAAAAAwAEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL8BAAAAAAAAvwEAAAAAAAAAAAAAAADwvw"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAMABAAAAAAAAwQEAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMABAAAAAAAAwAEAAAAAAAAAAAAAAADwvw"
				],
				[
					108,
					1,
					"paste",
					null,
					"AgAAAOcBAAAAAAAA9AEAAAAAAAAAAAAA9AEAAAAAAAD0AQAAAAAAAAgAAABVSUxheW91dA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOcBAAAAAAAA7wEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/TestScene/TerminalBasic.cpp",
			"settings":
			{
				"buffer_size": 4514,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/I/workspace/CPP/raylib-cmake/src/scene/MapEditor.cpp",
			"settings":
			{
				"buffer_size": 14770,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					92,
					1,
					"left_delete",
					null,
					"AQAAAFo5AAAAAAAAWjkAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbOQAAAAAAAFs5AAAAAAAAAAAAAAAA8L8"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFo5AAAAAAAAWzkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaOQAAAAAAAFo5AAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "CMakeLists.txt",
			"settings":
			{
				"buffer_size": 2357,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAP0EAAAAAAAAOwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAABMFAAAAAAAAEwUAAAAAAAClAAAAc2V0KEJVSUxEX0VYQU1QTEVTIE9GRiBDQUNIRSBCT09MICIiIEZPUkNFKSAjIGRvbid0IGJ1aWxkIHRoZSBzdXBwbGllZCBleGFtcGxlcwpzZXQoQlVJTERfR0FNRVMgICAgT0ZGIENBQ0hFIEJPT0wgIiIgRk9SQ0UpICMgZG9uJ3QgYnVpbGQgdGhlIHN1cHBsaWVkIGV4YW1wbGUgZ2FtZXMK",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAD4FAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABhBQAAAAAAACUAAABodHRwczovL2dpdGh1Yi5jb20vcmF5c2FuNS9yYXlsaWIuZ2l0",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"paste",
					null,
					"BAAAAI0FAAAAAAAAkgUAAAAAAAAAAAAAkgUAAAAAAACSBQAAAAAAAAYAAAByYXlsaWIoBQAAAAAAAC0FAAAAAAAAAAAAAC0FAAAAAAAALQUAAAAAAAAGAAAAcmF5bGli",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"paste",
					null,
					"AQAAAP0EAAAAAAAALAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"left_delete",
					null,
					"AQAAACsFAAAAAAAAKwUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AgAAABkFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAaBQAAAAAAAAgAAAB5YW1sLWNwcA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAABoFAAAAAAAAGwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAABsFAAAAAAAAHAUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAABwFAAAAAAAAHQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAB0FAAAAAAAAHgUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQGAAAAAAAAtQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"paste",
					null,
					"AQAAALUGAAAAAAAAzwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AgAAALgGAAAAAAAAuQYAAAAAAAAAAAAAuQYAAAAAAAC5BgAAAAAAAAYAAAByYXlndWk",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAALkGAAAAAAAAugYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAALoGAAAAAAAAuwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAALsGAAAAAAAAvAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAALwGAAAAAAAAvQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"paste",
					null,
					"AgAAAGkFAAAAAAAAlQUAAAAAAAAAAAAAlQUAAAAAAACVBQAAAAAAACMAAABodHRwczovL2dpdGh1Yi5jb20vZG1pbG9zL2NvbG9yLmdpdA",
					"AQAAAAAAAAABAAAAaQUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"paste",
					null,
					"BgAAAMEFAAAAAAAAyAUAAAAAAAAAAAAAyAUAAAAAAADIBQAAAAAAAAUAAABjb2xvclQFAAAAAAAAWwUAAAAAAAAAAAAAWwUAAAAAAABbBQAAAAAAAAUAAABjb2xvchkFAAAAAAAAIAUAAAAAAAAAAAAAIAUAAAAAAAAgBQAAAAAAAAUAAABjb2xvcg",
					"AQAAAAAAAAADAAAAGQUAAAAAAAAeBQAAAAAAAAAAAAAAAPC/VAUAAAAAAABZBQAAAAAAAAAAAAAAAPC/wQUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					205,
					1,
					"left_delete",
					null,
					"AQAAAMQGAAAAAAAAxAYAAAAAAAAZAAAAIiR7Y29sb3JfU09VUkNFX0RJUn0vc3JjIg",
					"AQAAAAAAAAABAAAAxAYAAAAAAADdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"left_delete",
					null,
					"AQAAAMMGAAAAAAAAwwYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAxAYAAAAAAADEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AgAAAKIFAAAAAAAAowUAAAAAAAAAAAAAowUAAAAAAACjBQAAAAAAAAYAAABtYXN0ZXI",
					"AQAAAAAAAAABAAAAogUAAAAAAACoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKMFAAAAAAAApAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowUAAAAAAACjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAKQFAAAAAAAApQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAUAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAKUFAAAAAAAApgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQUAAAAAAAClBQAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMsFAAAAAAAAzAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywUAAAAAAADLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMwFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"paste",
					null,
					"AQAAAM0FAAAAAAAACQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMsFAAAAAAAAzAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywUAAAAAAADLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMwFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"paste",
					null,
					"AQAAAM0FAAAAAAAANgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"cut",
					null,
					"AQAAADgHAAAAAAAAOAcAAAAAAAA8AAAAaHR0cHM6Ly9naXRodWIuY29tL29jb3JudXQvaW1ndWkvYXJjaGl2ZS9yZWZzL3RhZ3MvdjEuODguemlw",
					"AQAAAAAAAAABAAAAdAcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"left_delete",
					null,
					"AQAAADcHAAAAAAAANwcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOAcAAAAAAAA4BwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"left_delete",
					null,
					"AQAAADYHAAAAAAAANgcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAANwcAAAAAAAA3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"paste",
					null,
					"AgAAANUGAAAAAAAAEQcAAAAAAAAAAAAAEQcAAAAAAAARBwAAAAAAAD0AAABodHRwczovL2dpdGh1Yi5jb20vcmF5c2FuNS9yYXlsaWIvYXJjaGl2ZS9yZWZzL3RhZ3MvNC4yLjAuemlw",
					"AQAAAAAAAAABAAAA1QYAAAAAAAASBwAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"left_delete",
					null,
					"AQAAABAGAAAAAAAAEAYAAAAAAACkAAAAc2V0KEJVSUxEX0VYQU1QTEVTIE9GRiBDQUNIRSBCT09MICIiIEZPUkNFKSAjIGRvbid0IGJ1aWxkIHRoZSBzdXBwbGllZCBleGFtcGxlcwpzZXQoQlVJTERfR0FNRVMgICAgT0ZGIENBQ0hFIEJPT0wgIiIgRk9SQ0UpICMgZG9uJ3QgYnVpbGQgdGhlIHN1cHBsaWVkIGV4YW1wbGUgZ2FtZXM",
					"AQAAAAAAAAABAAAAtAYAAAAAAAAQBgAAAAAAAAAAAAAAAAAA"
				],
				[
					295,
					1,
					"left_delete",
					null,
					"AQAAAA8GAAAAAAAADwYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAEAYAAAAAAAAQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"paste",
					null,
					"BgAAAIkGAAAAAAAAjgYAAAAAAAAAAAAAjgYAAAAAAACOBgAAAAAAAAYAAAByYXlsaWIlBgAAAAAAACoGAAAAAAAAAAAAACoGAAAAAAAAKgYAAAAAAAAGAAAAcmF5bGli6QUAAAAAAADuBQAAAAAAAAAAAADuBQAAAAAAAO4FAAAAAAAABgAAAHJheWxpYg",
					"AQAAAAAAAAADAAAA6QUAAAAAAADvBQAAAAAAAAAAAAAAAPC/JQYAAAAAAAArBgAAAAAAAAAAAAAAAPC/iQYAAAAAAACPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					325,
					1,
					"cut",
					null,
					"AQAAAM0FAAAAAAAAzQUAAAAAAADAAAAAbWVzc2FnZShTVEFUVVMgIkRvd25sb2FkaW5nIGltZ3VpIGxpYnJhcnkiKQppbmNsdWRlKEZldGNoQ29udGVudCkKRmV0Y2hDb250ZW50X0RlY2xhcmUoaW1ndWkgVVJMIGh0dHBzOi8vZ2l0aHViLmNvbS9vY29ybnV0L2ltZ3VpL2FyY2hpdmUvcmVmcy90YWdzL3YxLjg4LnppcCkKRmV0Y2hDb250ZW50X01ha2VBdmFpbGFibGUoaW1ndWkp",
					"AQAAAAAAAAABAAAAjQYAAAAAAADNBQAAAAAAAAAAAAAAAAAA"
				],
				[
					328,
					1,
					"left_delete",
					null,
					"AQAAAMwFAAAAAAAAzAUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzQUAAAAAAADNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"left_delete",
					null,
					"AQAAAMsFAAAAAAAAywUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzAUAAAAAAADMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPsEAAAAAAAA/AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wQAAAAAAAD7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AQAAAAAAAD8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"paste",
					null,
					"AQAAAP0EAAAAAAAAvQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"paste",
					null,
					"AgAAACAGAAAAAAAAIwYAAAAAAAAAAAAAIwYAAAAAAAAjBgAAAAAAAA4AAABHSVRfUkVQT1NJVE9SWQ",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"paste",
					null,
					"AgAAACQGAAAAAAAAaAYAAAAAAAAAAAAAaAYAAAAAAABoBgAAAAAAADkAAABodHRwczovL2dpdGh1Yi5jb20vcmF5bGliLWV4dHJhcy9ybEltR3VpLmdpdCBHSVRfVEFHIG1haW4",
					"AQAAAAAAAAABAAAAJAYAAAAAAABdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMHAAAAAAAAhAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwcAAAAAAACDBwAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"paste",
					null,
					"AQAAAIQHAAAAAAAAngcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAcAAAAAAACEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"paste",
					null,
					"AgAAAIcHAAAAAAAAjgcAAAAAAAAAAAAAjgcAAAAAAACOBwAAAAAAAAYAAAByYXlndWk",
					"AQAAAAAAAAABAAAAhwcAAAAAAACNBwAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"paste",
					null,
					"AQAAAN4HAAAAAAAA4wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL0FAAAAAAAAvgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQUAAAAAAAC9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"paste",
					null,
					"AQAAAL4FAAAAAAAA6gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgUAAAAAAAC+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"paste",
					null,
					"AgAAAMgFAAAAAAAAzQUAAAAAAAAAAAAAzQUAAAAAAADNBQAAAAAAAAUAAABJTUdVSQ",
					"AQAAAAAAAAABAAAAzQUAAAAAAADIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AgAAANgFAAAAAAAA2QUAAAAAAAAAAAAA2QUAAAAAAADZBQAAAAAAAAoAAABJTUdVSV9QQVRI",
					"AQAAAAAAAAABAAAA2AUAAAAAAADiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANkFAAAAAAAA2gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAANoFAAAAAAAA2wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gUAAAAAAADaBQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAANsFAAAAAAAA3AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wUAAAAAAADbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAANwFAAAAAAAA3QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AUAAAAAAADcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QUAAAAAAADdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"paste",
					null,
					"AQAAAN4FAAAAAAAA6AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gUAAAAAAADeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE8HAAAAAAAAUAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwcAAAAAAABPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAFAHAAAAAAAAUQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAcAAAAAAABQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFEHAAAAAAAAUwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQcAAAAAAABRBwAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					1,
					"paste",
					null,
					"AQAAAFIHAAAAAAAAXwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgcAAAAAAABSBwAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"left_delete",
					null,
					"AQAAAN8HAAAAAAAA3wcAAAAAAAADAAAAc3Jj",
					"AQAAAAAAAAABAAAA3wcAAAAAAADiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"left_delete",
					null,
					"AQAAAN4HAAAAAAAA3gcAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA3wcAAAAAAADfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"left_delete",
					null,
					"AQAAAN4HAAAAAAAA3gcAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAA3wcAAAAAAADfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"left_delete",
					null,
					"AQAAAMgHAAAAAAAAyAcAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAyQcAAAAAAADJBwAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"paste",
					null,
					"AQAAAMgHAAAAAAAA3QcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAcAAAAAAADIBwAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0HAAAAAAAA3gcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QcAAAAAAADdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"paste",
					null,
					"AgAAAMoHAAAAAAAA2gcAAAAAAAAAAAAA2gcAAAAAAADaBwAAAAAAABIAAABybEltR3VpX1NPVVJDRV9ESVI",
					"AQAAAAAAAAABAAAAygcAAAAAAADcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					545,
					1,
					"left_delete",
					null,
					"AQAAADAIAAAAAAAAMAgAAAAAAAAFAAAAaW1ndWk",
					"AQAAAAAAAAABAAAAMAgAAAAAAAA1CAAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					1,
					"left_delete",
					null,
					"AQAAAC8IAAAAAAAALwgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMAgAAAAAAAAwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"paste",
					null,
					"AgAAAN4HAAAAAAAA5QcAAAAAAAAAAAAA5QcAAAAAAADlBwAAAAAAAAcAAABybEltR3Vp",
					"AQAAAAAAAAABAAAA5QcAAAAAAADeBwAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMAGAAAAAAAAwQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAYAAAAAAADABgAAAAAAAAAAAAAAAPC/"
				],
				[
					666,
					1,
					"paste",
					null,
					"AQAAAMEGAAAAAAAA8wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQYAAAAAAADBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"paste",
					null,
					"AgAAAMsGAAAAAAAA0gYAAAAAAAAAAAAA0gYAAAAAAADSBgAAAAAAAAUAAABpbWd1aQ",
					"AQAAAAAAAAABAAAA0AYAAAAAAADLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"paste",
					null,
					"AgAAAN0GAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADkBgAAAAAAAAUAAABpbWd1aQ",
					"AQAAAAAAAAABAAAA4gYAAAAAAADdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					690,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcHAAAAAAAAmAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwcAAAAAAACXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"paste",
					null,
					"AQAAAJgHAAAAAAAAqAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAcAAAAAAACYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					710,
					1,
					"paste",
					null,
					"AgAAAJoHAAAAAAAAoQcAAAAAAAAAAAAAoQcAAAAAAAChBwAAAAAAAAUAAABpbWd1aQ",
					"AQAAAAAAAAABAAAAnwcAAAAAAACaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPcGAAAAAAAA+AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wYAAAAAAAD3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					734,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPgGAAAAAAAA+QYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					736,
					1,
					"paste",
					null,
					"AQAAAPkGAAAAAAAAJgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AgAAAAkHAAAAAAAACgcAAAAAAAAAAAAACgcAAAAAAAAKBwAAAAAAABsAAABEb3dubG9hZGluZyBybEltR3VpIGxpYnJhcnk",
					"AQAAAAAAAAABAAAACQcAAAAAAAAkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					755,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAAoHAAAAAAAACwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgcAAAAAAAAKBwAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAAsHAAAAAAAADAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAAwHAAAAAAAADQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA0HAAAAAAAADgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQcAAAAAAAANBwAAAAAAAAAAAAAAAPC/"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": "h"
					},
					"AQAAAA4HAAAAAAAADwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgcAAAAAAAAOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAA8HAAAAAAAAEAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwcAAAAAAAAPBwAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABAHAAAAAAAAEQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAcAAAAAAAAQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAABEHAAAAAAAAEgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQcAAAAAAAARBwAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABIHAAAAAAAAEwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgcAAAAAAAASBwAAAAAAAAAAAAAAAPC/"
				],
				[
					773,
					1,
					"paste",
					null,
					"AQAAABMHAAAAAAAAKAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwcAAAAAAAATBwAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"left_delete",
					null,
					"AQAAABwHAAAAAAAAHAcAAAAAAAALAAAAX1NPVVJDRV9ESVI",
					"AQAAAAAAAAABAAAAHAcAAAAAAAAnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"lower_case",
					null,
					"AQAAAEsGAAAAAAAAUgYAAAAAAAAHAAAAcmxJbUd1aQ",
					"AQAAAAAAAAABAAAASwYAAAAAAABSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"paste",
					null,
					"AgAAALgGAAAAAAAAvwYAAAAAAAAAAAAAvwYAAAAAAAC/BgAAAAAAAAcAAABybEltR3Vp",
					"AQAAAAAAAAABAAAAuAYAAAAAAAC/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					806,
					1,
					"paste",
					null,
					"AgAAAN0GAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADkBgAAAAAAAAcAAABybEltR3Vp",
					"AQAAAAAAAAABAAAA5AYAAAAAAADdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					813,
					1,
					"paste",
					null,
					"AgAAABUHAAAAAAAAHAcAAAAAAAAAAAAAHAcAAAAAAAAcBwAAAAAAAAcAAABybEltR3Vp",
					"AQAAAAAAAAABAAAAFQcAAAAAAAAcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"paste",
					null,
					"AgAAABUHAAAAAAAAJwcAAAAAAAAAAAAAJwcAAAAAAAAnBwAAAAAAAAcAAABybGltZ3Vp",
					"AQAAAAAAAAABAAAAFQcAAAAAAAAcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"paste",
					null,
					"AgAAAFsIAAAAAAAAbQgAAAAAAAAAAAAAbQgAAAAAAABtCAAAAAAAABIAAABybEltR3VpX1NPVVJDRV9ESVI",
					"AQAAAAAAAAABAAAAWwgAAAAAAABtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"left_delete",
					null,
					"AQAAAPkGAAAAAAAA+QYAAAAAAAAxAAAAbWVzc2FnZShTVEFUVVMgInBhdGggaGVyZSAke3JsaW1ndWlfU09VUkNFX0RJUn0iKQ",
					"AQAAAAAAAAABAAAAKgcAAAAAAAD5BgAAAAAAAAAAAAAAAAAA"
				],
				[
					856,
					1,
					"left_delete",
					null,
					"AQAAAPgGAAAAAAAA+AYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					1,
					"left_delete",
					null,
					"AQAAAPcGAAAAAAAA9wYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/main.cpp",
			"settings":
			{
				"buffer_size": 959,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"reindent",
					null,
					"AQAAAKYCAAAAAAAAqgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACvAgAAAAAAAAAAAACmAgAAAAAAAKYCAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAKsCAAAAAAAAvQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwIAAAAAAACrAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "/*******************************************************************************************\n*\n*   raygui v3.2 - A simple and easy-to-use immediate-mode gui library\n*\n*   DESCRIPTION:\n*\n*   raygui is a tools-dev-focused immediate-mode-gui library based on raylib but also\n*   available as a standalone library, as long as input and drawing functions are provided.\n*\n*   Controls provided:\n*\n*   # Container/separators Controls\n*       - WindowBox     --> StatusBar, Panel\n*       - GroupBox      --> Line\n*       - Line\n*       - Panel         --> StatusBar\n*       - ScrollPanel   --> StatusBar\n*\n*   # Basic Controls\n*       - Label\n*       - Button\n*       - LabelButton   --> Label\n*       - Toggle\n*       - ToggleGroup   --> Toggle\n*       - CheckBox\n*       - ComboBox\n*       - DropdownBox\n*       - TextBox\n*       - TextBoxMulti\n*       - ValueBox      --> TextBox\n*       - Spinner       --> Button, ValueBox\n*       - Slider\n*       - SliderBar     --> Slider\n*       - ProgressBar\n*       - StatusBar\n*       - DummyRec\n*       - Grid\n*\n*   # Advance Controls\n*       - ListView\n*       - ColorPicker   --> ColorPanel, ColorBarHue\n*       - MessageBox    --> Window, Label, Button\n*       - TextInputBox  --> Window, Label, TextBox, Button\n*\n*   It also provides a set of functions for styling the controls based on its properties (size, color).\n*\n*\n*   RAYGUI STYLE (guiStyle):\n*\n*   raygui uses a global data array for all gui style properties (allocated on data segment by default),\n*   when a new style is loaded, it is loaded over the global style... but a default gui style could always be\n*   recovered with GuiLoadStyleDefault() function, that overwrites the current style to the default one\n*\n*   The global style array size is fixed and depends on the number of controls and properties:\n*\n*       static unsigned int guiStyle[RAYGUI_MAX_CONTROLS*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED)];\n*\n*   guiStyle size is by default: 16*(16 + 8) = 384*4 = 1536 bytes = 1.5 KB\n*\n*   Note that the first set of BASE properties (by default guiStyle[0..15]) belong to the generic style\n*   used for all controls, when any of those base values is set, it is automatically populated to all\n*   controls, so, specific control values overwriting generic style should be set after base values.\n*\n*   After the first BASE set we have the EXTENDED properties (by default guiStyle[16..23]), those\n*   properties are actually common to all controls and can not be overwritten individually (like BASE ones)\n*   Some of those properties are: TEXT_SIZE, TEXT_SPACING, LINE_COLOR, BACKGROUND_COLOR\n*\n*   Custom control properties can be defined using the EXTENDED properties for each independent control.\n*\n*   TOOL: rGuiStyler is a visual tool to customize raygui style.\n*\n*\n*   RAYGUI ICONS (guiIcons):\n*\n*   raygui could use a global array containing icons data (allocated on data segment by default),\n*   a custom icons set could be loaded over this array using GuiLoadIcons(), but loaded icons set\n*   must be same RAYGUI_ICON_SIZE and no more than RAYGUI_ICON_MAX_ICONS will be loaded\n*\n*   Every icon is codified in binary form, using 1 bit per pixel, so, every 16x16 icon\n*   requires 8 integers (16*16/32) to be stored in memory.\n*\n*   When the icon is draw, actually one quad per pixel is drawn if the bit for that pixel is set.\n*\n*   The global icons array size is fixed and depends on the number of icons and size:\n*\n*       static unsigned int guiIcons[RAYGUI_ICON_MAX_ICONS*RAYGUI_ICON_DATA_ELEMENTS];\n*\n*   guiIcons size is by default: 256*(16*16/32) = 2048*4 = 8192 bytes = 8 KB\n*\n*   TOOL: rGuiIcons is a visual tool to customize raygui icons.\n*\n*\n*   CONFIGURATION:\n*\n*   #define RAYGUI_IMPLEMENTATION\n*       Generates the implementation of the library into the included file.\n*       If not defined, the library is in header only mode and can be included in other headers\n*       or source files without problems. But only ONE file should hold the implementation.\n*\n*   #define RAYGUI_STANDALONE\n*       Avoid raylib.h header inclusion in this file. Data types defined on raylib are defined\n*       internally in the library and input management and drawing functions must be provided by\n*       the user (check library implementation for further details).\n*\n*   #define RAYGUI_NO_ICONS\n*       Avoid including embedded ricons data (256 icons, 16x16 pixels, 1-bit per pixel, 2KB)\n*\n*   #define RAYGUI_CUSTOM_ICONS\n*       Includes custom ricons.h header defining a set of custom icons,\n*       this file can be generated using rGuiIcons tool\n*\n*\n*   VERSIONS HISTORY:\n*       3.2 (22-May-2022) RENAMED: Some enum values, for unification, avoiding prefixes\n*                         REMOVED: GuiScrollBar(), only internal\n*                         REDESIGNED: GuiPanel() to support text parameter\n*                         REDESIGNED: GuiScrollPanel() to support text parameter\n*                         REDESIGNED: GuiColorPicker() to support text parameter\n*                         REDESIGNED: GuiColorPanel() to support text parameter\n*                         REDESIGNED: GuiColorBarAlpha() to support text parameter\n*                         REDESIGNED: GuiColorBarHue() to support text parameter\n*                         REDESIGNED: GuiTextInputBox() to support password\n*       3.1 (12-Jan-2022) REVIEWED: Default style for consistency (aligned with rGuiLayout v2.5 tool)\n*                         REVIEWED: GuiLoadStyle() to support compressed font atlas image data and unload previous textures\n*                         REVIEWED: External icons usage logic\n*                         REVIEWED: GuiLine() for centered alignment when including text\n*                         RENAMED: Multiple controls properties definitions to prepend RAYGUI_\n*                         RENAMED: RICON_ references to RAYGUI_ICON_ for library consistency\n*                         Projects updated and multiple tweaks\n*       3.0 (04-Nov-2021) Integrated ricons data to avoid external file\n*                         REDESIGNED: GuiTextBoxMulti()\n*                         REMOVED: GuiImageButton*()\n*                         Multiple minor tweaks and bugs corrected\n*       2.9 (17-Mar-2021) REMOVED: Tooltip API\n*       2.8 (03-May-2020) Centralized rectangles drawing to GuiDrawRectangle()\n*       2.7 (20-Feb-2020) ADDED: Possible tooltips API\n*       2.6 (09-Sep-2019) ADDED: GuiTextInputBox()\n*                         REDESIGNED: GuiListView*(), GuiDropdownBox(), GuiSlider*(), GuiProgressBar(), GuiMessageBox()\n*                         REVIEWED: GuiTextBox(), GuiSpinner(), GuiValueBox(), GuiLoadStyle()\n*                         Replaced property INNER_PADDING by TEXT_PADDING, renamed some properties\n*                         ADDED: 8 new custom styles ready to use\n*                         Multiple minor tweaks and bugs corrected\n*       2.5 (28-May-2019) Implemented extended GuiTextBox(), GuiValueBox(), GuiSpinner()\n*       2.3 (29-Apr-2019) ADDED: rIcons auxiliar library and support for it, multiple controls reviewed\n*                         Refactor all controls drawing mechanism to use control state\n*       2.2 (05-Feb-2019) ADDED: GuiScrollBar(), GuiScrollPanel(), reviewed GuiListView(), removed Gui*Ex() controls\n*       2.1 (26-Dec-2018) REDESIGNED: GuiCheckBox(), GuiComboBox(), GuiDropdownBox(), GuiToggleGroup() > Use combined text string\n*                         REDESIGNED: Style system (breaking change)\n*       2.0 (08-Nov-2018) ADDED: Support controls guiLock and custom fonts\n*                         REVIEWED: GuiComboBox(), GuiListView()...\n*       1.9 (09-Oct-2018) REVIEWED: GuiGrid(), GuiTextBox(), GuiTextBoxMulti(), GuiValueBox()...\n*       1.8 (01-May-2018) Lot of rework and redesign to align with rGuiStyler and rGuiLayout\n*       1.5 (21-Jun-2017) Working in an improved styles system\n*       1.4 (15-Jun-2017) Rewritten all GUI functions (removed useless ones)\n*       1.3 (12-Jun-2017) Complete redesign of style system\n*       1.1 (01-Jun-2017) Complete review of the library\n*       1.0 (07-Jun-2016) Converted to header-only by Ramon Santamaria.\n*       0.9 (07-Mar-2016) Reviewed and tested by Albert Martos, Ian Eito, Sergio Martinez and Ramon Santamaria.\n*       0.8 (27-Aug-2015) Initial release. Implemented by Kevin Gato, Daniel Nicolás and Ramon Santamaria.\n*\n*\n*   CONTRIBUTORS:\n*\n*       Ramon Santamaria:   Supervision, review, redesign, update and maintenance\n*       Vlad Adrian:        Complete rewrite of GuiTextBox() to support extended features (2019)\n*       Sergio Martinez:    Review, testing (2015) and redesign of multiple controls (2018)\n*       Adria Arranz:       Testing and Implementation of additional controls (2018)\n*       Jordi Jorba:        Testing and Implementation of additional controls (2018)\n*       Albert Martos:      Review and testing of the library (2015)\n*       Ian Eito:           Review and testing of the library (2015)\n*       Kevin Gato:         Initial implementation of basic components (2014)\n*       Daniel Nicolas:     Initial implementation of basic components (2014)\n*\n*\n*   LICENSE: zlib/libpng\n*\n*   Copyright (c) 2014-2022 Ramon Santamaria (@raysan5)\n*\n*   This software is provided \"as-is\", without any express or implied warranty. In no event\n*   will the authors be held liable for any damages arising from the use of this software.\n*\n*   Permission is granted to anyone to use this software for any purpose, including commercial\n*   applications, and to alter it and redistribute it freely, subject to the following restrictions:\n*\n*     1. The origin of this software must not be misrepresented; you must not claim that you\n*     wrote the original software. If you use this software in a product, an acknowledgment\n*     in the product documentation would be appreciated but is not required.\n*\n*     2. Altered source versions must be plainly marked as such, and must not be misrepresented\n*     as being the original software.\n*\n*     3. This notice may not be removed or altered from any source distribution.\n*\n**********************************************************************************************/\n\n#ifndef RAYGUI_H\n#define RAYGUI_H\n\n#define RAYGUI_VERSION  \"3.2\"\n\n#if !defined(RAYGUI_STANDALONE)\n    #include \"raylib.h\"\n#endif\n\n// Function specifiers in case library is build/used as a shared library (Windows)\n// NOTE: Microsoft specifiers to tell compiler that symbols are imported/exported from a .dll\n#if defined(_WIN32)\n    #if defined(BUILD_LIBTYPE_SHARED)\n        #define RAYGUIAPI __declspec(dllexport)     // We are building the library as a Win32 shared library (.dll)\n    #elif defined(USE_LIBTYPE_SHARED)\n        #define RAYGUIAPI __declspec(dllimport)     // We are using the library as a Win32 shared library (.dll)\n    #endif\n#endif\n\n// Function specifiers definition\n#ifndef RAYGUIAPI\n    #define RAYGUIAPI       // Functions defined as 'extern' by default (implicit specifiers)\n#endif\n\n//----------------------------------------------------------------------------------\n// Defines and Macros\n//----------------------------------------------------------------------------------\n// Allow custom memory allocators\n#ifndef RAYGUI_MALLOC\n    #define RAYGUI_MALLOC(sz)       malloc(sz)\n#endif\n#ifndef RAYGUI_CALLOC\n    #define RAYGUI_CALLOC(n,sz)     calloc(n,sz)\n#endif\n#ifndef RAYGUI_FREE\n    #define RAYGUI_FREE(p)          free(p)\n#endif\n\n// Simple log system to avoid printf() calls if required\n// NOTE: Avoiding those calls, also avoids const strings memory usage\n#define RAYGUI_SUPPORT_LOG_INFO\n#if defined(RAYGUI_SUPPORT_LOG_INFO)\n  #define RAYGUI_LOG(...)           printf(__VA_ARGS__)\n#else\n  #define RAYGUI_LOG(...)\n#endif\n\n//----------------------------------------------------------------------------------\n// Types and Structures Definition\n// NOTE: Some types are required for RAYGUI_STANDALONE usage\n//----------------------------------------------------------------------------------\n#if defined(RAYGUI_STANDALONE)\n    #ifndef __cplusplus\n    // Boolean type\n        #ifndef true\n            typedef enum { false, true } bool;\n        #endif\n    #endif\n\n    // Vector2 type\n    typedef struct Vector2 {\n        float x;\n        float y;\n    } Vector2;\n\n    // Vector3 type                 // -- ConvertHSVtoRGB(), ConvertRGBtoHSV()\n    typedef struct Vector3 {\n        float x;\n        float y;\n        float z;\n    } Vector3;\n\n    // Color type, RGBA (32bit)\n    typedef struct Color {\n        unsigned char r;\n        unsigned char g;\n        unsigned char b;\n        unsigned char a;\n    } Color;\n\n    // Rectangle type\n    typedef struct Rectangle {\n        float x;\n        float y;\n        float width;\n        float height;\n    } Rectangle;\n\n    // TODO: Texture2D type is very coupled to raylib, required by Font type\n    // It should be redesigned to be provided by user\n    typedef struct Texture2D {\n        unsigned int id;        // OpenGL texture id\n        int width;              // Texture base width\n        int height;             // Texture base height\n        int mipmaps;            // Mipmap levels, 1 by default\n        int format;             // Data format (PixelFormat type)\n    } Texture2D;\n\n    // GlyphInfo, font characters glyphs info\n    typedef struct GlyphInfo {\n        int value;              // Character value (Unicode)\n        int offsetX;            // Character offset X when drawing\n        int offsetY;            // Character offset Y when drawing\n        int advanceX;           // Character advance position X\n        Image image;            // Character image data\n    } GlyphInfo;\n\n    // TODO: Font type is very coupled to raylib, mostly required by GuiLoadStyle()\n    // It should be redesigned to be provided by user\n    typedef struct Font {\n        int baseSize;           // Base size (default chars height)\n        int glyphCount;         // Number of characters\n        Texture2D texture;      // Characters texture atlas\n        Rectangle *recs;        // Characters rectangles in texture\n        GlyphInfo *chars;       // Characters info data\n    } Font;\n#endif\n\n// Style property\ntypedef struct GuiStyleProp {\n    unsigned short controlId;\n    unsigned short propertyId;\n    unsigned int propertyValue;\n} GuiStyleProp;\n\n// Gui control state\ntypedef enum {\n    STATE_NORMAL = 0,\n    STATE_FOCUSED,\n    STATE_PRESSED,\n    STATE_DISABLED,\n} GuiState;\n\n// Gui control text alignment\ntypedef enum {\n    TEXT_ALIGN_LEFT = 0,\n    TEXT_ALIGN_CENTER,\n    TEXT_ALIGN_RIGHT,\n} GuiTextAlignment;\n\n// Gui controls\ntypedef enum {\n    // Default -> populates to all controls when set\n    DEFAULT = 0,\n    // Basic controls\n    LABEL,          // Used also for: LABELBUTTON\n    BUTTON,\n    TOGGLE,         // Used also for: TOGGLEGROUP\n    SLIDER,         // Used also for: SLIDERBAR\n    PROGRESSBAR,\n    CHECKBOX,\n    COMBOBOX,\n    DROPDOWNBOX,\n    TEXTBOX,        // Used also for: TEXTBOXMULTI\n    VALUEBOX,\n    SPINNER,        // Uses: BUTTON, VALUEBOX\n    LISTVIEW,\n    COLORPICKER,\n    SCROLLBAR,\n    STATUSBAR\n} GuiControl;\n\n// Gui base properties for every control\n// NOTE: RAYGUI_MAX_PROPS_BASE properties (by default 16 properties)\ntypedef enum {\n    BORDER_COLOR_NORMAL = 0,\n    BASE_COLOR_NORMAL,\n    TEXT_COLOR_NORMAL,\n    BORDER_COLOR_FOCUSED,\n    BASE_COLOR_FOCUSED,\n    TEXT_COLOR_FOCUSED,\n    BORDER_COLOR_PRESSED,\n    BASE_COLOR_PRESSED,\n    TEXT_COLOR_PRESSED,\n    BORDER_COLOR_DISABLED,\n    BASE_COLOR_DISABLED,\n    TEXT_COLOR_DISABLED,\n    BORDER_WIDTH,\n    TEXT_PADDING,\n    TEXT_ALIGNMENT,\n    RESERVED\n} GuiControlProperty;\n\n// Gui extended properties depend on control\n// NOTE: RAYGUI_MAX_PROPS_EXTENDED properties (by default 8 properties)\n//----------------------------------------------------------------------------------\n\n// DEFAULT extended properties\n// NOTE: Those properties are common to all controls or global\ntypedef enum {\n    TEXT_SIZE = 16,             // Text size (glyphs max height)\n    TEXT_SPACING,               // Text spacing between glyphs\n    LINE_COLOR,                 // Line control color\n    BACKGROUND_COLOR,           // Background color\n} GuiDefaultProperty;\n\n// Label\n//typedef enum { } GuiLabelProperty;\n\n// Button/Spinner\n//typedef enum { } GuiButtonProperty;\n\n// Toggle/ToggleGroup\ntypedef enum {\n    GROUP_PADDING = 16,         // ToggleGroup separation between toggles\n} GuiToggleProperty;\n\n// Slider/SliderBar\ntypedef enum {\n    SLIDER_WIDTH = 16,          // Slider size of internal bar\n    SLIDER_PADDING              // Slider/SliderBar internal bar padding\n} GuiSliderProperty;\n\n// ProgressBar\ntypedef enum {\n    PROGRESS_PADDING = 16,      // ProgressBar internal padding\n} GuiProgressBarProperty;\n\n// ScrollBar\ntypedef enum {\n    ARROWS_SIZE = 16,\n    ARROWS_VISIBLE,\n    SCROLL_SLIDER_PADDING,      // (SLIDERBAR, SLIDER_PADDING)\n    SCROLL_SLIDER_SIZE,\n    SCROLL_PADDING,\n    SCROLL_SPEED,\n} GuiScrollBarProperty;\n\n// CheckBox\ntypedef enum {\n    CHECK_PADDING = 16          // CheckBox internal check padding\n} GuiCheckBoxProperty;\n\n// ComboBox\ntypedef enum {\n    COMBO_BUTTON_WIDTH = 16,    // ComboBox right button width\n    COMBO_BUTTON_SPACING        // ComboBox button separation\n} GuiComboBoxProperty;\n\n// DropdownBox\ntypedef enum {\n    ARROW_PADDING = 16,         // DropdownBox arrow separation from border and items\n    DROPDOWN_ITEMS_SPACING      // DropdownBox items separation\n} GuiDropdownBoxProperty;\n\n// TextBox/TextBoxMulti/ValueBox/Spinner\ntypedef enum {\n    TEXT_INNER_PADDING = 16,    // TextBox/TextBoxMulti/ValueBox/Spinner inner text padding\n    TEXT_LINES_SPACING,         // TextBoxMulti lines separation\n} GuiTextBoxProperty;\n\n// Spinner\ntypedef enum {\n    SPIN_BUTTON_WIDTH = 16,     // Spinner left/right buttons width\n    SPIN_BUTTON_SPACING,        // Spinner buttons separation\n} GuiSpinnerProperty;\n\n// ListView\ntypedef enum {\n    LIST_ITEMS_HEIGHT = 16,     // ListView items height\n    LIST_ITEMS_SPACING,         // ListView items separation\n    SCROLLBAR_WIDTH,            // ListView scrollbar size (usually width)\n    SCROLLBAR_SIDE,             // ListView scrollbar side (0-left, 1-right)\n} GuiListViewProperty;\n\n// ColorPicker\ntypedef enum {\n    COLOR_SELECTOR_SIZE = 16,\n    HUEBAR_WIDTH,               // ColorPicker right hue bar width\n    HUEBAR_PADDING,             // ColorPicker right hue bar separation from panel\n    HUEBAR_SELECTOR_HEIGHT,     // ColorPicker right hue bar selector height\n    HUEBAR_SELECTOR_OVERFLOW    // ColorPicker right hue bar selector overflow\n} GuiColorPickerProperty;\n\n#define SCROLLBAR_LEFT_SIDE     0\n#define SCROLLBAR_RIGHT_SIDE    1\n\n//----------------------------------------------------------------------------------\n// Global Variables Definition\n//----------------------------------------------------------------------------------\n// ...\n\n//----------------------------------------------------------------------------------\n// Module Functions Declaration\n//----------------------------------------------------------------------------------\n\n#if defined(__cplusplus)\nextern \"C\" {            // Prevents name mangling of functions\n#endif\n\n// Global gui state control functions\nRAYGUIAPI void GuiEnable(void);                                         // Enable gui controls (global state)\nRAYGUIAPI void GuiDisable(void);                                        // Disable gui controls (global state)\nRAYGUIAPI void GuiLock(void);                                           // Lock gui controls (global state)\nRAYGUIAPI void GuiUnlock(void);                                         // Unlock gui controls (global state)\nRAYGUIAPI bool GuiIsLocked(void);                                       // Check if gui is locked (global state)\nRAYGUIAPI void GuiFade(float alpha);                                    // Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f\nRAYGUIAPI void GuiSetState(int state);                                  // Set gui state (global state)\nRAYGUIAPI int GuiGetState(void);                                        // Get gui state (global state)\n\n// Font set/get functions\nRAYGUIAPI void GuiSetFont(Font font);                                   // Set gui custom font (global state)\nRAYGUIAPI Font GuiGetFont(void);                                        // Get gui custom font (global state)\n\n// Style set/get functions\nRAYGUIAPI void GuiSetStyle(int control, int property, int value);       // Set one style property\nRAYGUIAPI int GuiGetStyle(int control, int property);                   // Get one style property\n\n// Container/separator controls, useful for controls organization\nRAYGUIAPI bool GuiWindowBox(Rectangle bounds, const char *title);                                       // Window Box control, shows a window that can be closed\nRAYGUIAPI void GuiGroupBox(Rectangle bounds, const char *text);                                         // Group Box control with text name\nRAYGUIAPI void GuiLine(Rectangle bounds, const char *text);                                             // Line separator control, could contain text\nRAYGUIAPI void GuiPanel(Rectangle bounds, const char *text);                                            // Panel control, useful to group controls\nRAYGUIAPI Rectangle GuiScrollPanel(Rectangle bounds, const char *text, Rectangle content, Vector2 *scroll); // Scroll Panel control\n\n// Basic controls set\nRAYGUIAPI void GuiLabel(Rectangle bounds, const char *text);                                            // Label control, shows text\nRAYGUIAPI bool GuiButton(Rectangle bounds, const char *text);                                           // Button control, returns true when clicked\nRAYGUIAPI bool GuiLabelButton(Rectangle bounds, const char *text);                                      // Label button control, show true when clicked\nRAYGUIAPI bool GuiToggle(Rectangle bounds, const char *text, bool active);                              // Toggle Button control, returns true when active\nRAYGUIAPI int GuiToggleGroup(Rectangle bounds, const char *text, int active);                           // Toggle Group control, returns active toggle index\nRAYGUIAPI bool GuiCheckBox(Rectangle bounds, const char *text, bool checked);                           // Check Box control, returns true when active\nRAYGUIAPI int GuiComboBox(Rectangle bounds, const char *text, int active);                              // Combo Box control, returns selected item index\nRAYGUIAPI bool GuiDropdownBox(Rectangle bounds, const char *text, int *active, bool editMode);          // Dropdown Box control, returns selected item\nRAYGUIAPI bool GuiSpinner(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool editMode);     // Spinner control, returns selected value\nRAYGUIAPI bool GuiValueBox(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool editMode);    // Value Box control, updates input text with numbers\nRAYGUIAPI bool GuiTextBox(Rectangle bounds, char *text, int textSize, bool editMode);                   // Text Box control, updates input text\nRAYGUIAPI bool GuiTextBoxMulti(Rectangle bounds, char *text, int textSize, bool editMode);              // Text Box control with multiple lines\nRAYGUIAPI float GuiSlider(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue);       // Slider control, returns selected value\nRAYGUIAPI float GuiSliderBar(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue);    // Slider Bar control, returns selected value\nRAYGUIAPI float GuiProgressBar(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue);  // Progress Bar control, shows current progress value\nRAYGUIAPI void GuiStatusBar(Rectangle bounds, const char *text);                                        // Status Bar control, shows info text\nRAYGUIAPI void GuiDummyRec(Rectangle bounds, const char *text);                                         // Dummy control for placeholders\nRAYGUIAPI Vector2 GuiGrid(Rectangle bounds, const char *text, float spacing, int subdivs);              // Grid control, returns mouse cell position\n\n// Advance controls set\nRAYGUIAPI int GuiListView(Rectangle bounds, const char *text, int *scrollIndex, int active);            // List View control, returns selected list item index\nRAYGUIAPI int GuiListViewEx(Rectangle bounds, const char **text, int count, int *focus, int *scrollIndex, int active);      // List View with extended parameters\nRAYGUIAPI int GuiMessageBox(Rectangle bounds, const char *title, const char *message, const char *buttons);                 // Message Box control, displays a message\nRAYGUIAPI int GuiTextInputBox(Rectangle bounds, const char *title, const char *message, const char *buttons, char *text, int textMaxSize, int *secretViewActive);   // Text Input Box control, ask for text, supports secret\nRAYGUIAPI Color GuiColorPicker(Rectangle bounds, const char *text, Color color);                        // Color Picker control (multiple color controls)\nRAYGUIAPI Color GuiColorPanel(Rectangle bounds, const char *text, Color color);                         // Color Panel control\nRAYGUIAPI float GuiColorBarAlpha(Rectangle bounds, const char *text, float alpha);                      // Color Bar Alpha control\nRAYGUIAPI float GuiColorBarHue(Rectangle bounds, const char *text, float value);                        // Color Bar Hue control\n\n// Styles loading functions\nRAYGUIAPI void GuiLoadStyle(const char *fileName);              // Load style file over global style variable (.rgs)\nRAYGUIAPI void GuiLoadStyleDefault(void);                       // Load style default over global style\n\n// Icons functionality\nRAYGUIAPI const char *GuiIconText(int iconId, const char *text); // Get text with icon id prepended (if supported)\n\n#if !defined(RAYGUI_NO_ICONS)\nRAYGUIAPI void GuiDrawIcon(int iconId, int posX, int posY, int pixelSize, Color color);\n\nRAYGUIAPI unsigned int *GuiGetIcons(void);                      // Get full icons data pointer\nRAYGUIAPI unsigned int *GuiGetIconData(int iconId);             // Get icon bit data\nRAYGUIAPI void GuiSetIconData(int iconId, unsigned int *data);  // Set icon bit data\nRAYGUIAPI void GuiSetIconScale(unsigned int scale);             // Set icon scale (1 by default)\n\nRAYGUIAPI void GuiSetIconPixel(int iconId, int x, int y);       // Set icon pixel value\nRAYGUIAPI void GuiClearIconPixel(int iconId, int x, int y);     // Clear icon pixel value\nRAYGUIAPI bool GuiCheckIconPixel(int iconId, int x, int y);     // Check icon pixel value\n\n#if !defined(RAYGUI_CUSTOM_ICONS)\n//----------------------------------------------------------------------------------\n// Icons enumeration\n//----------------------------------------------------------------------------------\ntypedef enum {\n    ICON_NONE                     = 0,\n    ICON_FOLDER_FILE_OPEN         = 1,\n    ICON_FILE_SAVE_CLASSIC        = 2,\n    ICON_FOLDER_OPEN              = 3,\n    ICON_FOLDER_SAVE              = 4,\n    ICON_FILE_OPEN                = 5,\n    ICON_FILE_SAVE                = 6,\n    ICON_FILE_EXPORT              = 7,\n    ICON_FILE_ADD                 = 8,\n    ICON_FILE_DELETE              = 9,\n    ICON_FILETYPE_TEXT            = 10,\n    ICON_FILETYPE_AUDIO           = 11,\n    ICON_FILETYPE_IMAGE           = 12,\n    ICON_FILETYPE_PLAY            = 13,\n    ICON_FILETYPE_VIDEO           = 14,\n    ICON_FILETYPE_INFO            = 15,\n    ICON_FILE_COPY                = 16,\n    ICON_FILE_CUT                 = 17,\n    ICON_FILE_PASTE               = 18,\n    ICON_CURSOR_HAND              = 19,\n    ICON_CURSOR_POINTER           = 20,\n    ICON_CURSOR_CLASSIC           = 21,\n    ICON_PENCIL                   = 22,\n    ICON_PENCIL_BIG               = 23,\n    ICON_BRUSH_CLASSIC            = 24,\n    ICON_BRUSH_PAINTER            = 25,\n    ICON_WATER_DROP               = 26,\n    ICON_COLOR_PICKER             = 27,\n    ICON_RUBBER                   = 28,\n    ICON_COLOR_BUCKET             = 29,\n    ICON_TEXT_T                   = 30,\n    ICON_TEXT_A                   = 31,\n    ICON_SCALE                    = 32,\n    ICON_RESIZE                   = 33,\n    ICON_FILTER_POINT             = 34,\n    ICON_FILTER_BILINEAR          = 35,\n    ICON_CROP                     = 36,\n    ICON_CROP_ALPHA               = 37,\n    ICON_SQUARE_TOGGLE            = 38,\n    ICON_SYMMETRY                 = 39,\n    ICON_SYMMETRY_HORIZONTAL      = 40,\n    ICON_SYMMETRY_VERTICAL        = 41,\n    ICON_LENS                     = 42,\n    ICON_LENS_BIG                 = 43,\n    ICON_EYE_ON                   = 44,\n    ICON_EYE_OFF                  = 45,\n    ICON_FILTER_TOP               = 46,\n    ICON_FILTER                   = 47,\n    ICON_TARGET_POINT             = 48,\n    ICON_TARGET_SMALL             = 49,\n    ICON_TARGET_BIG               = 50,\n    ICON_TARGET_MOVE              = 51,\n    ICON_CURSOR_MOVE              = 52,\n    ICON_CURSOR_SCALE             = 53,\n    ICON_CURSOR_SCALE_RIGHT       = 54,\n    ICON_CURSOR_SCALE_LEFT        = 55,\n    ICON_UNDO                     = 56,\n    ICON_REDO                     = 57,\n    ICON_REREDO                   = 58,\n    ICON_MUTATE                   = 59,\n    ICON_ROTATE                   = 60,\n    ICON_REPEAT                   = 61,\n    ICON_SHUFFLE                  = 62,\n    ICON_EMPTYBOX                 = 63,\n    ICON_TARGET                   = 64,\n    ICON_TARGET_SMALL_FILL        = 65,\n    ICON_TARGET_BIG_FILL          = 66,\n    ICON_TARGET_MOVE_FILL         = 67,\n    ICON_CURSOR_MOVE_FILL         = 68,\n    ICON_CURSOR_SCALE_FILL        = 69,\n    ICON_CURSOR_SCALE_RIGHT_FILL  = 70,\n    ICON_CURSOR_SCALE_LEFT_FILL   = 71,\n    ICON_UNDO_FILL                = 72,\n    ICON_REDO_FILL                = 73,\n    ICON_REREDO_FILL              = 74,\n    ICON_MUTATE_FILL              = 75,\n    ICON_ROTATE_FILL              = 76,\n    ICON_REPEAT_FILL              = 77,\n    ICON_SHUFFLE_FILL             = 78,\n    ICON_EMPTYBOX_SMALL           = 79,\n    ICON_BOX                      = 80,\n    ICON_BOX_TOP                  = 81,\n    ICON_BOX_TOP_RIGHT            = 82,\n    ICON_BOX_RIGHT                = 83,\n    ICON_BOX_BOTTOM_RIGHT         = 84,\n    ICON_BOX_BOTTOM               = 85,\n    ICON_BOX_BOTTOM_LEFT          = 86,\n    ICON_BOX_LEFT                 = 87,\n    ICON_BOX_TOP_LEFT             = 88,\n    ICON_BOX_CENTER               = 89,\n    ICON_BOX_CIRCLE_MASK          = 90,\n    ICON_POT                      = 91,\n    ICON_ALPHA_MULTIPLY           = 92,\n    ICON_ALPHA_CLEAR              = 93,\n    ICON_DITHERING                = 94,\n    ICON_MIPMAPS                  = 95,\n    ICON_BOX_GRID                 = 96,\n    ICON_GRID                     = 97,\n    ICON_BOX_CORNERS_SMALL        = 98,\n    ICON_BOX_CORNERS_BIG          = 99,\n    ICON_FOUR_BOXES               = 100,\n    ICON_GRID_FILL                = 101,\n    ICON_BOX_MULTISIZE            = 102,\n    ICON_ZOOM_SMALL               = 103,\n    ICON_ZOOM_MEDIUM              = 104,\n    ICON_ZOOM_BIG                 = 105,\n    ICON_ZOOM_ALL                 = 106,\n    ICON_ZOOM_CENTER              = 107,\n    ICON_BOX_DOTS_SMALL           = 108,\n    ICON_BOX_DOTS_BIG             = 109,\n    ICON_BOX_CONCENTRIC           = 110,\n    ICON_BOX_GRID_BIG             = 111,\n    ICON_OK_TICK                  = 112,\n    ICON_CROSS                    = 113,\n    ICON_ARROW_LEFT               = 114,\n    ICON_ARROW_RIGHT              = 115,\n    ICON_ARROW_DOWN               = 116,\n    ICON_ARROW_UP                 = 117,\n    ICON_ARROW_LEFT_FILL          = 118,\n    ICON_ARROW_RIGHT_FILL         = 119,\n    ICON_ARROW_DOWN_FILL          = 120,\n    ICON_ARROW_UP_FILL            = 121,\n    ICON_AUDIO                    = 122,\n    ICON_FX                       = 123,\n    ICON_WAVE                     = 124,\n    ICON_WAVE_SINUS               = 125,\n    ICON_WAVE_SQUARE              = 126,\n    ICON_WAVE_TRIANGULAR          = 127,\n    ICON_CROSS_SMALL              = 128,\n    ICON_PLAYER_PREVIOUS          = 129,\n    ICON_PLAYER_PLAY_BACK         = 130,\n    ICON_PLAYER_PLAY              = 131,\n    ICON_PLAYER_PAUSE             = 132,\n    ICON_PLAYER_STOP              = 133,\n    ICON_PLAYER_NEXT              = 134,\n    ICON_PLAYER_RECORD            = 135,\n    ICON_MAGNET                   = 136,\n    ICON_LOCK_CLOSE               = 137,\n    ICON_LOCK_OPEN                = 138,\n    ICON_CLOCK                    = 139,\n    ICON_TOOLS                    = 140,\n    ICON_GEAR                     = 141,\n    ICON_GEAR_BIG                 = 142,\n    ICON_BIN                      = 143,\n    ICON_HAND_POINTER             = 144,\n    ICON_LASER                    = 145,\n    ICON_COIN                     = 146,\n    ICON_EXPLOSION                = 147,\n    ICON_1UP                      = 148,\n    ICON_PLAYER                   = 149,\n    ICON_PLAYER_JUMP              = 150,\n    ICON_KEY                      = 151,\n    ICON_DEMON                    = 152,\n    ICON_TEXT_POPUP               = 153,\n    ICON_GEAR_EX                  = 154,\n    ICON_CRACK                    = 155,\n    ICON_CRACK_POINTS             = 156,\n    ICON_STAR                     = 157,\n    ICON_DOOR                     = 158,\n    ICON_EXIT                     = 159,\n    ICON_MODE_2D                  = 160,\n    ICON_MODE_3D                  = 161,\n    ICON_CUBE                     = 162,\n    ICON_CUBE_FACE_TOP            = 163,\n    ICON_CUBE_FACE_LEFT           = 164,\n    ICON_CUBE_FACE_FRONT          = 165,\n    ICON_CUBE_FACE_BOTTOM         = 166,\n    ICON_CUBE_FACE_RIGHT          = 167,\n    ICON_CUBE_FACE_BACK           = 168,\n    ICON_CAMERA                   = 169,\n    ICON_SPECIAL                  = 170,\n    ICON_LINK_NET                 = 171,\n    ICON_LINK_BOXES               = 172,\n    ICON_LINK_MULTI               = 173,\n    ICON_LINK                     = 174,\n    ICON_LINK_BROKE               = 175,\n    ICON_TEXT_NOTES               = 176,\n    ICON_NOTEBOOK                 = 177,\n    ICON_SUITCASE                 = 178,\n    ICON_SUITCASE_ZIP             = 179,\n    ICON_MAILBOX                  = 180,\n    ICON_MONITOR                  = 181,\n    ICON_PRINTER                  = 182,\n    ICON_PHOTO_CAMERA             = 183,\n    ICON_PHOTO_CAMERA_FLASH       = 184,\n    ICON_HOUSE                    = 185,\n    ICON_HEART                    = 186,\n    ICON_CORNER                   = 187,\n    ICON_VERTICAL_BARS            = 188,\n    ICON_VERTICAL_BARS_FILL       = 189,\n    ICON_LIFE_BARS                = 190,\n    ICON_INFO                     = 191,\n    ICON_CROSSLINE                = 192,\n    ICON_HELP                     = 193,\n    ICON_FILETYPE_ALPHA           = 194,\n    ICON_FILETYPE_HOME            = 195,\n    ICON_LAYERS_VISIBLE           = 196,\n    ICON_LAYERS                   = 197,\n    ICON_WINDOW                   = 198,\n    ICON_HIDPI                    = 199,\n    ICON_FILETYPE_BINARY          = 200,\n    ICON_HEX                      = 201,\n    ICON_SHIELD                   = 202,\n    ICON_FILE_NEW                 = 203,\n    ICON_FOLDER_ADD               = 204,\n    ICON_ALARM                    = 205,\n    ICON_206                      = 206,\n    ICON_207                      = 207,\n    ICON_208                      = 208,\n    ICON_209                      = 209,\n    ICON_210                      = 210,\n    ICON_211                      = 211,\n    ICON_212                      = 212,\n    ICON_213                      = 213,\n    ICON_214                      = 214,\n    ICON_215                      = 215,\n    ICON_216                      = 216,\n    ICON_217                      = 217,\n    ICON_218                      = 218,\n    ICON_219                      = 219,\n    ICON_220                      = 220,\n    ICON_221                      = 221,\n    ICON_222                      = 222,\n    ICON_223                      = 223,\n    ICON_224                      = 224,\n    ICON_225                      = 225,\n    ICON_226                      = 226,\n    ICON_227                      = 227,\n    ICON_228                      = 228,\n    ICON_229                      = 229,\n    ICON_230                      = 230,\n    ICON_231                      = 231,\n    ICON_232                      = 232,\n    ICON_233                      = 233,\n    ICON_234                      = 234,\n    ICON_235                      = 235,\n    ICON_236                      = 236,\n    ICON_237                      = 237,\n    ICON_238                      = 238,\n    ICON_239                      = 239,\n    ICON_240                      = 240,\n    ICON_241                      = 241,\n    ICON_242                      = 242,\n    ICON_243                      = 243,\n    ICON_244                      = 244,\n    ICON_245                      = 245,\n    ICON_246                      = 246,\n    ICON_247                      = 247,\n    ICON_248                      = 248,\n    ICON_249                      = 249,\n    ICON_250                      = 250,\n    ICON_251                      = 251,\n    ICON_252                      = 252,\n    ICON_253                      = 253,\n    ICON_254                      = 254,\n    ICON_255                      = 255,\n} GuiIconName;\n#endif\n\n#endif\n\n#if defined(__cplusplus)\n}            // Prevents name mangling of functions\n#endif\n\n#endif // RAYGUI_H\n\n/***********************************************************************************\n*\n*   RAYGUI IMPLEMENTATION\n*\n************************************************************************************/\n\n#if defined(RAYGUI_IMPLEMENTATION)\n\n#include <stdio.h>              // Required for: FILE, fopen(), fclose(), fprintf(), feof(), fscanf(), vsprintf() [GuiLoadStyle(), GuiLoadIcons()]\n#include <stdlib.h>             // Required for: malloc(), calloc(), free() [GuiLoadStyle(), GuiLoadIcons()]\n#include <string.h>             // Required for: strlen() [GuiTextBox(), GuiTextBoxMulti(), GuiValueBox()], memset(), memcpy()\n#include <stdarg.h>             // Required for: va_list, va_start(), vfprintf(), va_end() [TextFormat()]\n#include <math.h>               // Required for: roundf() [GuiColorPicker()]\n\n#ifdef __cplusplus\n    #define RAYGUI_CLITERAL(name) name\n#else\n    #define RAYGUI_CLITERAL(name) (name)\n#endif\n\n#if !defined(RAYGUI_NO_ICONS) && !defined(RAYGUI_CUSTOM_ICONS)\n\n// Embedded icons, no external file provided\n#define RAYGUI_ICON_SIZE               16          // Size of icons in pixels (squared)\n#define RAYGUI_ICON_MAX_ICONS         256          // Maximum number of icons\n#define RAYGUI_ICON_MAX_NAME_LENGTH    32          // Maximum length of icon name id\n\n// Icons data is defined by bit array (every bit represents one pixel)\n// Those arrays are stored as unsigned int data arrays, so,\n// every array element defines 32 pixels (bits) of information\n// One icon is defined by 8 int, (8 int * 32 bit = 256 bit = 16*16 pixels)\n// NOTE: Number of elemens depend on RAYGUI_ICON_SIZE (by default 16x16 pixels)\n#define RAYGUI_ICON_DATA_ELEMENTS   (RAYGUI_ICON_SIZE*RAYGUI_ICON_SIZE/32)\n\n//----------------------------------------------------------------------------------\n// Icons data for all gui possible icons (allocated on data segment by default)\n//\n// NOTE 1: Every icon is codified in binary form, using 1 bit per pixel, so,\n// every 16x16 icon requires 8 integers (16*16/32) to be stored\n//\n// NOTE 2: A different icon set could be loaded over this array using GuiLoadIcons(),\n// but loaded icons set must be same RAYGUI_ICON_SIZE and no more than RAYGUI_ICON_MAX_ICONS\n//\n// guiIcons size is by default: 256*(16*16/32) = 2048*4 = 8192 bytes = 8 KB\n//----------------------------------------------------------------------------------\nstatic unsigned int guiIcons[RAYGUI_ICON_MAX_ICONS*RAYGUI_ICON_DATA_ELEMENTS] = {\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_NONE\n    0x3ff80000, 0x2f082008, 0x2042207e, 0x40027fc2, 0x40024002, 0x40024002, 0x40024002, 0x00007ffe,     // ICON_FOLDER_FILE_OPEN\n    0x3ffe0000, 0x44226422, 0x400247e2, 0x5ffa4002, 0x57ea500a, 0x500a500a, 0x40025ffa, 0x00007ffe,     // ICON_FILE_SAVE_CLASSIC\n    0x00000000, 0x0042007e, 0x40027fc2, 0x40024002, 0x41024002, 0x44424282, 0x793e4102, 0x00000100,     // ICON_FOLDER_OPEN\n    0x00000000, 0x0042007e, 0x40027fc2, 0x40024002, 0x41024102, 0x44424102, 0x793e4282, 0x00000000,     // ICON_FOLDER_SAVE\n    0x3ff00000, 0x201c2010, 0x20042004, 0x21042004, 0x24442284, 0x21042104, 0x20042104, 0x00003ffc,     // ICON_FILE_OPEN\n    0x3ff00000, 0x201c2010, 0x20042004, 0x21042004, 0x21042104, 0x22842444, 0x20042104, 0x00003ffc,     // ICON_FILE_SAVE\n    0x3ff00000, 0x201c2010, 0x00042004, 0x20041004, 0x20844784, 0x00841384, 0x20042784, 0x00003ffc,     // ICON_FILE_EXPORT\n    0x3ff00000, 0x201c2010, 0x20042004, 0x20042004, 0x22042204, 0x22042f84, 0x20042204, 0x00003ffc,     // ICON_FILE_ADD\n    0x3ff00000, 0x201c2010, 0x20042004, 0x20042004, 0x25042884, 0x25042204, 0x20042884, 0x00003ffc,     // ICON_FILE_DELETE\n    0x3ff00000, 0x201c2010, 0x20042004, 0x20042ff4, 0x20042ff4, 0x20042ff4, 0x20042004, 0x00003ffc,     // ICON_FILETYPE_TEXT\n    0x3ff00000, 0x201c2010, 0x27042004, 0x244424c4, 0x26442444, 0x20642664, 0x20042004, 0x00003ffc,     // ICON_FILETYPE_AUDIO\n    0x3ff00000, 0x201c2010, 0x26042604, 0x20042004, 0x35442884, 0x2414222c, 0x20042004, 0x00003ffc,     // ICON_FILETYPE_IMAGE\n    0x3ff00000, 0x201c2010, 0x20c42004, 0x22442144, 0x22442444, 0x20c42144, 0x20042004, 0x00003ffc,     // ICON_FILETYPE_PLAY\n    0x3ff00000, 0x3ffc2ff0, 0x3f3c2ff4, 0x3dbc2eb4, 0x3dbc2bb4, 0x3f3c2eb4, 0x3ffc2ff4, 0x00002ff4,     // ICON_FILETYPE_VIDEO\n    0x3ff00000, 0x201c2010, 0x21842184, 0x21842004, 0x21842184, 0x21842184, 0x20042184, 0x00003ffc,     // ICON_FILETYPE_INFO\n    0x0ff00000, 0x381c0810, 0x28042804, 0x28042804, 0x28042804, 0x28042804, 0x20102ffc, 0x00003ff0,     // ICON_FILE_COPY\n    0x00000000, 0x701c0000, 0x079c1e14, 0x55a000f0, 0x079c00f0, 0x701c1e14, 0x00000000, 0x00000000,     // ICON_FILE_CUT\n    0x01c00000, 0x13e41bec, 0x3f841004, 0x204420c4, 0x20442044, 0x20442044, 0x207c2044, 0x00003fc0,     // ICON_FILE_PASTE\n    0x00000000, 0x3aa00fe0, 0x2abc2aa0, 0x2aa42aa4, 0x20042aa4, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_CURSOR_HAND\n    0x00000000, 0x003c000c, 0x030800c8, 0x30100c10, 0x10202020, 0x04400840, 0x01800280, 0x00000000,     // ICON_CURSOR_POINTER\n    0x00000000, 0x00180000, 0x01f00078, 0x03e007f0, 0x07c003e0, 0x04000e40, 0x00000000, 0x00000000,     // ICON_CURSOR_CLASSIC\n    0x00000000, 0x04000000, 0x11000a00, 0x04400a80, 0x01100220, 0x00580088, 0x00000038, 0x00000000,     // ICON_PENCIL\n    0x04000000, 0x15000a00, 0x50402880, 0x14102820, 0x05040a08, 0x015c028c, 0x007c00bc, 0x00000000,     // ICON_PENCIL_BIG\n    0x01c00000, 0x01400140, 0x01400140, 0x0ff80140, 0x0ff80808, 0x0aa80808, 0x0aa80aa8, 0x00000ff8,     // ICON_BRUSH_CLASSIC\n    0x1ffc0000, 0x5ffc7ffe, 0x40004000, 0x00807f80, 0x01c001c0, 0x01c001c0, 0x01c001c0, 0x00000080,     // ICON_BRUSH_PAINTER\n    0x00000000, 0x00800000, 0x01c00080, 0x03e001c0, 0x07f003e0, 0x036006f0, 0x000001c0, 0x00000000,     // ICON_WATER_DROP\n    0x00000000, 0x3e003800, 0x1f803f80, 0x0c201e40, 0x02080c10, 0x00840104, 0x00380044, 0x00000000,     // ICON_COLOR_PICKER\n    0x00000000, 0x07800300, 0x1fe00fc0, 0x3f883fd0, 0x0e021f04, 0x02040402, 0x00f00108, 0x00000000,     // ICON_RUBBER\n    0x00c00000, 0x02800140, 0x08200440, 0x20081010, 0x2ffe3004, 0x03f807fc, 0x00e001f0, 0x00000040,     // ICON_COLOR_BUCKET\n    0x00000000, 0x21843ffc, 0x01800180, 0x01800180, 0x01800180, 0x01800180, 0x03c00180, 0x00000000,     // ICON_TEXT_T\n    0x00800000, 0x01400180, 0x06200340, 0x0c100620, 0x1ff80c10, 0x380c1808, 0x70067004, 0x0000f80f,     // ICON_TEXT_A\n    0x78000000, 0x50004000, 0x00004800, 0x03c003c0, 0x03c003c0, 0x00100000, 0x0002000a, 0x0000000e,     // ICON_SCALE\n    0x75560000, 0x5e004002, 0x54001002, 0x41001202, 0x408200fe, 0x40820082, 0x40820082, 0x00006afe,     // ICON_RESIZE\n    0x00000000, 0x3f003f00, 0x3f003f00, 0x3f003f00, 0x00400080, 0x001c0020, 0x001c001c, 0x00000000,     // ICON_FILTER_POINT\n    0x6d800000, 0x00004080, 0x40804080, 0x40800000, 0x00406d80, 0x001c0020, 0x001c001c, 0x00000000,     // ICON_FILTER_BILINEAR\n    0x40080000, 0x1ffe2008, 0x14081008, 0x11081208, 0x10481088, 0x10081028, 0x10047ff8, 0x00001002,     // ICON_CROP\n    0x00100000, 0x3ffc0010, 0x2ab03550, 0x22b02550, 0x20b02150, 0x20302050, 0x2000fff0, 0x00002000,     // ICON_CROP_ALPHA\n    0x40000000, 0x1ff82000, 0x04082808, 0x01082208, 0x00482088, 0x00182028, 0x35542008, 0x00000002,     // ICON_SQUARE_TOGGLE\n    0x00000000, 0x02800280, 0x06c006c0, 0x0ea00ee0, 0x1e901eb0, 0x3e883e98, 0x7efc7e8c, 0x00000000,     // ICON_SYMMETRY\n    0x01000000, 0x05600100, 0x1d480d50, 0x7d423d44, 0x3d447d42, 0x0d501d48, 0x01000560, 0x00000100,     // ICON_SYMMETRY_HORIZONTAL\n    0x01800000, 0x04200240, 0x10080810, 0x00001ff8, 0x00007ffe, 0x0ff01ff8, 0x03c007e0, 0x00000180,     // ICON_SYMMETRY_VERTICAL\n    0x00000000, 0x010800f0, 0x02040204, 0x02040204, 0x07f00308, 0x1c000e00, 0x30003800, 0x00000000,     // ICON_LENS\n    0x00000000, 0x061803f0, 0x08240c0c, 0x08040814, 0x0c0c0804, 0x23f01618, 0x18002400, 0x00000000,     // ICON_LENS_BIG\n    0x00000000, 0x00000000, 0x1c7007c0, 0x638e3398, 0x1c703398, 0x000007c0, 0x00000000, 0x00000000,     // ICON_EYE_ON\n    0x00000000, 0x10002000, 0x04700fc0, 0x610e3218, 0x1c703098, 0x001007a0, 0x00000008, 0x00000000,     // ICON_EYE_OFF\n    0x00000000, 0x00007ffc, 0x40047ffc, 0x10102008, 0x04400820, 0x02800280, 0x02800280, 0x00000100,     // ICON_FILTER_TOP\n    0x00000000, 0x40027ffe, 0x10082004, 0x04200810, 0x02400240, 0x02400240, 0x01400240, 0x000000c0,     // ICON_FILTER\n    0x00800000, 0x00800080, 0x00000080, 0x3c9e0000, 0x00000000, 0x00800080, 0x00800080, 0x00000000,     // ICON_TARGET_POINT\n    0x00800000, 0x00800080, 0x00800080, 0x3f7e01c0, 0x008001c0, 0x00800080, 0x00800080, 0x00000000,     // ICON_TARGET_SMALL\n    0x00800000, 0x00800080, 0x03e00080, 0x3e3e0220, 0x03e00220, 0x00800080, 0x00800080, 0x00000000,     // ICON_TARGET_BIG\n    0x01000000, 0x04400280, 0x01000100, 0x43842008, 0x43849ab2, 0x01002008, 0x04400100, 0x01000280,     // ICON_TARGET_MOVE\n    0x01000000, 0x04400280, 0x01000100, 0x41042108, 0x41049ff2, 0x01002108, 0x04400100, 0x01000280,     // ICON_CURSOR_MOVE\n    0x781e0000, 0x500a4002, 0x04204812, 0x00000240, 0x02400000, 0x48120420, 0x4002500a, 0x0000781e,     // ICON_CURSOR_SCALE\n    0x00000000, 0x20003c00, 0x24002800, 0x01000200, 0x00400080, 0x00140024, 0x003c0004, 0x00000000,     // ICON_CURSOR_SCALE_RIGHT\n    0x00000000, 0x0004003c, 0x00240014, 0x00800040, 0x02000100, 0x28002400, 0x3c002000, 0x00000000,     // ICON_CURSOR_SCALE_LEFT\n    0x00000000, 0x00100020, 0x10101fc8, 0x10001020, 0x10001000, 0x10001000, 0x00001fc0, 0x00000000,     // ICON_UNDO\n    0x00000000, 0x08000400, 0x080813f8, 0x00080408, 0x00080008, 0x00080008, 0x000003f8, 0x00000000,     // ICON_REDO\n    0x00000000, 0x3ffc0000, 0x20042004, 0x20002000, 0x20402000, 0x3f902020, 0x00400020, 0x00000000,     // ICON_REREDO\n    0x00000000, 0x3ffc0000, 0x20042004, 0x27fc2004, 0x20202000, 0x3fc82010, 0x00200010, 0x00000000,     // ICON_MUTATE\n    0x00000000, 0x0ff00000, 0x10081818, 0x11801008, 0x10001180, 0x18101020, 0x00100fc8, 0x00000020,     // ICON_ROTATE\n    0x00000000, 0x04000200, 0x240429fc, 0x20042204, 0x20442004, 0x3f942024, 0x00400020, 0x00000000,     // ICON_REPEAT\n    0x00000000, 0x20001000, 0x22104c0e, 0x00801120, 0x11200040, 0x4c0e2210, 0x10002000, 0x00000000,     // ICON_SHUFFLE\n    0x7ffe0000, 0x50024002, 0x44024802, 0x41024202, 0x40424082, 0x40124022, 0x4002400a, 0x00007ffe,     // ICON_EMPTYBOX\n    0x00800000, 0x03e00080, 0x08080490, 0x3c9e0808, 0x08080808, 0x03e00490, 0x00800080, 0x00000000,     // ICON_TARGET\n    0x00800000, 0x00800080, 0x00800080, 0x3ffe01c0, 0x008001c0, 0x00800080, 0x00800080, 0x00000000,     // ICON_TARGET_SMALL_FILL\n    0x00800000, 0x00800080, 0x03e00080, 0x3ffe03e0, 0x03e003e0, 0x00800080, 0x00800080, 0x00000000,     // ICON_TARGET_BIG_FILL\n    0x01000000, 0x07c00380, 0x01000100, 0x638c2008, 0x638cfbbe, 0x01002008, 0x07c00100, 0x01000380,     // ICON_TARGET_MOVE_FILL\n    0x01000000, 0x07c00380, 0x01000100, 0x610c2108, 0x610cfffe, 0x01002108, 0x07c00100, 0x01000380,     // ICON_CURSOR_MOVE_FILL\n    0x781e0000, 0x6006700e, 0x04204812, 0x00000240, 0x02400000, 0x48120420, 0x700e6006, 0x0000781e,     // ICON_CURSOR_SCALE_FILL\n    0x00000000, 0x38003c00, 0x24003000, 0x01000200, 0x00400080, 0x000c0024, 0x003c001c, 0x00000000,     // ICON_CURSOR_SCALE_RIGHT_FILL\n    0x00000000, 0x001c003c, 0x0024000c, 0x00800040, 0x02000100, 0x30002400, 0x3c003800, 0x00000000,     // ICON_CURSOR_SCALE_LEFT_FILL\n    0x00000000, 0x00300020, 0x10301ff8, 0x10001020, 0x10001000, 0x10001000, 0x00001fc0, 0x00000000,     // ICON_UNDO_FILL\n    0x00000000, 0x0c000400, 0x0c081ff8, 0x00080408, 0x00080008, 0x00080008, 0x000003f8, 0x00000000,     // ICON_REDO_FILL\n    0x00000000, 0x3ffc0000, 0x20042004, 0x20002000, 0x20402000, 0x3ff02060, 0x00400060, 0x00000000,     // ICON_REREDO_FILL\n    0x00000000, 0x3ffc0000, 0x20042004, 0x27fc2004, 0x20202000, 0x3ff82030, 0x00200030, 0x00000000,     // ICON_MUTATE_FILL\n    0x00000000, 0x0ff00000, 0x10081818, 0x11801008, 0x10001180, 0x18301020, 0x00300ff8, 0x00000020,     // ICON_ROTATE_FILL\n    0x00000000, 0x06000200, 0x26042ffc, 0x20042204, 0x20442004, 0x3ff42064, 0x00400060, 0x00000000,     // ICON_REPEAT_FILL\n    0x00000000, 0x30001000, 0x32107c0e, 0x00801120, 0x11200040, 0x7c0e3210, 0x10003000, 0x00000000,     // ICON_SHUFFLE_FILL\n    0x00000000, 0x30043ffc, 0x24042804, 0x21042204, 0x20442084, 0x20142024, 0x3ffc200c, 0x00000000,     // ICON_EMPTYBOX_SMALL\n    0x00000000, 0x20043ffc, 0x20042004, 0x20042004, 0x20042004, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX\n    0x00000000, 0x23c43ffc, 0x23c423c4, 0x200423c4, 0x20042004, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_TOP\n    0x00000000, 0x3e043ffc, 0x3e043e04, 0x20043e04, 0x20042004, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_TOP_RIGHT\n    0x00000000, 0x20043ffc, 0x20042004, 0x3e043e04, 0x3e043e04, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_RIGHT\n    0x00000000, 0x20043ffc, 0x20042004, 0x20042004, 0x3e042004, 0x3e043e04, 0x3ffc3e04, 0x00000000,     // ICON_BOX_BOTTOM_RIGHT\n    0x00000000, 0x20043ffc, 0x20042004, 0x20042004, 0x23c42004, 0x23c423c4, 0x3ffc23c4, 0x00000000,     // ICON_BOX_BOTTOM\n    0x00000000, 0x20043ffc, 0x20042004, 0x20042004, 0x207c2004, 0x207c207c, 0x3ffc207c, 0x00000000,     // ICON_BOX_BOTTOM_LEFT\n    0x00000000, 0x20043ffc, 0x20042004, 0x207c207c, 0x207c207c, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_LEFT\n    0x00000000, 0x207c3ffc, 0x207c207c, 0x2004207c, 0x20042004, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_TOP_LEFT\n    0x00000000, 0x20043ffc, 0x20042004, 0x23c423c4, 0x23c423c4, 0x20042004, 0x3ffc2004, 0x00000000,     // ICON_BOX_CENTER\n    0x7ffe0000, 0x40024002, 0x47e24182, 0x4ff247e2, 0x47e24ff2, 0x418247e2, 0x40024002, 0x00007ffe,     // ICON_BOX_CIRCLE_MASK\n    0x7fff0000, 0x40014001, 0x40014001, 0x49555ddd, 0x4945495d, 0x400149c5, 0x40014001, 0x00007fff,     // ICON_POT\n    0x7ffe0000, 0x53327332, 0x44ce4cce, 0x41324332, 0x404e40ce, 0x48125432, 0x4006540e, 0x00007ffe,     // ICON_ALPHA_MULTIPLY\n    0x7ffe0000, 0x53327332, 0x44ce4cce, 0x41324332, 0x5c4e40ce, 0x44124432, 0x40065c0e, 0x00007ffe,     // ICON_ALPHA_CLEAR\n    0x7ffe0000, 0x42fe417e, 0x42fe417e, 0x42fe417e, 0x42fe417e, 0x42fe417e, 0x42fe417e, 0x00007ffe,     // ICON_DITHERING\n    0x07fe0000, 0x1ffa0002, 0x7fea000a, 0x402a402a, 0x5b2a512a, 0x5128552a, 0x40205128, 0x00007fe0,     // ICON_MIPMAPS\n    0x00000000, 0x1ff80000, 0x12481248, 0x12481ff8, 0x1ff81248, 0x12481248, 0x00001ff8, 0x00000000,     // ICON_BOX_GRID\n    0x12480000, 0x7ffe1248, 0x12481248, 0x12487ffe, 0x7ffe1248, 0x12481248, 0x12487ffe, 0x00001248,     // ICON_GRID\n    0x00000000, 0x1c380000, 0x1c3817e8, 0x08100810, 0x08100810, 0x17e81c38, 0x00001c38, 0x00000000,     // ICON_BOX_CORNERS_SMALL\n    0x700e0000, 0x700e5ffa, 0x20042004, 0x20042004, 0x20042004, 0x20042004, 0x5ffa700e, 0x0000700e,     // ICON_BOX_CORNERS_BIG\n    0x3f7e0000, 0x21422142, 0x21422142, 0x00003f7e, 0x21423f7e, 0x21422142, 0x3f7e2142, 0x00000000,     // ICON_FOUR_BOXES\n    0x00000000, 0x3bb80000, 0x3bb83bb8, 0x3bb80000, 0x3bb83bb8, 0x3bb80000, 0x3bb83bb8, 0x00000000,     // ICON_GRID_FILL\n    0x7ffe0000, 0x7ffe7ffe, 0x77fe7000, 0x77fe77fe, 0x777e7700, 0x777e777e, 0x777e777e, 0x0000777e,     // ICON_BOX_MULTISIZE\n    0x781e0000, 0x40024002, 0x00004002, 0x01800000, 0x00000180, 0x40020000, 0x40024002, 0x0000781e,     // ICON_ZOOM_SMALL\n    0x781e0000, 0x40024002, 0x00004002, 0x03c003c0, 0x03c003c0, 0x40020000, 0x40024002, 0x0000781e,     // ICON_ZOOM_MEDIUM\n    0x781e0000, 0x40024002, 0x07e04002, 0x07e007e0, 0x07e007e0, 0x400207e0, 0x40024002, 0x0000781e,     // ICON_ZOOM_BIG\n    0x781e0000, 0x5ffa4002, 0x1ff85ffa, 0x1ff81ff8, 0x1ff81ff8, 0x5ffa1ff8, 0x40025ffa, 0x0000781e,     // ICON_ZOOM_ALL\n    0x00000000, 0x2004381c, 0x00002004, 0x00000000, 0x00000000, 0x20040000, 0x381c2004, 0x00000000,     // ICON_ZOOM_CENTER\n    0x00000000, 0x1db80000, 0x10081008, 0x10080000, 0x00001008, 0x10081008, 0x00001db8, 0x00000000,     // ICON_BOX_DOTS_SMALL\n    0x35560000, 0x00002002, 0x00002002, 0x00002002, 0x00002002, 0x00002002, 0x35562002, 0x00000000,     // ICON_BOX_DOTS_BIG\n    0x7ffe0000, 0x40024002, 0x48124ff2, 0x49924812, 0x48124992, 0x4ff24812, 0x40024002, 0x00007ffe,     // ICON_BOX_CONCENTRIC\n    0x00000000, 0x10841ffc, 0x10841084, 0x1ffc1084, 0x10841084, 0x10841084, 0x00001ffc, 0x00000000,     // ICON_BOX_GRID_BIG\n    0x00000000, 0x00000000, 0x10000000, 0x04000800, 0x01040200, 0x00500088, 0x00000020, 0x00000000,     // ICON_OK_TICK\n    0x00000000, 0x10080000, 0x04200810, 0x01800240, 0x02400180, 0x08100420, 0x00001008, 0x00000000,     // ICON_CROSS\n    0x00000000, 0x02000000, 0x00800100, 0x00200040, 0x00200010, 0x00800040, 0x02000100, 0x00000000,     // ICON_ARROW_LEFT\n    0x00000000, 0x00400000, 0x01000080, 0x04000200, 0x04000800, 0x01000200, 0x00400080, 0x00000000,     // ICON_ARROW_RIGHT\n    0x00000000, 0x00000000, 0x00000000, 0x08081004, 0x02200410, 0x00800140, 0x00000000, 0x00000000,     // ICON_ARROW_DOWN\n    0x00000000, 0x00000000, 0x01400080, 0x04100220, 0x10040808, 0x00000000, 0x00000000, 0x00000000,     // ICON_ARROW_UP\n    0x00000000, 0x02000000, 0x03800300, 0x03e003c0, 0x03e003f0, 0x038003c0, 0x02000300, 0x00000000,     // ICON_ARROW_LEFT_FILL\n    0x00000000, 0x00400000, 0x01c000c0, 0x07c003c0, 0x07c00fc0, 0x01c003c0, 0x004000c0, 0x00000000,     // ICON_ARROW_RIGHT_FILL\n    0x00000000, 0x00000000, 0x00000000, 0x0ff81ffc, 0x03e007f0, 0x008001c0, 0x00000000, 0x00000000,     // ICON_ARROW_DOWN_FILL\n    0x00000000, 0x00000000, 0x01c00080, 0x07f003e0, 0x1ffc0ff8, 0x00000000, 0x00000000, 0x00000000,     // ICON_ARROW_UP_FILL\n    0x00000000, 0x18a008c0, 0x32881290, 0x24822686, 0x26862482, 0x12903288, 0x08c018a0, 0x00000000,     // ICON_AUDIO\n    0x00000000, 0x04800780, 0x004000c0, 0x662000f0, 0x08103c30, 0x130a0e18, 0x0000318e, 0x00000000,     // ICON_FX\n    0x00000000, 0x00800000, 0x08880888, 0x2aaa0a8a, 0x0a8a2aaa, 0x08880888, 0x00000080, 0x00000000,     // ICON_WAVE\n    0x00000000, 0x00600000, 0x01080090, 0x02040108, 0x42044204, 0x24022402, 0x00001800, 0x00000000,     // ICON_WAVE_SINUS\n    0x00000000, 0x07f80000, 0x04080408, 0x04080408, 0x04080408, 0x7c0e0408, 0x00000000, 0x00000000,     // ICON_WAVE_SQUARE\n    0x00000000, 0x00000000, 0x00a00040, 0x22084110, 0x08021404, 0x00000000, 0x00000000, 0x00000000,     // ICON_WAVE_TRIANGULAR\n    0x00000000, 0x00000000, 0x04200000, 0x01800240, 0x02400180, 0x00000420, 0x00000000, 0x00000000,     // ICON_CROSS_SMALL\n    0x00000000, 0x18380000, 0x12281428, 0x10a81128, 0x112810a8, 0x14281228, 0x00001838, 0x00000000,     // ICON_PLAYER_PREVIOUS\n    0x00000000, 0x18000000, 0x11801600, 0x10181060, 0x10601018, 0x16001180, 0x00001800, 0x00000000,     // ICON_PLAYER_PLAY_BACK\n    0x00000000, 0x00180000, 0x01880068, 0x18080608, 0x06081808, 0x00680188, 0x00000018, 0x00000000,     // ICON_PLAYER_PLAY\n    0x00000000, 0x1e780000, 0x12481248, 0x12481248, 0x12481248, 0x12481248, 0x00001e78, 0x00000000,     // ICON_PLAYER_PAUSE\n    0x00000000, 0x1ff80000, 0x10081008, 0x10081008, 0x10081008, 0x10081008, 0x00001ff8, 0x00000000,     // ICON_PLAYER_STOP\n    0x00000000, 0x1c180000, 0x14481428, 0x15081488, 0x14881508, 0x14281448, 0x00001c18, 0x00000000,     // ICON_PLAYER_NEXT\n    0x00000000, 0x03c00000, 0x08100420, 0x10081008, 0x10081008, 0x04200810, 0x000003c0, 0x00000000,     // ICON_PLAYER_RECORD\n    0x00000000, 0x0c3007e0, 0x13c81818, 0x14281668, 0x14281428, 0x1c381c38, 0x08102244, 0x00000000,     // ICON_MAGNET\n    0x07c00000, 0x08200820, 0x3ff80820, 0x23882008, 0x21082388, 0x20082108, 0x1ff02008, 0x00000000,     // ICON_LOCK_CLOSE\n    0x07c00000, 0x08000800, 0x3ff80800, 0x23882008, 0x21082388, 0x20082108, 0x1ff02008, 0x00000000,     // ICON_LOCK_OPEN\n    0x01c00000, 0x0c180770, 0x3086188c, 0x60832082, 0x60034781, 0x30062002, 0x0c18180c, 0x01c00770,     // ICON_CLOCK\n    0x0a200000, 0x1b201b20, 0x04200e20, 0x04200420, 0x04700420, 0x0e700e70, 0x0e700e70, 0x04200e70,     // ICON_TOOLS\n    0x01800000, 0x3bdc318c, 0x0ff01ff8, 0x7c3e1e78, 0x1e787c3e, 0x1ff80ff0, 0x318c3bdc, 0x00000180,     // ICON_GEAR\n    0x01800000, 0x3ffc318c, 0x1c381ff8, 0x781e1818, 0x1818781e, 0x1ff81c38, 0x318c3ffc, 0x00000180,     // ICON_GEAR_BIG\n    0x00000000, 0x08080ff8, 0x08081ffc, 0x0aa80aa8, 0x0aa80aa8, 0x0aa80aa8, 0x08080aa8, 0x00000ff8,     // ICON_BIN\n    0x00000000, 0x00000000, 0x20043ffc, 0x08043f84, 0x04040f84, 0x04040784, 0x000007fc, 0x00000000,     // ICON_HAND_POINTER\n    0x00000000, 0x24400400, 0x00001480, 0x6efe0e00, 0x00000e00, 0x24401480, 0x00000400, 0x00000000,     // ICON_LASER\n    0x00000000, 0x03c00000, 0x08300460, 0x11181118, 0x11181118, 0x04600830, 0x000003c0, 0x00000000,     // ICON_COIN\n    0x00000000, 0x10880080, 0x06c00810, 0x366c07e0, 0x07e00240, 0x00001768, 0x04200240, 0x00000000,     // ICON_EXPLOSION\n    0x00000000, 0x3d280000, 0x2528252c, 0x3d282528, 0x05280528, 0x05e80528, 0x00000000, 0x00000000,     // ICON_1UP\n    0x01800000, 0x03c003c0, 0x018003c0, 0x0ff007e0, 0x0bd00bd0, 0x0a500bd0, 0x02400240, 0x02400240,     // ICON_PLAYER\n    0x01800000, 0x03c003c0, 0x118013c0, 0x03c81ff8, 0x07c003c8, 0x04400440, 0x0c080478, 0x00000000,     // ICON_PLAYER_JUMP\n    0x3ff80000, 0x30183ff8, 0x30183018, 0x3ff83ff8, 0x03000300, 0x03c003c0, 0x03e00300, 0x000003e0,     // ICON_KEY\n    0x3ff80000, 0x3ff83ff8, 0x33983ff8, 0x3ff83398, 0x3ff83ff8, 0x00000540, 0x0fe00aa0, 0x00000fe0,     // ICON_DEMON\n    0x00000000, 0x0ff00000, 0x20041008, 0x25442004, 0x10082004, 0x06000bf0, 0x00000300, 0x00000000,     // ICON_TEXT_POPUP\n    0x00000000, 0x11440000, 0x07f00be8, 0x1c1c0e38, 0x1c1c0c18, 0x07f00e38, 0x11440be8, 0x00000000,     // ICON_GEAR_EX\n    0x00000000, 0x20080000, 0x0c601010, 0x07c00fe0, 0x07c007c0, 0x0c600fe0, 0x20081010, 0x00000000,     // ICON_CRACK\n    0x00000000, 0x20080000, 0x0c601010, 0x04400fe0, 0x04405554, 0x0c600fe0, 0x20081010, 0x00000000,     // ICON_CRACK_POINTS\n    0x00000000, 0x00800080, 0x01c001c0, 0x1ffc3ffe, 0x03e007f0, 0x07f003e0, 0x0c180770, 0x00000808,     // ICON_STAR\n    0x0ff00000, 0x08180810, 0x08100818, 0x0a100810, 0x08180810, 0x08100818, 0x08100810, 0x00001ff8,     // ICON_DOOR\n    0x0ff00000, 0x08100810, 0x08100810, 0x10100010, 0x4f902010, 0x10102010, 0x08100010, 0x00000ff0,     // ICON_EXIT\n    0x00040000, 0x001f000e, 0x0ef40004, 0x12f41284, 0x0ef41214, 0x10040004, 0x7ffc3004, 0x10003000,     // ICON_MODE_2D\n    0x78040000, 0x501f600e, 0x0ef44004, 0x12f41284, 0x0ef41284, 0x10140004, 0x7ffc300c, 0x10003000,     // ICON_MODE_3D\n    0x7fe00000, 0x50286030, 0x47fe4804, 0x44224402, 0x44224422, 0x241275e2, 0x0c06140a, 0x000007fe,     // ICON_CUBE\n    0x7fe00000, 0x5ff87ff0, 0x47fe4ffc, 0x44224402, 0x44224422, 0x241275e2, 0x0c06140a, 0x000007fe,     // ICON_CUBE_FACE_TOP\n    0x7fe00000, 0x50386030, 0x47fe483c, 0x443e443e, 0x443e443e, 0x241e75fe, 0x0c06140e, 0x000007fe,     // ICON_CUBE_FACE_LEFT\n    0x7fe00000, 0x50286030, 0x47fe4804, 0x47fe47fe, 0x47fe47fe, 0x27fe77fe, 0x0ffe17fe, 0x000007fe,     // ICON_CUBE_FACE_FRONT\n    0x7fe00000, 0x50286030, 0x47fe4804, 0x44224402, 0x44224422, 0x3ff27fe2, 0x0ffe1ffa, 0x000007fe,     // ICON_CUBE_FACE_BOTTOM\n    0x7fe00000, 0x70286030, 0x7ffe7804, 0x7c227c02, 0x7c227c22, 0x3c127de2, 0x0c061c0a, 0x000007fe,     // ICON_CUBE_FACE_RIGHT\n    0x7fe00000, 0x7fe87ff0, 0x7ffe7fe4, 0x7fe27fe2, 0x7fe27fe2, 0x24127fe2, 0x0c06140a, 0x000007fe,     // ICON_CUBE_FACE_BACK\n    0x00000000, 0x2a0233fe, 0x22022602, 0x22022202, 0x2a022602, 0x00a033fe, 0x02080110, 0x00000000,     // ICON_CAMERA\n    0x00000000, 0x200c3ffc, 0x000c000c, 0x3ffc000c, 0x30003000, 0x30003000, 0x3ffc3004, 0x00000000,     // ICON_SPECIAL\n    0x00000000, 0x0022003e, 0x012201e2, 0x0100013e, 0x01000100, 0x79000100, 0x4f004900, 0x00007800,     // ICON_LINK_NET\n    0x00000000, 0x44007c00, 0x45004600, 0x00627cbe, 0x00620022, 0x45007cbe, 0x44004600, 0x00007c00,     // ICON_LINK_BOXES\n    0x00000000, 0x0044007c, 0x0010007c, 0x3f100010, 0x3f1021f0, 0x3f100010, 0x3f0021f0, 0x00000000,     // ICON_LINK_MULTI\n    0x00000000, 0x0044007c, 0x00440044, 0x0010007c, 0x00100010, 0x44107c10, 0x440047f0, 0x00007c00,     // ICON_LINK\n    0x00000000, 0x0044007c, 0x00440044, 0x0000007c, 0x00000010, 0x44007c10, 0x44004550, 0x00007c00,     // ICON_LINK_BROKE\n    0x02a00000, 0x22a43ffc, 0x20042004, 0x20042ff4, 0x20042ff4, 0x20042ff4, 0x20042004, 0x00003ffc,     // ICON_TEXT_NOTES\n    0x3ffc0000, 0x20042004, 0x245e27c4, 0x27c42444, 0x2004201e, 0x201e2004, 0x20042004, 0x00003ffc,     // ICON_NOTEBOOK\n    0x00000000, 0x07e00000, 0x04200420, 0x24243ffc, 0x24242424, 0x24242424, 0x3ffc2424, 0x00000000,     // ICON_SUITCASE\n    0x00000000, 0x0fe00000, 0x08200820, 0x40047ffc, 0x7ffc5554, 0x40045554, 0x7ffc4004, 0x00000000,     // ICON_SUITCASE_ZIP\n    0x00000000, 0x20043ffc, 0x3ffc2004, 0x13c81008, 0x100813c8, 0x10081008, 0x1ff81008, 0x00000000,     // ICON_MAILBOX\n    0x00000000, 0x40027ffe, 0x5ffa5ffa, 0x5ffa5ffa, 0x40025ffa, 0x03c07ffe, 0x1ff81ff8, 0x00000000,     // ICON_MONITOR\n    0x0ff00000, 0x6bfe7ffe, 0x7ffe7ffe, 0x68167ffe, 0x08106816, 0x08100810, 0x0ff00810, 0x00000000,     // ICON_PRINTER\n    0x3ff80000, 0xfffe2008, 0x870a8002, 0x904a888a, 0x904a904a, 0x870a888a, 0xfffe8002, 0x00000000,     // ICON_PHOTO_CAMERA\n    0x0fc00000, 0xfcfe0cd8, 0x8002fffe, 0x84428382, 0x84428442, 0x80028382, 0xfffe8002, 0x00000000,     // ICON_PHOTO_CAMERA_FLASH\n    0x00000000, 0x02400180, 0x08100420, 0x20041008, 0x23c42004, 0x22442244, 0x3ffc2244, 0x00000000,     // ICON_HOUSE\n    0x00000000, 0x1c700000, 0x3ff83ef8, 0x3ff83ff8, 0x0fe01ff0, 0x038007c0, 0x00000100, 0x00000000,     // ICON_HEART\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x80000000, 0xe000c000,     // ICON_CORNER\n    0x00000000, 0x14001c00, 0x15c01400, 0x15401540, 0x155c1540, 0x15541554, 0x1ddc1554, 0x00000000,     // ICON_VERTICAL_BARS\n    0x00000000, 0x03000300, 0x1b001b00, 0x1b601b60, 0x1b6c1b60, 0x1b6c1b6c, 0x1b6c1b6c, 0x00000000,     // ICON_VERTICAL_BARS_FILL\n    0x00000000, 0x00000000, 0x403e7ffe, 0x7ffe403e, 0x7ffe0000, 0x43fe43fe, 0x00007ffe, 0x00000000,     // ICON_LIFE_BARS\n    0x7ffc0000, 0x43844004, 0x43844284, 0x43844004, 0x42844284, 0x42844284, 0x40044384, 0x00007ffc,     // ICON_INFO\n    0x40008000, 0x10002000, 0x04000800, 0x01000200, 0x00400080, 0x00100020, 0x00040008, 0x00010002,     // ICON_CROSSLINE\n    0x00000000, 0x1ff01ff0, 0x18301830, 0x1f001830, 0x03001f00, 0x00000300, 0x03000300, 0x00000000,     // ICON_HELP\n    0x3ff00000, 0x2abc3550, 0x2aac3554, 0x2aac3554, 0x2aac3554, 0x2aac3554, 0x2aac3554, 0x00003ffc,     // ICON_FILETYPE_ALPHA\n    0x3ff00000, 0x201c2010, 0x22442184, 0x28142424, 0x29942814, 0x2ff42994, 0x20042004, 0x00003ffc,     // ICON_FILETYPE_HOME\n    0x07fe0000, 0x04020402, 0x7fe20402, 0x44224422, 0x44224422, 0x402047fe, 0x40204020, 0x00007fe0,     // ICON_LAYERS_VISIBLE\n    0x07fe0000, 0x04020402, 0x7c020402, 0x44024402, 0x44024402, 0x402047fe, 0x40204020, 0x00007fe0,     // ICON_LAYERS\n    0x00000000, 0x40027ffe, 0x7ffe4002, 0x40024002, 0x40024002, 0x40024002, 0x7ffe4002, 0x00000000,     // ICON_WINDOW\n    0x09100000, 0x09f00910, 0x09100910, 0x00000910, 0x24a2779e, 0x27a224a2, 0x709e20a2, 0x00000000,     // ICON_HIDPI\n    0x3ff00000, 0x201c2010, 0x2a842e84, 0x2e842a84, 0x2ba42004, 0x2aa42aa4, 0x20042ba4, 0x00003ffc,     // ICON_FILETYPE_BINARY\n    0x00000000, 0x00000000, 0x00120012, 0x4a5e4bd2, 0x485233d2, 0x00004bd2, 0x00000000, 0x00000000,     // ICON_HEX\n    0x01800000, 0x381c0660, 0x23c42004, 0x23c42044, 0x13c82204, 0x08101008, 0x02400420, 0x00000180,     // ICON_SHIELD\n    0x007e0000, 0x20023fc2, 0x40227fe2, 0x400a403a, 0x400a400a, 0x400a400a, 0x4008400e, 0x00007ff8,     // ICON_FILE_NEW\n    0x00000000, 0x0042007e, 0x40027fc2, 0x44024002, 0x5f024402, 0x44024402, 0x7ffe4002, 0x00000000,     // ICON_FOLDER_ADD\n    0x44220000, 0x12482244, 0xf3cf0000, 0x14280420, 0x48122424, 0x08100810, 0x1ff81008, 0x03c00420,     // ICON_ALARM\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_206\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_207\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_208\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_209\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_210\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_211\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_212\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_213\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_214\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_215\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_216\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_217\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_218\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_219\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_220\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_221\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_222\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_223\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_224\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_225\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_226\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_227\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_228\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_229\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_230\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_231\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_232\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_233\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_234\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_235\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_236\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_237\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_238\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_239\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_240\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_241\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_242\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_243\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_244\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_245\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_246\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_247\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_248\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_249\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_250\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_251\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_252\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_253\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_254\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,     // ICON_255\n};\n\n#endif      // !RAYGUI_NO_ICONS && !RAYGUI_CUSTOM_ICONS\n\n#ifndef RAYGUI_ICON_SIZE\n    #define RAYGUI_ICON_SIZE             0\n#endif\n\n#define RAYGUI_MAX_CONTROLS             16      // Maximum number of standard controls\n#define RAYGUI_MAX_PROPS_BASE           16      // Maximum number of standard properties\n#define RAYGUI_MAX_PROPS_EXTENDED        8      // Maximum number of extended properties\n\n//----------------------------------------------------------------------------------\n// Types and Structures Definition\n//----------------------------------------------------------------------------------\n// Gui control property style color element\ntypedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;\n\n//----------------------------------------------------------------------------------\n// Global Variables Definition\n//----------------------------------------------------------------------------------\nstatic GuiState guiState = STATE_NORMAL;    // Gui global state, if !STATE_NORMAL, forces defined state\n\nstatic Font guiFont = { 0 };                // Gui current font (WARNING: highly coupled to raylib)\nstatic bool guiLocked = false;              // Gui lock state (no inputs processed)\nstatic float guiAlpha = 1.0f;               // Gui element transpacency on drawing\n\nstatic unsigned int guiIconScale = 1;       // Gui icon default scale (if icons enabled)\n\n//----------------------------------------------------------------------------------\n// Style data array for all gui style properties (allocated on data segment by default)\n//\n// NOTE 1: First set of BASE properties are generic to all controls but could be individually\n// overwritten per control, first set of EXTENDED properties are generic to all controls and\n// can not be overwritten individually but custom EXTENDED properties can be used by control\n//\n// NOTE 2: A new style set could be loaded over this array using GuiLoadStyle(),\n// but default gui style could always be recovered with GuiLoadStyleDefault()\n//\n// guiStyle size is by default: 16*(16 + 8) = 384*4 = 1536 bytes = 1.5 KB\n//----------------------------------------------------------------------------------\nstatic unsigned int guiStyle[RAYGUI_MAX_CONTROLS*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED)] = { 0 };\n\nstatic bool guiStyleLoaded = false;         // Style loaded flag for lazy style initialization\n\n//----------------------------------------------------------------------------------\n// Standalone Mode Functions Declaration\n//\n// NOTE: raygui depend on some raylib input and drawing functions\n// To use raygui as standalone library, below functions must be defined by the user\n//----------------------------------------------------------------------------------\n#if defined(RAYGUI_STANDALONE)\n\n#define KEY_RIGHT           262\n#define KEY_LEFT            263\n#define KEY_DOWN            264\n#define KEY_UP              265\n#define KEY_BACKSPACE       259\n#define KEY_ENTER           257\n\n#define MOUSE_LEFT_BUTTON     0\n\n// Input required functions\n//-------------------------------------------------------------------------------\nstatic Vector2 GetMousePosition(void);\nstatic float GetMouseWheelMove(void);\nstatic bool IsMouseButtonDown(int button);\nstatic bool IsMouseButtonPressed(int button);\nstatic bool IsMouseButtonReleased(int button);\n\nstatic bool IsKeyDown(int key);\nstatic bool IsKeyPressed(int key);\nstatic int GetCharPressed(void);         // -- GuiTextBox(), GuiTextBoxMulti(), GuiValueBox()\n//-------------------------------------------------------------------------------\n\n// Drawing required functions\n//-------------------------------------------------------------------------------\nstatic void DrawRectangle(int x, int y, int width, int height, Color color);        // -- GuiDrawRectangle(), GuiDrawIcon()\n\nstatic void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4); // -- GuiColorPicker()\n//-------------------------------------------------------------------------------\n\n// Text required functions\n//-------------------------------------------------------------------------------\nstatic Font LoadFontEx(const char *fileName, int fontSize, int *fontChars, int glyphCount); // -- GuiLoadStyle()\nstatic Font GetFontDefault(void);                           // -- GuiLoadStyleDefault()\nstatic Texture2D LoadTextureFromImage(Image image);         // -- GuiLoadStyle()\nstatic void SetShapesTexture(Texture2D tex, Rectangle rec); // -- GuiLoadStyle()\nstatic char *LoadFileText(const char *fileName);            // -- GuiLoadStyle()\nstatic const char *GetDirectoryPath(const char *filePath);  // -- GuiLoadStyle()\n\nstatic Vector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing);   // -- GetTextWidth(), GuiTextBoxMulti()\nstatic void DrawTextEx(Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint);  // -- GuiDrawText()\n//-------------------------------------------------------------------------------\n\n// raylib functions already implemented in raygui\n//-------------------------------------------------------------------------------\nstatic Color GetColor(int hexValue);                // Returns a Color struct from hexadecimal value\nstatic int ColorToInt(Color color);                 // Returns hexadecimal value for a Color\nstatic Color Fade(Color color, float alpha);        // Color fade-in or fade-out, alpha goes from 0.0f to 1.0f\nstatic bool CheckCollisionPointRec(Vector2 point, Rectangle rec);   // Check if point is inside rectangle\nstatic const char *TextFormat(const char *text, ...);               // Formatting of text with variables to 'embed'\nstatic const char **TextSplit(const char *text, char delimiter, int *count);    // Split text into multiple strings\nstatic int TextToInteger(const char *text);         // Get integer value from text\nstatic int GetCodepoint(const char *text, int *bytesProcessed);     // Get next codepoint in a UTF-8 encoded text\nstatic const char *CodepointToUTF8(int codepoint, int *byteSize);   // Encode codepoint into UTF-8 text (char array size returned as parameter)\n\nstatic void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);  // Draw rectangle vertical gradient\n//-------------------------------------------------------------------------------\n\n#endif      // RAYGUI_STANDALONE\n\n//----------------------------------------------------------------------------------\n// Module specific Functions Declaration\n//----------------------------------------------------------------------------------\nstatic int GetTextWidth(const char *text);                      // Gui get text width using default font\nstatic Rectangle GetTextBounds(int control, Rectangle bounds);  // Get text bounds considering control bounds\nstatic const char *GetTextIcon(const char *text, int *iconId);  // Get text icon if provided and move text cursor\n\nstatic void GuiDrawText(const char *text, Rectangle bounds, int alignment, Color tint);         // Gui draw text using default font\nstatic void GuiDrawRectangle(Rectangle rec, int borderWidth, Color borderColor, Color color);   // Gui draw rectangle using default raygui style\n\nstatic const char **GuiTextSplit(const char *text, int *count, int *textRow);       // Split controls text into multiple strings\nstatic Vector3 ConvertHSVtoRGB(Vector3 hsv);                    // Convert color data from HSV to RGB\nstatic Vector3 ConvertRGBtoHSV(Vector3 rgb);                    // Convert color data from RGB to HSV\n\nstatic int GuiScrollBar(Rectangle bounds, int value, int minValue, int maxValue);   // Scroll bar control, used by GuiScrollPanel()\n\n//----------------------------------------------------------------------------------\n// Gui Setup Functions Definition\n//----------------------------------------------------------------------------------\n// Enable gui global state\n// NOTE: We check for STATE_DISABLED to avoid messing custom global state setups\nvoid GuiEnable(void) { if (guiState == STATE_DISABLED) guiState = STATE_NORMAL; }\n\n// Disable gui global state\n// NOTE: We check for STATE_NORMAL to avoid messing custom global state setups\nvoid GuiDisable(void) { if (guiState == STATE_NORMAL) guiState = STATE_DISABLED; }\n\n// Lock gui global state\nvoid GuiLock(void) { guiLocked = true; }\n\n// Unlock gui global state\nvoid GuiUnlock(void) { guiLocked = false; }\n\n// Check if gui is locked (global state)\nbool GuiIsLocked(void) { return guiLocked; }\n\n// Set gui controls alpha global state\nvoid GuiFade(float alpha)\n{\n    if (alpha < 0.0f) alpha = 0.0f;\n    else if (alpha > 1.0f) alpha = 1.0f;\n\n    guiAlpha = alpha;\n}\n\n// Set gui state (global state)\nvoid GuiSetState(int state) { guiState = (GuiState)state; }\n\n// Get gui state (global state)\nint GuiGetState(void) { return guiState; }\n\n// Set custom gui font\n// NOTE: Font loading/unloading is external to raygui\nvoid GuiSetFont(Font font)\n{\n    if (font.texture.id > 0)\n    {\n        // NOTE: If we try to setup a font but default style has not been\n        // lazily loaded before, it will be overwritten, so we need to force\n        // default style loading first\n        if (!guiStyleLoaded) GuiLoadStyleDefault();\n\n        guiFont = font;\n        GuiSetStyle(DEFAULT, TEXT_SIZE, font.baseSize);\n    }\n}\n\n// Get custom gui font\nFont GuiGetFont(void)\n{\n    return guiFont;\n}\n\n// Set control style property value\nvoid GuiSetStyle(int control, int property, int value)\n{\n    if (!guiStyleLoaded) GuiLoadStyleDefault();\n    guiStyle[control*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED) + property] = value;\n\n    // Default properties are propagated to all controls\n    if ((control == 0) && (property < RAYGUI_MAX_PROPS_BASE))\n    {\n        for (int i = 1; i < RAYGUI_MAX_CONTROLS; i++) guiStyle[i*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED) + property] = value;\n    }\n}\n\n// Get control style property value\nint GuiGetStyle(int control, int property)\n{\n    if (!guiStyleLoaded) GuiLoadStyleDefault();\n    return guiStyle[control*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTENDED) + property];\n}\n\n//----------------------------------------------------------------------------------\n// Gui Controls Functions Definition\n//----------------------------------------------------------------------------------\n\n// Window Box control\nbool GuiWindowBox(Rectangle bounds, const char *title)\n{\n    // Window title bar height (including borders)\n    // NOTE: This define is also used by GuiMessageBox() and GuiTextInputBox()\n    #if !defined(RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT)\n        #define RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT        24\n    #endif\n\n    //GuiState state = guiState;\n    bool clicked = false;\n\n    int statusBarHeight = RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT;\n\n    Rectangle statusBar = { bounds.x, bounds.y, bounds.width, (float)statusBarHeight };\n    if (bounds.height < statusBarHeight*2.0f) bounds.height = statusBarHeight*2.0f;\n\n    Rectangle windowPanel = { bounds.x, bounds.y + (float)statusBarHeight - 1, bounds.width, bounds.height - (float)statusBarHeight + 1 };\n    Rectangle closeButtonRec = { statusBar.x + statusBar.width - GuiGetStyle(STATUSBAR, BORDER_WIDTH) - 20,\n                                 statusBar.y + statusBarHeight/2.0f - 18.0f/2.0f, 18, 18 };\n\n    // Update control\n    //--------------------------------------------------------------------\n    // NOTE: Logic is directly managed by button\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiStatusBar(statusBar, title); // Draw window header as status bar\n    GuiPanel(windowPanel, NULL);    // Draw window base\n\n    // Draw window close button\n    int tempBorderWidth = GuiGetStyle(BUTTON, BORDER_WIDTH);\n    int tempTextAlignment = GuiGetStyle(BUTTON, TEXT_ALIGNMENT);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, 1);\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n#if defined(RAYGUI_NO_ICONS)\n    clicked = GuiButton(closeButtonRec, \"x\");\n#else\n    clicked = GuiButton(closeButtonRec, GuiIconText(ICON_CROSS_SMALL, NULL));\n#endif\n    GuiSetStyle(BUTTON, BORDER_WIDTH, tempBorderWidth);\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, tempTextAlignment);\n    //--------------------------------------------------------------------\n\n    return clicked;\n}\n\n// Group Box control with text name\nvoid GuiGroupBox(Rectangle bounds, const char *text)\n{\n    #if !defined(RAYGUI_GROUPBOX_LINE_THICK)\n        #define RAYGUI_GROUPBOX_LINE_THICK     1\n    #endif\n\n    GuiState state = guiState;\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x, bounds.y, RAYGUI_GROUPBOX_LINE_THICK, bounds.height }, 0, BLANK, Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BORDER_COLOR_DISABLED : LINE_COLOR)), guiAlpha));\n    GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x, bounds.y + bounds.height - 1, bounds.width, RAYGUI_GROUPBOX_LINE_THICK }, 0, BLANK, Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BORDER_COLOR_DISABLED : LINE_COLOR)), guiAlpha));\n    GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x + bounds.width - 1, bounds.y, RAYGUI_GROUPBOX_LINE_THICK, bounds.height }, 0, BLANK, Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BORDER_COLOR_DISABLED : LINE_COLOR)), guiAlpha));\n\n    GuiLine(RAYGUI_CLITERAL(Rectangle){ bounds.x, bounds.y - GuiGetStyle(DEFAULT, TEXT_SIZE)/2, bounds.width, (float)GuiGetStyle(DEFAULT, TEXT_SIZE) }, text);\n    //--------------------------------------------------------------------\n}\n\n// Line control\nvoid GuiLine(Rectangle bounds, const char *text)\n{\n    #if !defined(RAYGUI_LINE_ORIGIN_SIZE)\n        #define RAYGUI_LINE_MARGIN_TEXT  12\n    #endif\n    #if !defined(RAYGUI_LINE_TEXT_PADDING)\n        #define RAYGUI_LINE_TEXT_PADDING  4\n    #endif\n\n    GuiState state = guiState;\n\n    Color color = Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BORDER_COLOR_DISABLED : LINE_COLOR)), guiAlpha);\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (text == NULL) GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x, bounds.y + bounds.height/2, bounds.width, 1 }, 0, BLANK, color);\n    else\n    {\n        Rectangle textBounds = { 0 };\n        textBounds.width = (float)GetTextWidth(text);\n        textBounds.height = bounds.height;\n        textBounds.x = bounds.x + RAYGUI_LINE_MARGIN_TEXT;\n        textBounds.y = bounds.y;\n\n        // Draw line with embedded text label: \"--- text --------------\"\n        GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x, bounds.y + bounds.height/2, RAYGUI_LINE_MARGIN_TEXT - RAYGUI_LINE_TEXT_PADDING, 1 }, 0, BLANK, color);\n        GuiDrawText(text, textBounds, TEXT_ALIGN_LEFT, color);\n        GuiDrawRectangle(RAYGUI_CLITERAL(Rectangle){ bounds.x + 12 + textBounds.width + 4, bounds.y + bounds.height/2, bounds.width - textBounds.width - RAYGUI_LINE_MARGIN_TEXT - RAYGUI_LINE_TEXT_PADDING, 1 }, 0, BLANK, color);\n    }\n    //--------------------------------------------------------------------\n}\n\n// Panel control\nvoid GuiPanel(Rectangle bounds, const char *text)\n{\n    #if !defined(RAYGUI_PANEL_BORDER_WIDTH)\n        #define RAYGUI_PANEL_BORDER_WIDTH   1\n    #endif\n\n    GuiState state = guiState;\n\n    // Text will be drawn as a header bar (if provided)\n    Rectangle statusBar = { bounds.x, bounds.y, bounds.width, (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT };\n    if ((text != NULL) && (bounds.height < RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT*2.0f)) bounds.height = RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT*2.0f;\n\n    if (text != NULL)\n    {\n        // Move panel bounds after the header bar\n        bounds.y += (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT - 1;\n        bounds.height -= (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT + 1;\n    }\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (text != NULL) GuiStatusBar(statusBar, text);  // Draw panel header as status bar\n\n    GuiDrawRectangle(bounds, RAYGUI_PANEL_BORDER_WIDTH, Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BORDER_COLOR_DISABLED: LINE_COLOR)), guiAlpha),\n                     Fade(GetColor(GuiGetStyle(DEFAULT, (state == STATE_DISABLED)? BASE_COLOR_DISABLED : BACKGROUND_COLOR)), guiAlpha));\n    //--------------------------------------------------------------------\n}\n\n// Scroll Panel control\nRectangle GuiScrollPanel(Rectangle bounds, const char *text, Rectangle content, Vector2 *scroll)\n{\n    GuiState state = guiState;\n\n    Vector2 scrollPos = { 0.0f, 0.0f };\n    if (scroll != NULL) scrollPos = *scroll;\n\n    // Text will be drawn as a header bar (if provided)\n    Rectangle statusBar = { bounds.x, bounds.y, bounds.width, (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT };\n    if (bounds.height < RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT*2.0f) bounds.height = RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT*2.0f;\n\n    if (text != NULL)\n    {\n        // Move panel bounds after the header bar\n        bounds.y += (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT - 1;\n        bounds.height -= (float)RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT + 1;\n    }\n\n    bool hasHorizontalScrollBar = (content.width > bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH))? true : false;\n    bool hasVerticalScrollBar = (content.height > bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH))? true : false;\n\n    // Recheck to account for the other scrollbar being visible\n    if (!hasHorizontalScrollBar) hasHorizontalScrollBar = (hasVerticalScrollBar && (content.width > (bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH))))? true : false;\n    if (!hasVerticalScrollBar) hasVerticalScrollBar = (hasHorizontalScrollBar && (content.height > (bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH))))? true : false;\n\n    int horizontalScrollBarWidth = hasHorizontalScrollBar? GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH) : 0;\n    int verticalScrollBarWidth =  hasVerticalScrollBar? GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH) : 0;\n    Rectangle horizontalScrollBar = { (float)((GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (float)bounds.x + verticalScrollBarWidth : (float)bounds.x) + GuiGetStyle(DEFAULT, BORDER_WIDTH), (float)bounds.y + bounds.height - horizontalScrollBarWidth - GuiGetStyle(DEFAULT, BORDER_WIDTH), (float)bounds.width - verticalScrollBarWidth - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH), (float)horizontalScrollBarWidth };\n    Rectangle verticalScrollBar = { (float)((GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (float)bounds.x + GuiGetStyle(DEFAULT, BORDER_WIDTH) : (float)bounds.x + bounds.width - verticalScrollBarWidth - GuiGetStyle(DEFAULT, BORDER_WIDTH)), (float)bounds.y + GuiGetStyle(DEFAULT, BORDER_WIDTH), (float)verticalScrollBarWidth, (float)bounds.height - horizontalScrollBarWidth - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) };\n\n    // Calculate view area (area without the scrollbars)\n    Rectangle view = (GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)?\n                RAYGUI_CLITERAL(Rectangle){ bounds.x + verticalScrollBarWidth + GuiGetStyle(DEFAULT, BORDER_WIDTH), bounds.y + GuiGetStyle(DEFAULT, BORDER_WIDTH), bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - verticalScrollBarWidth, bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - horizontalScrollBarWidth } :\n                RAYGUI_CLITERAL(Rectangle){ bounds.x + GuiGetStyle(DEFAULT, BORDER_WIDTH), bounds.y + GuiGetStyle(DEFAULT, BORDER_WIDTH), bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - verticalScrollBarWidth, bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - horizontalScrollBarWidth };\n\n    // Clip view area to the actual content size\n    if (view.width > content.width) view.width = content.width;\n    if (view.height > content.height) view.height = content.height;\n\n    float horizontalMin = hasHorizontalScrollBar? ((GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (float)-verticalScrollBarWidth : 0) - (float)GuiGetStyle(DEFAULT, BORDER_WIDTH) : (((float)GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (float)-verticalScrollBarWidth : 0) - (float)GuiGetStyle(DEFAULT, BORDER_WIDTH);\n    float horizontalMax = hasHorizontalScrollBar? content.width - bounds.width + (float)verticalScrollBarWidth + GuiGetStyle(DEFAULT, BORDER_WIDTH) - (((float)GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (float)verticalScrollBarWidth : 0) : (float)-GuiGetStyle(DEFAULT, BORDER_WIDTH);\n    float verticalMin = hasVerticalScrollBar? 0 : -1;\n    float verticalMax = hasVerticalScrollBar? content.height - bounds.height + (float)horizontalScrollBarWidth + (float)GuiGetStyle(DEFAULT, BORDER_WIDTH) : (float)-GuiGetStyle(DEFAULT, BORDER_WIDTH);\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check button state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n\n#if defined(SUPPORT_SCROLLBAR_KEY_INPUT)\n            if (hasHorizontalScrollBar)\n            {\n                if (IsKeyDown(KEY_RIGHT)) scrollPos.x -= GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n                if (IsKeyDown(KEY_LEFT)) scrollPos.x += GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n            }\n\n            if (hasVerticalScrollBar)\n            {\n                if (IsKeyDown(KEY_DOWN)) scrollPos.y -= GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n                if (IsKeyDown(KEY_UP)) scrollPos.y += GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n            }\n#endif\n            float wheelMove = GetMouseWheelMove();\n\n            // Horizontal scroll (Shift + Mouse wheel)\n            if (hasHorizontalScrollBar && (IsKeyDown(KEY_LEFT_CONTROL) || IsKeyDown(KEY_RIGHT_SHIFT))) scrollPos.x += wheelMove*20;\n            else scrollPos.y += wheelMove*20; // Vertical scroll\n        }\n    }\n\n    // Normalize scroll values\n    if (scrollPos.x > -horizontalMin) scrollPos.x = -horizontalMin;\n    if (scrollPos.x < -horizontalMax) scrollPos.x = -horizontalMax;\n    if (scrollPos.y > -verticalMin) scrollPos.y = -verticalMin;\n    if (scrollPos.y < -verticalMax) scrollPos.y = -verticalMax;\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (text != NULL) GuiStatusBar(statusBar, text);  // Draw panel header as status bar\n\n    GuiDrawRectangle(bounds, 0, BLANK, GetColor(GuiGetStyle(DEFAULT, BACKGROUND_COLOR)));        // Draw background\n\n    // Save size of the scrollbar slider\n    const int slider = GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE);\n\n    // Draw horizontal scrollbar if visible\n    if (hasHorizontalScrollBar)\n    {\n        // Change scrollbar slider size to show the diff in size between the content width and the widget width\n        GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, (int)(((bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - verticalScrollBarWidth)/(int)content.width)*((int)bounds.width - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - verticalScrollBarWidth)));\n        scrollPos.x = (float)-GuiScrollBar(horizontalScrollBar, (int)-scrollPos.x, (int)horizontalMin, (int)horizontalMax);\n    }\n    else scrollPos.x = 0.0f;\n\n    // Draw vertical scrollbar if visible\n    if (hasVerticalScrollBar)\n    {\n        // Change scrollbar slider size to show the diff in size between the content height and the widget height\n        GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, (int)(((bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - horizontalScrollBarWidth)/(int)content.height)*((int)bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH) - horizontalScrollBarWidth)));\n        scrollPos.y = (float)-GuiScrollBar(verticalScrollBar, (int)-scrollPos.y, (int)verticalMin, (int)verticalMax);\n    }\n    else scrollPos.y = 0.0f;\n\n    // Draw detail corner rectangle if both scroll bars are visible\n    if (hasHorizontalScrollBar && hasVerticalScrollBar)\n    {\n        Rectangle corner = { (GuiGetStyle(LISTVIEW, SCROLLBAR_SIDE) == SCROLLBAR_LEFT_SIDE)? (bounds.x + GuiGetStyle(DEFAULT, BORDER_WIDTH) + 2) : (horizontalScrollBar.x + horizontalScrollBar.width + 2), verticalScrollBar.y + verticalScrollBar.height + 2, (float)horizontalScrollBarWidth - 4, (float)verticalScrollBarWidth - 4 };\n        GuiDrawRectangle(corner, 0, BLANK, Fade(GetColor(GuiGetStyle(LISTVIEW, TEXT + (state*3))), guiAlpha));\n    }\n\n    // Draw scrollbar lines depending on current state\n    GuiDrawRectangle(bounds, GuiGetStyle(DEFAULT, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER + (state*3))), guiAlpha), BLANK);\n\n    // Set scrollbar slider size back to the way it was before\n    GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, slider);\n    //--------------------------------------------------------------------\n\n    if (scroll != NULL) *scroll = scrollPos;\n\n    return view;\n}\n\n// Label control\nvoid GuiLabel(Rectangle bounds, const char *text)\n{\n    GuiState state = guiState;\n\n    // Update control\n    //--------------------------------------------------------------------\n    // ...\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawText(text, GetTextBounds(LABEL, bounds), GuiGetStyle(LABEL, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LABEL, TEXT + (state*3))), guiAlpha));\n    //--------------------------------------------------------------------\n}\n\n// Button control, returns true when clicked\nbool GuiButton(Rectangle bounds, const char *text)\n{\n    GuiState state = guiState;\n    bool pressed = false;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check button state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n\n            if (IsMouseButtonReleased(MOUSE_LEFT_BUTTON)) pressed = true;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(BUTTON, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(BUTTON, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(BUTTON, BASE + (state*3))), guiAlpha));\n    GuiDrawText(text, GetTextBounds(BUTTON, bounds), GuiGetStyle(BUTTON, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(BUTTON, TEXT + (state*3))), guiAlpha));\n    //------------------------------------------------------------------\n\n    return pressed;\n}\n\n// Label button control\nbool GuiLabelButton(Rectangle bounds, const char *text)\n{\n    GuiState state = guiState;\n    bool pressed = false;\n\n    // NOTE: We force bounds.width to be all text\n    float textWidth = MeasureTextEx(guiFont, text, (float)GuiGetStyle(DEFAULT, TEXT_SIZE), (float)GuiGetStyle(DEFAULT, TEXT_SPACING)).x;\n    if (bounds.width < textWidth) bounds.width = textWidth;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check checkbox state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n\n            if (IsMouseButtonReleased(MOUSE_LEFT_BUTTON)) pressed = true;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawText(text, GetTextBounds(LABEL, bounds), GuiGetStyle(LABEL, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LABEL, TEXT + (state*3))), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return pressed;\n}\n\n// Toggle Button control, returns true when active\nbool GuiToggle(Rectangle bounds, const char *text, bool active)\n{\n    GuiState state = guiState;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check toggle button state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else if (IsMouseButtonReleased(MOUSE_LEFT_BUTTON))\n            {\n                state = STATE_NORMAL;\n                active = !active;\n            }\n            else state = STATE_FOCUSED;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (state == STATE_NORMAL)\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TOGGLE, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TOGGLE, (active? BORDER_COLOR_PRESSED : (BORDER + state*3)))), guiAlpha), Fade(GetColor(GuiGetStyle(TOGGLE, (active? BASE_COLOR_PRESSED : (BASE + state*3)))), guiAlpha));\n        GuiDrawText(text, GetTextBounds(TOGGLE, bounds), GuiGetStyle(TOGGLE, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(TOGGLE, (active? TEXT_COLOR_PRESSED : (TEXT + state*3)))), guiAlpha));\n    }\n    else\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TOGGLE, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TOGGLE, BORDER + state*3)), guiAlpha), Fade(GetColor(GuiGetStyle(TOGGLE, BASE + state*3)), guiAlpha));\n        GuiDrawText(text, GetTextBounds(TOGGLE, bounds), GuiGetStyle(TOGGLE, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(TOGGLE, TEXT + state*3)), guiAlpha));\n    }\n    //--------------------------------------------------------------------\n\n    return active;\n}\n\n// Toggle Group control, returns toggled button index\nint GuiToggleGroup(Rectangle bounds, const char *text, int active)\n{\n    #if !defined(RAYGUI_TOGGLEGROUP_MAX_ITEMS)\n        #define RAYGUI_TOGGLEGROUP_MAX_ITEMS    32\n    #endif\n\n    float initBoundsX = bounds.x;\n\n    // Get substrings items from text (items pointers)\n    int rows[RAYGUI_TOGGLEGROUP_MAX_ITEMS] = { 0 };\n    int itemCount = 0;\n    const char **items = GuiTextSplit(text, &itemCount, rows);\n\n    int prevRow = rows[0];\n\n    for (int i = 0; i < itemCount; i++)\n    {\n        if (prevRow != rows[i])\n        {\n            bounds.x = initBoundsX;\n            bounds.y += (bounds.height + GuiGetStyle(TOGGLE, GROUP_PADDING));\n            prevRow = rows[i];\n        }\n\n        if (i == active) GuiToggle(bounds, items[i], true);\n        else if (GuiToggle(bounds, items[i], false) == true) active = i;\n\n        bounds.x += (bounds.width + GuiGetStyle(TOGGLE, GROUP_PADDING));\n    }\n\n    return active;\n}\n\n// Check Box control, returns true when active\nbool GuiCheckBox(Rectangle bounds, const char *text, bool checked)\n{\n    GuiState state = guiState;\n\n    Rectangle textBounds = { 0 };\n\n    if (text != NULL)\n    {\n        textBounds.width = (float)GetTextWidth(text);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x + bounds.width + GuiGetStyle(CHECKBOX, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n        if (GuiGetStyle(CHECKBOX, TEXT_ALIGNMENT) == TEXT_ALIGN_LEFT) textBounds.x = bounds.x - textBounds.width - GuiGetStyle(CHECKBOX, TEXT_PADDING);\n    }\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        Rectangle totalBounds = {\n            (GuiGetStyle(CHECKBOX, TEXT_ALIGNMENT) == TEXT_ALIGN_LEFT)? textBounds.x : bounds.x,\n            bounds.y,\n            bounds.width + textBounds.width + GuiGetStyle(CHECKBOX, TEXT_PADDING),\n            bounds.height,\n        };\n\n        // Check checkbox state\n        if (CheckCollisionPointRec(mousePoint, totalBounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n\n            if (IsMouseButtonReleased(MOUSE_LEFT_BUTTON)) checked = !checked;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(CHECKBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(CHECKBOX, BORDER + (state*3))), guiAlpha), BLANK);\n\n    if (checked)\n    {\n        Rectangle check = { bounds.x + GuiGetStyle(CHECKBOX, BORDER_WIDTH) + GuiGetStyle(CHECKBOX, CHECK_PADDING),\n                            bounds.y + GuiGetStyle(CHECKBOX, BORDER_WIDTH) + GuiGetStyle(CHECKBOX, CHECK_PADDING),\n                            bounds.width - 2*(GuiGetStyle(CHECKBOX, BORDER_WIDTH) + GuiGetStyle(CHECKBOX, CHECK_PADDING)),\n                            bounds.height - 2*(GuiGetStyle(CHECKBOX, BORDER_WIDTH) + GuiGetStyle(CHECKBOX, CHECK_PADDING)) };\n        GuiDrawRectangle(check, 0, BLANK, Fade(GetColor(GuiGetStyle(CHECKBOX, TEXT + state*3)), guiAlpha));\n    }\n\n    GuiDrawText(text, textBounds, (GuiGetStyle(CHECKBOX, TEXT_ALIGNMENT) == TEXT_ALIGN_RIGHT)? TEXT_ALIGN_LEFT : TEXT_ALIGN_RIGHT, Fade(GetColor(GuiGetStyle(LABEL, TEXT + (state*3))), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return checked;\n}\n\n// Combo Box control, returns selected item index\nint GuiComboBox(Rectangle bounds, const char *text, int active)\n{\n    GuiState state = guiState;\n\n    bounds.width -= (GuiGetStyle(COMBOBOX, COMBO_BUTTON_WIDTH) + GuiGetStyle(COMBOBOX, COMBO_BUTTON_SPACING));\n\n    Rectangle selector = { (float)bounds.x + bounds.width + GuiGetStyle(COMBOBOX, COMBO_BUTTON_SPACING),\n                           (float)bounds.y, (float)GuiGetStyle(COMBOBOX, COMBO_BUTTON_WIDTH), (float)bounds.height };\n\n    // Get substrings items from text (items pointers, lengths and count)\n    int itemCount = 0;\n    const char **items = GuiTextSplit(text, &itemCount, NULL);\n\n    if (active < 0) active = 0;\n    else if (active > itemCount - 1) active = itemCount - 1;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked && (itemCount > 1))\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds) ||\n            CheckCollisionPointRec(mousePoint, selector))\n        {\n            if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))\n            {\n                active += 1;\n                if (active >= itemCount) active = 0;\n            }\n\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    // Draw combo box main\n    GuiDrawRectangle(bounds, GuiGetStyle(COMBOBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(COMBOBOX, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(COMBOBOX, BASE + (state*3))), guiAlpha));\n    GuiDrawText(items[active], GetTextBounds(COMBOBOX, bounds), GuiGetStyle(COMBOBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(COMBOBOX, TEXT + (state*3))), guiAlpha));\n\n    // Draw selector using a custom button\n    // NOTE: BORDER_WIDTH and TEXT_ALIGNMENT forced values\n    int tempBorderWidth = GuiGetStyle(BUTTON, BORDER_WIDTH);\n    int tempTextAlign = GuiGetStyle(BUTTON, TEXT_ALIGNMENT);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, 1);\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n\n    GuiButton(selector, TextFormat(\"%i/%i\", active + 1, itemCount));\n\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, tempTextAlign);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, tempBorderWidth);\n    //--------------------------------------------------------------------\n\n    return active;\n}\n\n// Dropdown Box control\n// NOTE: Returns mouse click\nbool GuiDropdownBox(Rectangle bounds, const char *text, int *active, bool editMode)\n{\n    GuiState state = guiState;\n    int itemSelected = *active;\n    int itemFocused = -1;\n\n    // Get substrings items from text (items pointers, lengths and count)\n    int itemCount = 0;\n    const char **items = GuiTextSplit(text, &itemCount, NULL);\n\n    Rectangle boundsOpen = bounds;\n    boundsOpen.height = (itemCount + 1)*(bounds.height + GuiGetStyle(DROPDOWNBOX, DROPDOWN_ITEMS_SPACING));\n\n    Rectangle itemBounds = bounds;\n\n    bool pressed = false;       // Check mouse button pressed\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && (editMode || !guiLocked) && (itemCount > 1))\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (editMode)\n        {\n            state = STATE_PRESSED;\n\n            // Check if mouse has been pressed or released outside limits\n            if (!CheckCollisionPointRec(mousePoint, boundsOpen))\n            {\n                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON) || IsMouseButtonReleased(MOUSE_LEFT_BUTTON)) pressed = true;\n            }\n\n            // Check if already selected item has been pressed again\n            if (CheckCollisionPointRec(mousePoint, bounds) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) pressed = true;\n\n            // Check focused and selected item\n            for (int i = 0; i < itemCount; i++)\n            {\n                // Update item rectangle y position for next item\n                itemBounds.y += (bounds.height + GuiGetStyle(DROPDOWNBOX, DROPDOWN_ITEMS_SPACING));\n\n                if (CheckCollisionPointRec(mousePoint, itemBounds))\n                {\n                    itemFocused = i;\n                    if (IsMouseButtonReleased(MOUSE_LEFT_BUTTON))\n                    {\n                        itemSelected = i;\n                        pressed = true;     // Item selected, change to editMode = false\n                    }\n                    break;\n                }\n            }\n\n            itemBounds = bounds;\n        }\n        else\n        {\n            if (CheckCollisionPointRec(mousePoint, bounds))\n            {\n                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))\n                {\n                    pressed = true;\n                    state = STATE_PRESSED;\n                }\n                else state = STATE_FOCUSED;\n            }\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (editMode) GuiPanel(boundsOpen, NULL);\n\n    GuiDrawRectangle(bounds, GuiGetStyle(DROPDOWNBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BORDER + state*3)), guiAlpha), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BASE + state*3)), guiAlpha));\n    GuiDrawText(items[itemSelected], GetTextBounds(DEFAULT, bounds), GuiGetStyle(DROPDOWNBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + state*3)), guiAlpha));\n\n    if (editMode)\n    {\n        // Draw visible items\n        for (int i = 0; i < itemCount; i++)\n        {\n            // Update item rectangle y position for next item\n            itemBounds.y += (bounds.height + GuiGetStyle(DROPDOWNBOX, DROPDOWN_ITEMS_SPACING));\n\n            if (i == itemSelected)\n            {\n                GuiDrawRectangle(itemBounds, GuiGetStyle(DROPDOWNBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BORDER_COLOR_PRESSED)), guiAlpha), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BASE_COLOR_PRESSED)), guiAlpha));\n                GuiDrawText(items[i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(DROPDOWNBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT_COLOR_PRESSED)), guiAlpha));\n            }\n            else if (i == itemFocused)\n            {\n                GuiDrawRectangle(itemBounds, GuiGetStyle(DROPDOWNBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BORDER_COLOR_FOCUSED)), guiAlpha), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, BASE_COLOR_FOCUSED)), guiAlpha));\n                GuiDrawText(items[i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(DROPDOWNBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT_COLOR_FOCUSED)), guiAlpha));\n            }\n            else GuiDrawText(items[i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(DROPDOWNBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT_COLOR_NORMAL)), guiAlpha));\n        }\n    }\n\n    // Draw arrows (using icon if available)\n#if defined(RAYGUI_NO_ICONS)\n    GuiDrawText(\"v\", RAYGUI_CLITERAL(Rectangle){ bounds.x + bounds.width - GuiGetStyle(DROPDOWNBOX, ARROW_PADDING), bounds.y + bounds.height/2 - 2, 10, 10 },\n                TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + (state*3))), guiAlpha));\n#else\n    GuiDrawText(\"#120#\", RAYGUI_CLITERAL(Rectangle){ bounds.x + bounds.width - GuiGetStyle(DROPDOWNBOX, ARROW_PADDING), bounds.y + bounds.height/2 - 6, 10, 10 },\n                TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + (state*3))), guiAlpha));   // ICON_ARROW_DOWN_FILL\n#endif\n    //--------------------------------------------------------------------\n\n    *active = itemSelected;\n    return pressed;\n}\n\n// Text Box control, updates input text\n// NOTE 2: Returns if KEY_ENTER pressed (useful for data validation)\nbool GuiTextBox(Rectangle bounds, char *text, int textSize, bool editMode)\n{\n    GuiState state = guiState;\n    bool pressed = false;\n\n    Rectangle cursor = {\n        bounds.x + GuiGetStyle(TEXTBOX, TEXT_PADDING) + GetTextWidth(text) + 2,\n        bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE),\n        4,\n        (float)GuiGetStyle(DEFAULT, TEXT_SIZE)*2\n    };\n\n    if (cursor.height >= bounds.height) cursor.height = bounds.height - GuiGetStyle(TEXTBOX, BORDER_WIDTH)*2;\n    if (cursor.y < (bounds.y + GuiGetStyle(TEXTBOX, BORDER_WIDTH))) cursor.y = bounds.y + GuiGetStyle(TEXTBOX, BORDER_WIDTH);\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (editMode)\n        {\n            state = STATE_PRESSED;\n\n            int key = GetCharPressed();      // Returns codepoint as Unicode\n            int keyCount = (int)strlen(text);\n            int byteSize = 0;\n            const char *textUTF8 = CodepointToUTF8(key, &byteSize);\n\n            // Only allow keys in range [32..125]\n            if ((keyCount + byteSize) < textSize)\n            {\n                float maxWidth = (bounds.width - (GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING)*2));\n\n                if ((GetTextWidth(text) < (maxWidth - GuiGetStyle(DEFAULT, TEXT_SIZE))) && (key >= 32))\n                {\n                    for (int i = 0; i < byteSize; i++)\n                    {\n                        text[keyCount] = textUTF8[i];\n                        keyCount++;\n                    }\n\n                    text[keyCount] = '\\0';\n                }\n            }\n\n            // Delete text\n            if (keyCount > 0)\n            {\n                if (IsKeyPressed(KEY_BACKSPACE))\n                {\n                    while ((keyCount > 0) && ((text[--keyCount] & 0xc0) == 0x80));\n                    text[keyCount] = '\\0';\n                }\n            }\n\n            if (IsKeyPressed(KEY_ENTER) || (!CheckCollisionPointRec(mousePoint, bounds) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON))) pressed = true;\n\n            // Check text alignment to position cursor properly\n            int textAlignment = GuiGetStyle(TEXTBOX, TEXT_ALIGNMENT);\n            if (textAlignment == TEXT_ALIGN_CENTER) cursor.x = bounds.x + GetTextWidth(text)/2 + bounds.width/2 + 1;\n            else if (textAlignment == TEXT_ALIGN_RIGHT) cursor.x = bounds.x + bounds.width - GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING);\n        }\n        else\n        {\n            if (CheckCollisionPointRec(mousePoint, bounds))\n            {\n                state = STATE_FOCUSED;\n                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) pressed = true;\n            }\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (state == STATE_PRESSED)\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TEXTBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(TEXTBOX, BASE_COLOR_PRESSED)), guiAlpha));\n    }\n    else if (state == STATE_DISABLED)\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TEXTBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(TEXTBOX, BASE_COLOR_DISABLED)), guiAlpha));\n    }\n    else GuiDrawRectangle(bounds, 1, Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), BLANK);\n\n    GuiDrawText(text, GetTextBounds(TEXTBOX, bounds), GuiGetStyle(TEXTBOX, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(TEXTBOX, TEXT + (state*3))), guiAlpha));\n\n    // Draw cursor\n    if (editMode) GuiDrawRectangle(cursor, 0, BLANK, Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER_COLOR_PRESSED)), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return pressed;\n}\n\n// Spinner control, returns selected value\nbool GuiSpinner(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool editMode)\n{\n    GuiState state = guiState;\n\n    bool pressed = false;\n    int tempValue = *value;\n\n    Rectangle spinner = { bounds.x + GuiGetStyle(SPINNER, SPIN_BUTTON_WIDTH) + GuiGetStyle(SPINNER, SPIN_BUTTON_SPACING), bounds.y,\n                          bounds.width - 2*(GuiGetStyle(SPINNER, SPIN_BUTTON_WIDTH) + GuiGetStyle(SPINNER, SPIN_BUTTON_SPACING)), bounds.height };\n    Rectangle leftButtonBound = { (float)bounds.x, (float)bounds.y, (float)GuiGetStyle(SPINNER, SPIN_BUTTON_WIDTH), (float)bounds.height };\n    Rectangle rightButtonBound = { (float)bounds.x + bounds.width - GuiGetStyle(SPINNER, SPIN_BUTTON_WIDTH), (float)bounds.y, (float)GuiGetStyle(SPINNER, SPIN_BUTTON_WIDTH), (float)bounds.height };\n\n    Rectangle textBounds = { 0 };\n    if (text != NULL)\n    {\n        textBounds.width = (float)GetTextWidth(text);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x + bounds.width + GuiGetStyle(SPINNER, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n        if (GuiGetStyle(SPINNER, TEXT_ALIGNMENT) == TEXT_ALIGN_LEFT) textBounds.x = bounds.x - textBounds.width - GuiGetStyle(SPINNER, TEXT_PADDING);\n    }\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check spinner state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n        }\n    }\n\n#if defined(RAYGUI_NO_ICONS)\n    if (GuiButton(leftButtonBound, \"<\")) tempValue--;\n    if (GuiButton(rightButtonBound, \">\")) tempValue++;\n#else\n    if (GuiButton(leftButtonBound, GuiIconText(ICON_ARROW_LEFT_FILL, NULL))) tempValue--;\n    if (GuiButton(rightButtonBound, GuiIconText(ICON_ARROW_RIGHT_FILL, NULL))) tempValue++;\n#endif\n\n    if (!editMode)\n    {\n        if (tempValue < minValue) tempValue = minValue;\n        if (tempValue > maxValue) tempValue = maxValue;\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    // TODO: Set Spinner properties for ValueBox\n    pressed = GuiValueBox(spinner, NULL, &tempValue, minValue, maxValue, editMode);\n\n    // Draw value selector custom buttons\n    // NOTE: BORDER_WIDTH and TEXT_ALIGNMENT forced values\n    int tempBorderWidth = GuiGetStyle(BUTTON, BORDER_WIDTH);\n    int tempTextAlign = GuiGetStyle(BUTTON, TEXT_ALIGNMENT);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, GuiGetStyle(SPINNER, BORDER_WIDTH));\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, tempTextAlign);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, tempBorderWidth);\n\n    // Draw text label if provided\n    GuiDrawText(text, textBounds, (GuiGetStyle(SPINNER, TEXT_ALIGNMENT) == TEXT_ALIGN_RIGHT)? TEXT_ALIGN_LEFT : TEXT_ALIGN_RIGHT, Fade(GetColor(GuiGetStyle(LABEL, TEXT + (state*3))), guiAlpha));\n    //--------------------------------------------------------------------\n\n    *value = tempValue;\n    return pressed;\n}\n\n// Value Box control, updates input text with numbers\n// NOTE: Requires static variables: frameCounter\nbool GuiValueBox(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool editMode)\n{\n    #if !defined(RAYGUI_VALUEBOX_MAX_CHARS)\n        #define RAYGUI_VALUEBOX_MAX_CHARS  32\n    #endif\n\n    GuiState state = guiState;\n    bool pressed = false;\n\n    char textValue[RAYGUI_VALUEBOX_MAX_CHARS + 1] = \"\\0\";\n    sprintf(textValue, \"%i\", *value);\n\n    Rectangle textBounds = { 0 };\n    if (text != NULL)\n    {\n        textBounds.width = (float)GetTextWidth(text);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x + bounds.width + GuiGetStyle(VALUEBOX, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n        if (GuiGetStyle(VALUEBOX, TEXT_ALIGNMENT) == TEXT_ALIGN_LEFT) textBounds.x = bounds.x - textBounds.width - GuiGetStyle(VALUEBOX, TEXT_PADDING);\n    }\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        bool valueHasChanged = false;\n\n        if (editMode)\n        {\n            state = STATE_PRESSED;\n\n            int keyCount = (int)strlen(textValue);\n\n            // Only allow keys in range [48..57]\n            if (keyCount < RAYGUI_VALUEBOX_MAX_CHARS)\n            {\n                if (GetTextWidth(textValue) < bounds.width)\n                {\n                    int key = GetCharPressed();\n                    if ((key >= 48) && (key <= 57))\n                    {\n                        textValue[keyCount] = (char)key;\n                        keyCount++;\n                        valueHasChanged = true;\n                    }\n                }\n            }\n\n            // Delete text\n            if (keyCount > 0)\n            {\n                if (IsKeyPressed(KEY_BACKSPACE))\n                {\n                    keyCount--;\n                    textValue[keyCount] = '\\0';\n                    valueHasChanged = true;\n                }\n            }\n\n            if (valueHasChanged) *value = TextToInteger(textValue);\n\n            // NOTE: We are not clamp values until user input finishes\n            //if (*value > maxValue) *value = maxValue;\n            //else if (*value < minValue) *value = minValue;\n\n            if (IsKeyPressed(KEY_ENTER) || (!CheckCollisionPointRec(mousePoint, bounds) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON))) pressed = true;\n        }\n        else\n        {\n            if (*value > maxValue) *value = maxValue;\n            else if (*value < minValue) *value = minValue;\n\n            if (CheckCollisionPointRec(mousePoint, bounds))\n            {\n                state = STATE_FOCUSED;\n                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) pressed = true;\n            }\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    Color baseColor = BLANK;\n    if (state == STATE_PRESSED) baseColor = GetColor(GuiGetStyle(VALUEBOX, BASE_COLOR_PRESSED));\n    else if (state == STATE_DISABLED) baseColor = GetColor(GuiGetStyle(VALUEBOX, BASE_COLOR_DISABLED));\n\n    // WARNING: BLANK color does not work properly with Fade()\n    GuiDrawRectangle(bounds, GuiGetStyle(VALUEBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(VALUEBOX, BORDER + (state*3))), guiAlpha), baseColor);\n    GuiDrawText(textValue, GetTextBounds(VALUEBOX, bounds), TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(VALUEBOX, TEXT + (state*3))), guiAlpha));\n\n    // Draw cursor\n    if (editMode)\n    {\n        // NOTE: ValueBox internal text is always centered\n        Rectangle cursor = { bounds.x + GetTextWidth(textValue)/2 + bounds.width/2 + 2, bounds.y + 2*GuiGetStyle(VALUEBOX, BORDER_WIDTH), 4, bounds.height - 4*GuiGetStyle(VALUEBOX, BORDER_WIDTH) };\n        GuiDrawRectangle(cursor, 0, BLANK, Fade(GetColor(GuiGetStyle(VALUEBOX, BORDER_COLOR_PRESSED)), guiAlpha));\n    }\n\n    // Draw text label if provided\n    GuiDrawText(text, textBounds, (GuiGetStyle(VALUEBOX, TEXT_ALIGNMENT) == TEXT_ALIGN_RIGHT)? TEXT_ALIGN_LEFT : TEXT_ALIGN_RIGHT, Fade(GetColor(GuiGetStyle(LABEL, TEXT + (state*3))), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return pressed;\n}\n\n// Text Box control with multiple lines\nbool GuiTextBoxMulti(Rectangle bounds, char *text, int textSize, bool editMode)\n{\n    GuiState state = guiState;\n    bool pressed = false;\n\n    Rectangle textAreaBounds = {\n        bounds.x + GuiGetStyle(TEXTBOX, BORDER_WIDTH) + GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING),\n        bounds.y + GuiGetStyle(TEXTBOX, BORDER_WIDTH) + GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING),\n        bounds.width - 2*(GuiGetStyle(TEXTBOX, BORDER_WIDTH) + GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING)),\n        bounds.height - 2*(GuiGetStyle(TEXTBOX, BORDER_WIDTH) + GuiGetStyle(TEXTBOX, TEXT_INNER_PADDING))\n    };\n\n    // Cursor position, [x, y] values should be updated\n    Rectangle cursor = { 0, -1, 4, (float)GuiGetStyle(DEFAULT, TEXT_SIZE) + 2 };\n\n    float scaleFactor = (float)GuiGetStyle(DEFAULT, TEXT_SIZE)/(float)guiFont.baseSize;     // Character rectangle scaling factor\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (editMode)\n        {\n            state = STATE_PRESSED;\n\n            // We get an Unicode codepoint\n            int codepoint = GetCharPressed();\n            int textLength = (int)strlen(text);     // Length in bytes (UTF-8 string)\n\n            // Introduce characters\n            if (textLength < (textSize - 1))\n            {\n                if (IsKeyPressed(KEY_ENTER))\n                {\n                    text[textLength] = '\\n';\n                    textLength++;\n                }\n                else if (codepoint >= 32)\n                {\n                    // Supports Unicode inputs -> Encoded to UTF-8\n                    int charUTF8Length = 0;\n                    const char *charEncoded = CodepointToUTF8(codepoint, &charUTF8Length);\n                    memcpy(text + textLength, charEncoded, charUTF8Length);\n                    textLength += charUTF8Length;\n                }\n            }\n\n            // Delete characters\n            if (textLength > 0)\n            {\n                if (IsKeyPressed(KEY_BACKSPACE))\n                {\n                    if ((unsigned char)text[textLength - 1] < 127)\n                    {\n                        // Remove ASCII equivalent character (1 byte)\n                        textLength--;\n                        text[textLength] = '\\0';\n                    }\n                    else\n                    {\n                        // Remove latest UTF-8 unicode character introduced (n bytes)\n                        int charUTF8Length = 0;\n                        while (((unsigned char)text[textLength - 1 - charUTF8Length] & 0b01000000) == 0) charUTF8Length++;\n\n                        textLength -= (charUTF8Length + 1);\n                        text[textLength] = '\\0';\n                    }\n                }\n            }\n\n            // Exit edit mode\n            if (!CheckCollisionPointRec(mousePoint, bounds) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) pressed = true;\n        }\n        else\n        {\n            if (CheckCollisionPointRec(mousePoint, bounds))\n            {\n                state = STATE_FOCUSED;\n                if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) pressed = true;\n            }\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (state == STATE_PRESSED)\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TEXTBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(TEXTBOX, BASE_COLOR_PRESSED)), guiAlpha));\n    }\n    else if (state == STATE_DISABLED)\n    {\n        GuiDrawRectangle(bounds, GuiGetStyle(TEXTBOX, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(TEXTBOX, BASE_COLOR_DISABLED)), guiAlpha));\n    }\n    else GuiDrawRectangle(bounds, 1, Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER + (state*3))), guiAlpha), BLANK);\n\n    int wrapMode = 1;      // 0-No wrap, 1-Char wrap, 2-Word wrap\n    Vector2 cursorPos = { textAreaBounds.x, textAreaBounds.y };\n\n    //int lastSpacePos = 0;\n    //int lastSpaceWidth = 0;\n    //int lastSpaceCursorPos = 0;\n\n    for (int i = 0, codepointLength = 0; text[i] != '\\0'; i += codepointLength)\n    {\n        int codepoint = GetCodepoint(text + i, &codepointLength);\n        int index = GetGlyphIndex(guiFont, codepoint);      // If requested codepoint is not found, we get '?' (0x3f)\n        Rectangle atlasRec = guiFont.recs[index];\n        GlyphInfo glyphInfo = guiFont.glyphs[index];        // Glyph measures\n\n        if ((codepointLength == 1) && (codepoint == '\\n'))\n        {\n            cursorPos.y += (guiFont.baseSize*scaleFactor + GuiGetStyle(TEXTBOX, TEXT_LINES_SPACING));   // Line feed\n            cursorPos.x = textAreaBounds.x;                 // Carriage return\n        }\n        else\n        {\n            if (wrapMode == 1)\n            {\n                int glyphWidth = 0;\n                if (glyphInfo.advanceX != 0) glyphWidth += glyphInfo.advanceX;\n                else glyphWidth += (int)(atlasRec.width + glyphInfo.offsetX);\n\n                // Jump line if the end of the text box area has been reached\n                if ((cursorPos.x + (glyphWidth*scaleFactor)) > (textAreaBounds.x + textAreaBounds.width))\n                {\n                    cursorPos.y += (guiFont.baseSize*scaleFactor + GuiGetStyle(TEXTBOX, TEXT_LINES_SPACING));   // Line feed\n                    cursorPos.x = textAreaBounds.x;     // Carriage return\n                }\n            }\n            else if (wrapMode == 2)\n            {\n                /*\n                if ((codepointLength == 1) && (codepoint == ' '))\n                {\n                    lastSpacePos = i;\n                    lastSpaceWidth = 0;\n                    lastSpaceCursorPos = cursorPos.x;\n                }\n\n                // Jump line if last word reaches end of text box area\n                if ((lastSpaceCursorPos + lastSpaceWidth) > (textAreaBounds.x + textAreaBounds.width))\n                {\n                    cursorPos.y += 12;               // Line feed\n                    cursorPos.x = textAreaBounds.x;  // Carriage return\n                }\n                */\n            }\n\n            // Draw current character glyph\n            DrawTextCodepoint(guiFont, codepoint, cursorPos, (float)GuiGetStyle(DEFAULT, TEXT_SIZE), Fade(GetColor(GuiGetStyle(TEXTBOX, TEXT + (state*3))), guiAlpha));\n\n            int glyphWidth = 0;\n            if (glyphInfo.advanceX != 0) glyphWidth += glyphInfo.advanceX;\n            else glyphWidth += (int)(atlasRec.width + glyphInfo.offsetX);\n\n            cursorPos.x += (glyphWidth*scaleFactor + (float)GuiGetStyle(DEFAULT, TEXT_SPACING));\n            //if (i > lastSpacePos) lastSpaceWidth += (atlasRec.width + (float)GuiGetStyle(DEFAULT, TEXT_SPACING));\n        }\n    }\n\n    cursor.x = cursorPos.x;\n    cursor.y = cursorPos.y;\n\n    // Draw cursor position considering text glyphs\n    if (editMode) GuiDrawRectangle(cursor, 0, BLANK, Fade(GetColor(GuiGetStyle(TEXTBOX, BORDER_COLOR_PRESSED)), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return pressed;\n}\n\n// Slider control with pro parameters\n// NOTE: Other GuiSlider*() controls use this one\nfloat GuiSliderPro(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue, int sliderWidth)\n{\n    GuiState state = guiState;\n\n    int sliderValue = (int)(((value - minValue)/(maxValue - minValue))*(bounds.width - 2*GuiGetStyle(SLIDER, BORDER_WIDTH)));\n\n    Rectangle slider = { bounds.x, bounds.y + GuiGetStyle(SLIDER, BORDER_WIDTH) + GuiGetStyle(SLIDER, SLIDER_PADDING),\n                         0, bounds.height - 2*GuiGetStyle(SLIDER, BORDER_WIDTH) - 2*GuiGetStyle(SLIDER, SLIDER_PADDING) };\n\n    if (sliderWidth > 0)        // Slider\n    {\n        slider.x += (sliderValue - sliderWidth/2);\n        slider.width = (float)sliderWidth;\n    }\n    else if (sliderWidth == 0)  // SliderBar\n    {\n        slider.x += GuiGetStyle(SLIDER, BORDER_WIDTH);\n        slider.width = (float)sliderValue;\n    }\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))\n            {\n                state = STATE_PRESSED;\n\n                // Get equivalent value and slider position from mousePoint.x\n                value = ((maxValue - minValue)*(mousePoint.x - (float)(bounds.x + sliderWidth/2)))/(float)(bounds.width - sliderWidth) + minValue;\n\n                if (sliderWidth > 0) slider.x = mousePoint.x - slider.width/2;  // Slider\n                else if (sliderWidth == 0) slider.width = (float)sliderValue;          // SliderBar\n            }\n            else state = STATE_FOCUSED;\n        }\n\n        if (value > maxValue) value = maxValue;\n        else if (value < minValue) value = minValue;\n    }\n\n    // Bar limits check\n    if (sliderWidth > 0)        // Slider\n    {\n        if (slider.x <= (bounds.x + GuiGetStyle(SLIDER, BORDER_WIDTH))) slider.x = bounds.x + GuiGetStyle(SLIDER, BORDER_WIDTH);\n        else if ((slider.x + slider.width) >= (bounds.x + bounds.width)) slider.x = bounds.x + bounds.width - slider.width - GuiGetStyle(SLIDER, BORDER_WIDTH);\n    }\n    else if (sliderWidth == 0)  // SliderBar\n    {\n        if (slider.width > bounds.width) slider.width = bounds.width - 2*GuiGetStyle(SLIDER, BORDER_WIDTH);\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(SLIDER, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(SLIDER, BORDER + (state*3))), guiAlpha), Fade(GetColor(GuiGetStyle(SLIDER, (state != STATE_DISABLED)?  BASE_COLOR_NORMAL : BASE_COLOR_DISABLED)), guiAlpha));\n\n    // Draw slider internal bar (depends on state)\n    if ((state == STATE_NORMAL) || (state == STATE_PRESSED)) GuiDrawRectangle(slider, 0, BLANK, Fade(GetColor(GuiGetStyle(SLIDER, BASE_COLOR_PRESSED)), guiAlpha));\n    else if (state == STATE_FOCUSED) GuiDrawRectangle(slider, 0, BLANK, Fade(GetColor(GuiGetStyle(SLIDER, TEXT_COLOR_FOCUSED)), guiAlpha));\n\n    // Draw left/right text if provided\n    if (textLeft != NULL)\n    {\n        Rectangle textBounds = { 0 };\n        textBounds.width = (float)GetTextWidth(textLeft);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x - textBounds.width - GuiGetStyle(SLIDER, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n\n        GuiDrawText(textLeft, textBounds, TEXT_ALIGN_RIGHT, Fade(GetColor(GuiGetStyle(SLIDER, TEXT + (state*3))), guiAlpha));\n    }\n\n    if (textRight != NULL)\n    {\n        Rectangle textBounds = { 0 };\n        textBounds.width = (float)GetTextWidth(textRight);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x + bounds.width + GuiGetStyle(SLIDER, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n\n        GuiDrawText(textRight, textBounds, TEXT_ALIGN_LEFT, Fade(GetColor(GuiGetStyle(SLIDER, TEXT + (state*3))), guiAlpha));\n    }\n    //--------------------------------------------------------------------\n\n    return value;\n}\n\n// Slider control extended, returns selected value and has text\nfloat GuiSlider(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue)\n{\n    return GuiSliderPro(bounds, textLeft, textRight, value, minValue, maxValue, GuiGetStyle(SLIDER, SLIDER_WIDTH));\n}\n\n// Slider Bar control extended, returns selected value\nfloat GuiSliderBar(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue)\n{\n    return GuiSliderPro(bounds, textLeft, textRight, value, minValue, maxValue, 0);\n}\n\n// Progress Bar control extended, shows current progress value\nfloat GuiProgressBar(Rectangle bounds, const char *textLeft, const char *textRight, float value, float minValue, float maxValue)\n{\n    GuiState state = guiState;\n\n    Rectangle progress = { bounds.x + GuiGetStyle(PROGRESSBAR, BORDER_WIDTH),\n                           bounds.y + GuiGetStyle(PROGRESSBAR, BORDER_WIDTH) + GuiGetStyle(PROGRESSBAR, PROGRESS_PADDING), 0,\n                           bounds.height - 2*GuiGetStyle(PROGRESSBAR, BORDER_WIDTH) - 2*GuiGetStyle(PROGRESSBAR, PROGRESS_PADDING) };\n\n    // Update control\n    //--------------------------------------------------------------------\n    if (value > maxValue) value = maxValue;\n\n    if (state != STATE_DISABLED) progress.width = ((float)(value/(maxValue - minValue))*(float)(bounds.width - 2*GuiGetStyle(PROGRESSBAR, BORDER_WIDTH)));\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(PROGRESSBAR, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(PROGRESSBAR, BORDER + (state*3))), guiAlpha), BLANK);\n\n    // Draw slider internal progress bar (depends on state)\n    if ((state == STATE_NORMAL) || (state == STATE_PRESSED)) GuiDrawRectangle(progress, 0, BLANK, Fade(GetColor(GuiGetStyle(PROGRESSBAR, BASE_COLOR_PRESSED)), guiAlpha));\n    else if (state == STATE_FOCUSED) GuiDrawRectangle(progress, 0, BLANK, Fade(GetColor(GuiGetStyle(PROGRESSBAR, TEXT_COLOR_FOCUSED)), guiAlpha));\n\n    // Draw left/right text if provided\n    if (textLeft != NULL)\n    {\n        Rectangle textBounds = { 0 };\n        textBounds.width = (float)GetTextWidth(textLeft);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x - textBounds.width - GuiGetStyle(PROGRESSBAR, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n\n        GuiDrawText(textLeft, textBounds, TEXT_ALIGN_RIGHT, Fade(GetColor(GuiGetStyle(PROGRESSBAR, TEXT + (state*3))), guiAlpha));\n    }\n\n    if (textRight != NULL)\n    {\n        Rectangle textBounds = { 0 };\n        textBounds.width = (float)GetTextWidth(textRight);\n        textBounds.height = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        textBounds.x = bounds.x + bounds.width + GuiGetStyle(PROGRESSBAR, TEXT_PADDING);\n        textBounds.y = bounds.y + bounds.height/2 - GuiGetStyle(DEFAULT, TEXT_SIZE)/2;\n\n        GuiDrawText(textRight, textBounds, TEXT_ALIGN_LEFT, Fade(GetColor(GuiGetStyle(PROGRESSBAR, TEXT + (state*3))), guiAlpha));\n    }\n    //--------------------------------------------------------------------\n\n    return value;\n}\n\n// Status Bar control\nvoid GuiStatusBar(Rectangle bounds, const char *text)\n{\n    GuiState state = guiState;\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(STATUSBAR, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(STATUSBAR, (state != STATE_DISABLED)? BORDER_COLOR_NORMAL : BORDER_COLOR_DISABLED)), guiAlpha),\n                     Fade(GetColor(GuiGetStyle(STATUSBAR, (state != STATE_DISABLED)? BASE_COLOR_NORMAL : BASE_COLOR_DISABLED)), guiAlpha));\n    GuiDrawText(text, GetTextBounds(STATUSBAR, bounds), GuiGetStyle(STATUSBAR, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(STATUSBAR, (state != STATE_DISABLED)? TEXT_COLOR_NORMAL : TEXT_COLOR_DISABLED)), guiAlpha));\n    //--------------------------------------------------------------------\n}\n\n// Dummy rectangle control, intended for placeholding\nvoid GuiDummyRec(Rectangle bounds, const char *text)\n{\n    GuiState state = guiState;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check button state\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON)) state = STATE_PRESSED;\n            else state = STATE_FOCUSED;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, 0, BLANK, Fade(GetColor(GuiGetStyle(DEFAULT, (state != STATE_DISABLED)? BASE_COLOR_NORMAL : BASE_COLOR_DISABLED)), guiAlpha));\n    GuiDrawText(text, GetTextBounds(DEFAULT, bounds), TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(BUTTON, (state != STATE_DISABLED)? TEXT_COLOR_NORMAL : TEXT_COLOR_DISABLED)), guiAlpha));\n    //------------------------------------------------------------------\n}\n\n// List View control\nint GuiListView(Rectangle bounds, const char *text, int *scrollIndex, int active)\n{\n    int itemCount = 0;\n    const char **items = NULL;\n\n    if (text != NULL) items = GuiTextSplit(text, &itemCount, NULL);\n\n    return GuiListViewEx(bounds, items, itemCount, NULL, scrollIndex, active);\n}\n\n// List View control with extended parameters\nint GuiListViewEx(Rectangle bounds, const char **text, int count, int *focus, int *scrollIndex, int active)\n{\n    GuiState state = guiState;\n    int itemFocused = (focus == NULL)? -1 : *focus;\n    int itemSelected = active;\n\n    // Check if we need a scroll bar\n    bool useScrollBar = false;\n    if ((GuiGetStyle(LISTVIEW, LIST_ITEMS_HEIGHT) + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING))*count > bounds.height) useScrollBar = true;\n\n    // Define base item rectangle [0]\n    Rectangle itemBounds = { 0 };\n    itemBounds.x = bounds.x + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING);\n    itemBounds.y = bounds.y + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING) + GuiGetStyle(DEFAULT, BORDER_WIDTH);\n    itemBounds.width = bounds.width - 2*GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING) - GuiGetStyle(DEFAULT, BORDER_WIDTH);\n    itemBounds.height = (float)GuiGetStyle(LISTVIEW, LIST_ITEMS_HEIGHT);\n    if (useScrollBar) itemBounds.width -= GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH);\n\n    // Get items on the list\n    int visibleItems = (int)bounds.height/(GuiGetStyle(LISTVIEW, LIST_ITEMS_HEIGHT) + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING));\n    if (visibleItems > count) visibleItems = count;\n\n    int startIndex = (scrollIndex == NULL)? 0 : *scrollIndex;\n    if ((startIndex < 0) || (startIndex > (count - visibleItems))) startIndex = 0;\n    int endIndex = startIndex + visibleItems;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        // Check mouse inside list view\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            state = STATE_FOCUSED;\n\n            // Check focused and selected item\n            for (int i = 0; i < visibleItems; i++)\n            {\n                if (CheckCollisionPointRec(mousePoint, itemBounds))\n                {\n                    itemFocused = startIndex + i;\n                    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))\n                    {\n                        if (itemSelected == (startIndex + i)) itemSelected = -1;\n                        else itemSelected = startIndex + i;\n                    }\n                    break;\n                }\n\n                // Update item rectangle y position for next item\n                itemBounds.y += (GuiGetStyle(LISTVIEW, LIST_ITEMS_HEIGHT) + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING));\n            }\n\n            if (useScrollBar)\n            {\n                int wheelMove = (int)GetMouseWheelMove();\n                startIndex -= wheelMove;\n\n                if (startIndex < 0) startIndex = 0;\n                else if (startIndex > (count - visibleItems)) startIndex = count - visibleItems;\n\n                endIndex = startIndex + visibleItems;\n                if (endIndex > count) endIndex = count;\n            }\n        }\n        else itemFocused = -1;\n\n        // Reset item rectangle y to [0]\n        itemBounds.y = bounds.y + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING) + GuiGetStyle(DEFAULT, BORDER_WIDTH);\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(DEFAULT, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER + state*3)), guiAlpha), GetColor(GuiGetStyle(DEFAULT, BACKGROUND_COLOR)));     // Draw background\n\n    // Draw visible items\n    for (int i = 0; ((i < visibleItems) && (text != NULL)); i++)\n    {\n        if (state == STATE_DISABLED)\n        {\n            if ((startIndex + i) == itemSelected) GuiDrawRectangle(itemBounds, GuiGetStyle(LISTVIEW, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER_COLOR_DISABLED)), guiAlpha), Fade(GetColor(GuiGetStyle(LISTVIEW, BASE_COLOR_DISABLED)), guiAlpha));\n\n            GuiDrawText(text[startIndex + i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(LISTVIEW, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LISTVIEW, TEXT_COLOR_DISABLED)), guiAlpha));\n        }\n        else\n        {\n            if ((startIndex + i) == itemSelected)\n            {\n                // Draw item selected\n                GuiDrawRectangle(itemBounds, GuiGetStyle(LISTVIEW, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER_COLOR_PRESSED)), guiAlpha), Fade(GetColor(GuiGetStyle(LISTVIEW, BASE_COLOR_PRESSED)), guiAlpha));\n                GuiDrawText(text[startIndex + i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(LISTVIEW, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LISTVIEW, TEXT_COLOR_PRESSED)), guiAlpha));\n            }\n            else if ((startIndex + i) == itemFocused)\n            {\n                // Draw item focused\n                GuiDrawRectangle(itemBounds, GuiGetStyle(LISTVIEW, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER_COLOR_FOCUSED)), guiAlpha), Fade(GetColor(GuiGetStyle(LISTVIEW, BASE_COLOR_FOCUSED)), guiAlpha));\n                GuiDrawText(text[startIndex + i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(LISTVIEW, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LISTVIEW, TEXT_COLOR_FOCUSED)), guiAlpha));\n            }\n            else\n            {\n                // Draw item normal\n                GuiDrawText(text[startIndex + i], GetTextBounds(DEFAULT, itemBounds), GuiGetStyle(LISTVIEW, TEXT_ALIGNMENT), Fade(GetColor(GuiGetStyle(LISTVIEW, TEXT_COLOR_NORMAL)), guiAlpha));\n            }\n        }\n\n        // Update item rectangle y position for next item\n        itemBounds.y += (GuiGetStyle(LISTVIEW, LIST_ITEMS_HEIGHT) + GuiGetStyle(LISTVIEW, LIST_ITEMS_SPACING));\n    }\n\n    if (useScrollBar)\n    {\n        Rectangle scrollBarBounds = {\n            bounds.x + bounds.width - GuiGetStyle(LISTVIEW, BORDER_WIDTH) - GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH),\n            bounds.y + GuiGetStyle(LISTVIEW, BORDER_WIDTH), (float)GuiGetStyle(LISTVIEW, SCROLLBAR_WIDTH),\n            bounds.height - 2*GuiGetStyle(DEFAULT, BORDER_WIDTH)\n        };\n\n        // Calculate percentage of visible items and apply same percentage to scrollbar\n        float percentVisible = (float)(endIndex - startIndex)/count;\n        float sliderSize = bounds.height*percentVisible;\n\n        int prevSliderSize = GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE);   // Save default slider size\n        int prevScrollSpeed = GuiGetStyle(SCROLLBAR, SCROLL_SPEED); // Save default scroll speed\n        GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, (int)sliderSize);            // Change slider size\n        GuiSetStyle(SCROLLBAR, SCROLL_SPEED, count - visibleItems); // Change scroll speed\n\n        startIndex = GuiScrollBar(scrollBarBounds, startIndex, 0, count - visibleItems);\n\n        GuiSetStyle(SCROLLBAR, SCROLL_SPEED, prevScrollSpeed); // Reset scroll speed to default\n        GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, prevSliderSize); // Reset slider size to default\n    }\n    //--------------------------------------------------------------------\n\n    if (focus != NULL) *focus = itemFocused;\n    if (scrollIndex != NULL) *scrollIndex = startIndex;\n\n    return itemSelected;\n}\n\n// Color Panel control\nColor GuiColorPanel(Rectangle bounds, const char *text, Color color)\n{\n    const Color colWhite = { 255, 255, 255, 255 };\n    const Color colBlack = { 0, 0, 0, 255 };\n\n    GuiState state = guiState;\n    Vector2 pickerSelector = { 0 };\n\n    Vector3 vcolor = { (float)color.r/255.0f, (float)color.g/255.0f, (float)color.b/255.0f };\n    Vector3 hsv = ConvertRGBtoHSV(vcolor);\n\n    pickerSelector.x = bounds.x + (float)hsv.y*bounds.width;            // HSV: Saturation\n    pickerSelector.y = bounds.y + (1.0f - (float)hsv.z)*bounds.height;  // HSV: Value\n\n    float hue = -1.0f;\n    Vector3 maxHue = { hue >= 0.0f ? hue : hsv.x, 1.0f, 1.0f };\n    Vector3 rgbHue = ConvertHSVtoRGB(maxHue);\n    Color maxHueCol = { (unsigned char)(255.0f*rgbHue.x),\n                      (unsigned char)(255.0f*rgbHue.y),\n                      (unsigned char)(255.0f*rgbHue.z), 255 };\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))\n            {\n                state = STATE_PRESSED;\n                pickerSelector = mousePoint;\n\n                // Calculate color from picker\n                Vector2 colorPick = { pickerSelector.x - bounds.x, pickerSelector.y - bounds.y };\n\n                colorPick.x /= (float)bounds.width;     // Get normalized value on x\n                colorPick.y /= (float)bounds.height;    // Get normalized value on y\n\n                hsv.y = colorPick.x;\n                hsv.z = 1.0f - colorPick.y;\n\n                Vector3 rgb = ConvertHSVtoRGB(hsv);\n\n                // NOTE: Vector3ToColor() only available on raylib 1.8.1\n                color = RAYGUI_CLITERAL(Color){ (unsigned char)(255.0f*rgb.x),\n                                 (unsigned char)(255.0f*rgb.y),\n                                 (unsigned char)(255.0f*rgb.z),\n                                 (unsigned char)(255.0f*(float)color.a/255.0f) };\n\n            }\n            else state = STATE_FOCUSED;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (state != STATE_DISABLED)\n    {\n        DrawRectangleGradientEx(bounds, Fade(colWhite, guiAlpha), Fade(colWhite, guiAlpha), Fade(maxHueCol, guiAlpha), Fade(maxHueCol, guiAlpha));\n        DrawRectangleGradientEx(bounds, Fade(colBlack, 0), Fade(colBlack, guiAlpha), Fade(colBlack, guiAlpha), Fade(colBlack, 0));\n\n        // Draw color picker: selector\n        Rectangle selector = { pickerSelector.x - GuiGetStyle(COLORPICKER, COLOR_SELECTOR_SIZE)/2, pickerSelector.y - GuiGetStyle(COLORPICKER, COLOR_SELECTOR_SIZE)/2, (float)GuiGetStyle(COLORPICKER, COLOR_SELECTOR_SIZE), (float)GuiGetStyle(COLORPICKER, COLOR_SELECTOR_SIZE) };\n        GuiDrawRectangle(selector, 0, BLANK, Fade(colWhite, guiAlpha));\n    }\n    else\n    {\n        DrawRectangleGradientEx(bounds, Fade(Fade(GetColor(GuiGetStyle(COLORPICKER, BASE_COLOR_DISABLED)), 0.1f), guiAlpha), Fade(Fade(colBlack, 0.6f), guiAlpha), Fade(Fade(colBlack, 0.6f), guiAlpha), Fade(Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER_COLOR_DISABLED)), 0.6f), guiAlpha));\n    }\n\n    GuiDrawRectangle(bounds, GuiGetStyle(COLORPICKER, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER + state*3)), guiAlpha), BLANK);\n    //--------------------------------------------------------------------\n\n    return color;\n}\n\n// Color Bar Alpha control\n// NOTE: Returns alpha value normalized [0..1]\nfloat GuiColorBarAlpha(Rectangle bounds, const char *text, float alpha)\n{\n    #if !defined(RAYGUI_COLORBARALPHA_CHECKED_SIZE)\n        #define RAYGUI_COLORBARALPHA_CHECKED_SIZE   10\n    #endif\n\n    GuiState state = guiState;\n    Rectangle selector = { (float)bounds.x + alpha*bounds.width - GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_HEIGHT)/2, (float)bounds.y - GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_OVERFLOW), (float)GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_HEIGHT), (float)bounds.height + GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_OVERFLOW)*2 };\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds) ||\n            CheckCollisionPointRec(mousePoint, selector))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))\n            {\n                state = STATE_PRESSED;\n\n                alpha = (mousePoint.x - bounds.x)/bounds.width;\n                if (alpha <= 0.0f) alpha = 0.0f;\n                if (alpha >= 1.0f) alpha = 1.0f;\n                //selector.x = bounds.x + (int)(((alpha - 0)/(100 - 0))*(bounds.width - 2*GuiGetStyle(SLIDER, BORDER_WIDTH))) - selector.width/2;\n            }\n            else state = STATE_FOCUSED;\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n\n    // Draw alpha bar: checked background\n    if (state != STATE_DISABLED)\n    {\n        int checksX = (int)bounds.width/RAYGUI_COLORBARALPHA_CHECKED_SIZE;\n        int checksY = (int)bounds.height/RAYGUI_COLORBARALPHA_CHECKED_SIZE;\n\n        for (int x = 0; x < checksX; x++)\n        {\n            for (int y = 0; y < checksY; y++)\n            {\n                Rectangle check = { bounds.x + x*RAYGUI_COLORBARALPHA_CHECKED_SIZE, bounds.y + y*RAYGUI_COLORBARALPHA_CHECKED_SIZE, RAYGUI_COLORBARALPHA_CHECKED_SIZE, RAYGUI_COLORBARALPHA_CHECKED_SIZE };\n                GuiDrawRectangle(check, 0, BLANK, ((x + y)%2)? Fade(Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER_COLOR_DISABLED)), 0.4f), guiAlpha) : Fade(Fade(GetColor(GuiGetStyle(COLORPICKER, BASE_COLOR_DISABLED)), 0.4f), guiAlpha));\n            }\n        }\n\n        DrawRectangleGradientEx(bounds, RAYGUI_CLITERAL(Color){ 255, 255, 255, 0 }, RAYGUI_CLITERAL(Color){ 255, 255, 255, 0 }, Fade(RAYGUI_CLITERAL(Color){ 0, 0, 0, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color){ 0, 0, 0, 255 }, guiAlpha));\n    }\n    else DrawRectangleGradientEx(bounds, Fade(GetColor(GuiGetStyle(COLORPICKER, BASE_COLOR_DISABLED)), 0.1f), Fade(GetColor(GuiGetStyle(COLORPICKER, BASE_COLOR_DISABLED)), 0.1f), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER_COLOR_DISABLED)), guiAlpha), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER_COLOR_DISABLED)), guiAlpha));\n\n    GuiDrawRectangle(bounds, GuiGetStyle(COLORPICKER, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER + state*3)), guiAlpha), BLANK);\n\n    // Draw alpha bar: selector\n    GuiDrawRectangle(selector, 0, BLANK, Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER + state*3)), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return alpha;\n}\n\n// Color Bar Hue control\n// Returns hue value normalized [0..1]\n// NOTE: Other similar bars (for reference):\n//      Color GuiColorBarSat() [WHITE->color]\n//      Color GuiColorBarValue() [BLACK->color], HSV/HSL\n//      float GuiColorBarLuminance() [BLACK->WHITE]\nfloat GuiColorBarHue(Rectangle bounds, const char *text, float hue)\n{\n    GuiState state = guiState;\n    Rectangle selector = { (float)bounds.x - GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_OVERFLOW), (float)bounds.y + hue/360.0f*bounds.height - GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_HEIGHT)/2, (float)bounds.width + GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_OVERFLOW)*2, (float)GuiGetStyle(COLORPICKER, HUEBAR_SELECTOR_HEIGHT) };\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds) ||\n            CheckCollisionPointRec(mousePoint, selector))\n        {\n            if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))\n            {\n                state = STATE_PRESSED;\n\n                hue = (mousePoint.y - bounds.y)*360/bounds.height;\n                if (hue <= 0.0f) hue = 0.0f;\n                if (hue >= 359.0f) hue = 359.0f;\n\n            }\n            else state = STATE_FOCUSED;\n\n            /*if (IsKeyDown(KEY_UP))\n            {\n                hue -= 2.0f;\n                if (hue <= 0.0f) hue = 0.0f;\n            }\n            else if (IsKeyDown(KEY_DOWN))\n            {\n                hue += 2.0f;\n                if (hue >= 360.0f) hue = 360.0f;\n            }*/\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (state != STATE_DISABLED)\n    {\n        // Draw hue bar:color bars\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y), (int)bounds.width, (int)ceilf(bounds.height/6),  Fade(RAYGUI_CLITERAL(Color) { 255, 0, 0, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 255, 255, 0, 255 }, guiAlpha));\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y + bounds.height/6), (int)bounds.width, (int)ceilf(bounds.height/6), Fade(RAYGUI_CLITERAL(Color) { 255, 255, 0, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 0, 255, 0, 255 }, guiAlpha));\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y + 2*(bounds.height/6)), (int)bounds.width, (int)ceilf(bounds.height/6), Fade(RAYGUI_CLITERAL(Color) { 0, 255, 0, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 0, 255, 255, 255 }, guiAlpha));\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y + 3*(bounds.height/6)), (int)bounds.width, (int)ceilf(bounds.height/6), Fade(RAYGUI_CLITERAL(Color) { 0, 255, 255, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 0, 0, 255, 255 }, guiAlpha));\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y + 4*(bounds.height/6)), (int)bounds.width, (int)ceilf(bounds.height/6), Fade(RAYGUI_CLITERAL(Color) { 0, 0, 255, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 255, 0, 255, 255 }, guiAlpha));\n        DrawRectangleGradientV((int)bounds.x, (int)(bounds.y + 5*(bounds.height/6)), (int)bounds.width, (int)(bounds.height/6), Fade(RAYGUI_CLITERAL(Color) { 255, 0, 255, 255 }, guiAlpha), Fade(RAYGUI_CLITERAL(Color) { 255, 0, 0, 255 }, guiAlpha));\n    }\n    else DrawRectangleGradientV((int)bounds.x, (int)bounds.y, (int)bounds.width, (int)bounds.height, Fade(Fade(GetColor(GuiGetStyle(COLORPICKER, BASE_COLOR_DISABLED)), 0.1f), guiAlpha), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER_COLOR_DISABLED)), guiAlpha));\n\n    GuiDrawRectangle(bounds, GuiGetStyle(COLORPICKER, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER + state*3)), guiAlpha), BLANK);\n\n    // Draw hue bar: selector\n    GuiDrawRectangle(selector, 0, BLANK, Fade(GetColor(GuiGetStyle(COLORPICKER, BORDER + state*3)), guiAlpha));\n    //--------------------------------------------------------------------\n\n    return hue;\n}\n\n// Color Picker control\n// NOTE: It's divided in multiple controls:\n//      Color GuiColorPanel(Rectangle bounds, Color color)\n//      float GuiColorBarAlpha(Rectangle bounds, float alpha)\n//      float GuiColorBarHue(Rectangle bounds, float value)\n// NOTE: bounds define GuiColorPanel() size\nColor GuiColorPicker(Rectangle bounds, const char *text, Color color)\n{\n    color = GuiColorPanel(bounds, NULL, color);\n\n    Rectangle boundsHue = { (float)bounds.x + bounds.width + GuiGetStyle(COLORPICKER, HUEBAR_PADDING), (float)bounds.y, (float)GuiGetStyle(COLORPICKER, HUEBAR_WIDTH), (float)bounds.height };\n    //Rectangle boundsAlpha = { bounds.x, bounds.y + bounds.height + GuiGetStyle(COLORPICKER, BARS_PADDING), bounds.width, GuiGetStyle(COLORPICKER, BARS_THICK) };\n\n    Vector3 hsv = ConvertRGBtoHSV(RAYGUI_CLITERAL(Vector3){ color.r/255.0f, color.g/255.0f, color.b/255.0f });\n    hsv.x = GuiColorBarHue(boundsHue, NULL, hsv.x);\n    //color.a = (unsigned char)(GuiColorBarAlpha(boundsAlpha, (float)color.a/255.0f)*255.0f);\n    Vector3 rgb = ConvertHSVtoRGB(hsv);\n\n    color = RAYGUI_CLITERAL(Color){ (unsigned char)roundf(rgb.x*255.0f), (unsigned char)roundf(rgb.y*255.0f), (unsigned char)roundf(rgb.z*255.0f), color.a };\n\n    return color;\n}\n\n// Message Box control\nint GuiMessageBox(Rectangle bounds, const char *title, const char *message, const char *buttons)\n{\n    #if !defined(RAYGUI_MESSAGEBOX_BUTTON_HEIGHT)\n        #define RAYGUI_MESSAGEBOX_BUTTON_HEIGHT    24\n    #endif\n    #if !defined(RAYGUI_MESSAGEBOX_BUTTON_PADDING)\n        #define RAYGUI_MESSAGEBOX_BUTTON_PADDING   12\n    #endif\n\n    int clicked = -1;    // Returns clicked button from buttons list, 0 refers to closed window button\n\n    int buttonCount = 0;\n    const char **buttonsText = GuiTextSplit(buttons, &buttonCount, NULL);\n    Rectangle buttonBounds = { 0 };\n    buttonBounds.x = bounds.x + RAYGUI_MESSAGEBOX_BUTTON_PADDING;\n    buttonBounds.y = bounds.y + bounds.height - RAYGUI_MESSAGEBOX_BUTTON_HEIGHT - RAYGUI_MESSAGEBOX_BUTTON_PADDING;\n    buttonBounds.width = (bounds.width - RAYGUI_MESSAGEBOX_BUTTON_PADDING*(buttonCount + 1))/buttonCount;\n    buttonBounds.height = RAYGUI_MESSAGEBOX_BUTTON_HEIGHT;\n\n    Vector2 textSize = MeasureTextEx(guiFont, message, (float)GuiGetStyle(DEFAULT, TEXT_SIZE), 1);\n\n    Rectangle textBounds = { 0 };\n    textBounds.x = bounds.x + bounds.width/2 - textSize.x/2;\n    textBounds.y = bounds.y + RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT + RAYGUI_MESSAGEBOX_BUTTON_PADDING;\n    textBounds.width = textSize.x;\n    textBounds.height = bounds.height - RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT - 3*RAYGUI_MESSAGEBOX_BUTTON_PADDING - RAYGUI_MESSAGEBOX_BUTTON_HEIGHT;\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (GuiWindowBox(bounds, title)) clicked = 0;\n\n    int prevTextAlignment = GuiGetStyle(LABEL, TEXT_ALIGNMENT);\n    GuiSetStyle(LABEL, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n    GuiLabel(textBounds, message);\n    GuiSetStyle(LABEL, TEXT_ALIGNMENT, prevTextAlignment);\n\n    prevTextAlignment = GuiGetStyle(BUTTON, TEXT_ALIGNMENT);\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n\n    for (int i = 0; i < buttonCount; i++)\n    {\n        if (GuiButton(buttonBounds, buttonsText[i])) clicked = i + 1;\n        buttonBounds.x += (buttonBounds.width + RAYGUI_MESSAGEBOX_BUTTON_PADDING);\n    }\n\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, prevTextAlignment);\n    //--------------------------------------------------------------------\n\n    return clicked;\n}\n\n// Text Input Box control, ask for text\nint GuiTextInputBox(Rectangle bounds, const char *title, const char *message, const char *buttons, char *text, int textMaxSize, int *secretViewActive)\n{\n    #if !defined(RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT)\n        #define RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT      28\n    #endif\n    #if !defined(RAYGUI_TEXTINPUTBOX_BUTTON_PADDING)\n        #define RAYGUI_TEXTINPUTBOX_BUTTON_PADDING     12\n    #endif\n    #if !defined(RAYGUI_TEXTINPUTBOX_HEIGHT)\n        #define RAYGUI_TEXTINPUTBOX_HEIGHT             28\n    #endif\n\n    // Used to enable text edit mode\n    // WARNING: No more than one GuiTextInputBox() should be open at the same time\n    static bool textEditMode = false;\n\n    int btnIndex = -1;\n\n    int buttonCount = 0;\n    const char **buttonsText = GuiTextSplit(buttons, &buttonCount, NULL);\n    Rectangle buttonBounds = { 0 };\n    buttonBounds.x = bounds.x + RAYGUI_TEXTINPUTBOX_BUTTON_PADDING;\n    buttonBounds.y = bounds.y + bounds.height - RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT - RAYGUI_TEXTINPUTBOX_BUTTON_PADDING;\n    buttonBounds.width = (bounds.width - RAYGUI_TEXTINPUTBOX_BUTTON_PADDING*(buttonCount + 1))/buttonCount;\n    buttonBounds.height = RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT;\n\n    int messageInputHeight = (int)bounds.height - RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT - GuiGetStyle(STATUSBAR, BORDER_WIDTH) - RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT - 2*RAYGUI_TEXTINPUTBOX_BUTTON_PADDING;\n\n    Rectangle textBounds = { 0 };\n    if (message != NULL)\n    {\n        Vector2 textSize = MeasureTextEx(guiFont, message, (float)GuiGetStyle(DEFAULT, TEXT_SIZE), 1);\n\n        textBounds.x = bounds.x + bounds.width/2 - textSize.x/2;\n        textBounds.y = bounds.y + RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT + messageInputHeight/4 - textSize.y/2;\n        textBounds.width = textSize.x;\n        textBounds.height = textSize.y;\n    }\n\n    Rectangle textBoxBounds = { 0 };\n    textBoxBounds.x = bounds.x + RAYGUI_TEXTINPUTBOX_BUTTON_PADDING;\n    textBoxBounds.y = bounds.y + RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT - RAYGUI_TEXTINPUTBOX_HEIGHT/2;\n    if (message == NULL) textBoxBounds.y = bounds.y + 24 + RAYGUI_TEXTINPUTBOX_BUTTON_PADDING;\n    else textBoxBounds.y += (messageInputHeight/2 + messageInputHeight/4);\n    textBoxBounds.width = bounds.width - RAYGUI_TEXTINPUTBOX_BUTTON_PADDING*2;\n    textBoxBounds.height = RAYGUI_TEXTINPUTBOX_HEIGHT;\n\n    // Draw control\n    //--------------------------------------------------------------------\n    if (GuiWindowBox(bounds, title)) btnIndex = 0;\n\n    // Draw message if available\n    if (message != NULL)\n    {\n        int prevTextAlignment = GuiGetStyle(LABEL, TEXT_ALIGNMENT);\n        GuiSetStyle(LABEL, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n        GuiLabel(textBounds, message);\n        GuiSetStyle(LABEL, TEXT_ALIGNMENT, prevTextAlignment);\n    }\n\n    if (secretViewActive != NULL)\n    {\n        static char stars[] = \"****************\";\n        if (GuiTextBox(RAYGUI_CLITERAL(Rectangle){ textBoxBounds.x, textBoxBounds.y, textBoxBounds.width - 4 - RAYGUI_TEXTINPUTBOX_HEIGHT, textBoxBounds.height }, \n            ((*secretViewActive == 1) || textEditMode)? text : stars, textMaxSize, textEditMode)) textEditMode = !textEditMode;\n\n        *secretViewActive = GuiToggle(RAYGUI_CLITERAL(Rectangle){ textBoxBounds.x + textBoxBounds.width - RAYGUI_TEXTINPUTBOX_HEIGHT, textBoxBounds.y, RAYGUI_TEXTINPUTBOX_HEIGHT, RAYGUI_TEXTINPUTBOX_HEIGHT }, (*secretViewActive == 1)? \"#44#\" : \"#45#\", *secretViewActive);\n    }\n    else\n    {\n        if (GuiTextBox(textBoxBounds, text, textMaxSize, textEditMode)) textEditMode = !textEditMode;\n    }\n\n    int prevBtnTextAlignment = GuiGetStyle(BUTTON, TEXT_ALIGNMENT);\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER);\n\n    for (int i = 0; i < buttonCount; i++)\n    {\n        if (GuiButton(buttonBounds, buttonsText[i])) btnIndex = i + 1;\n        buttonBounds.x += (buttonBounds.width + RAYGUI_MESSAGEBOX_BUTTON_PADDING);\n    }\n\n    GuiSetStyle(BUTTON, TEXT_ALIGNMENT, prevBtnTextAlignment);\n    //--------------------------------------------------------------------\n\n    return btnIndex;\n}\n\n// Grid control\n// NOTE: Returns grid mouse-hover selected cell\n// About drawing lines at subpixel spacing, simple put, not easy solution:\n// https://stackoverflow.com/questions/4435450/2d-opengl-drawing-lines-that-dont-exactly-fit-pixel-raster\nVector2 GuiGrid(Rectangle bounds, const char *text, float spacing, int subdivs)\n{\n    // Grid lines alpha amount\n    #if !defined(RAYGUI_GRID_ALPHA)\n        #define RAYGUI_GRID_ALPHA    0.15f\n    #endif\n\n    GuiState state = guiState;\n    Vector2 mousePoint = GetMousePosition();\n    Vector2 currentCell = { -1, -1 };\n\n    int linesV = ((int)(bounds.width/spacing))*subdivs + 1;\n    int linesH = ((int)(bounds.height/spacing))*subdivs + 1;\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            // NOTE: Cell values must be rounded to int\n            currentCell.x = (int)((mousePoint.x - bounds.x)/spacing);\n            currentCell.y = (int)((mousePoint.y - bounds.y)/spacing);\n        }\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n\n    // TODO: Draw background panel?\n\n    switch (state)\n    {\n        case STATE_NORMAL:\n        {\n            if (subdivs > 0)\n            {\n                // Draw vertical grid lines\n                for (int i = 0; i < linesV; i++)\n                {\n                    Rectangle lineV = { bounds.x + spacing*i/subdivs, bounds.y, 1, bounds.height };\n                    GuiDrawRectangle(lineV, 0, BLANK, ((i%subdivs) == 0) ? Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), RAYGUI_GRID_ALPHA*4) : Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), RAYGUI_GRID_ALPHA));\n                }\n\n                // Draw horizontal grid lines\n                for (int i = 0; i < linesH; i++)\n                {\n                    Rectangle lineH = { bounds.x, bounds.y + spacing*i/subdivs, bounds.width, 1 };\n                    GuiDrawRectangle(lineH, 0, BLANK, ((i%subdivs) == 0) ? Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), RAYGUI_GRID_ALPHA*4) : Fade(GetColor(GuiGetStyle(DEFAULT, LINE_COLOR)), RAYGUI_GRID_ALPHA));\n                }\n            }\n        } break;\n        default: break;\n    }\n\n    return currentCell;\n}\n\n//----------------------------------------------------------------------------------\n// Styles loading functions\n//----------------------------------------------------------------------------------\n\n// Load raygui style file (.rgs)\n// NOTE: By default a binary file is expected, that file could contain a custom font,\n// in that case, custom font image atlas is GRAY+ALPHA and pixel data can be compressed (DEFLATE)\nvoid GuiLoadStyle(const char *fileName)\n{\n    #define MAX_LINE_BUFFER_SIZE    256\n\n    bool tryBinary = false;\n\n    // Try reading the files as text file first\n    FILE *rgsFile = fopen(fileName, \"rt\");\n\n    if (rgsFile != NULL)\n    {\n        char buffer[MAX_LINE_BUFFER_SIZE] = { 0 };\n        fgets(buffer, MAX_LINE_BUFFER_SIZE, rgsFile);\n\n        if (buffer[0] == '#')\n        {\n            int controlId = 0;\n            int propertyId = 0;\n            unsigned int propertyValue = 0;\n\n            while (!feof(rgsFile))\n            {\n                switch (buffer[0])\n                {\n                    case 'p':\n                    {\n                        // Style property: p <control_id> <property_id> <property_value> <property_name>\n\n                        sscanf(buffer, \"p %d %d 0x%x\", &controlId, &propertyId, &propertyValue);\n                        GuiSetStyle(controlId, propertyId, (int)propertyValue);\n\n                    } break;\n                    case 'f':\n                    {\n                        // Style font: f <gen_font_size> <charmap_file> <font_file>\n\n                        int fontSize = 0;\n                        char charmapFileName[256] = { 0 };\n                        char fontFileName[256] = { 0 };\n                        sscanf(buffer, \"f %d %s %[^\\r\\n]s\", &fontSize, charmapFileName, fontFileName);\n\n                        Font font = { 0 };\n\n                        if (charmapFileName[0] != '0')\n                        {\n                            // Load characters from charmap file,\n                            // expected '\\n' separated list of integer values\n                            char *charValues = LoadFileText(charmapFileName);\n                            if (charValues != NULL)\n                            {\n                                int glyphCount = 0;\n                                const char **chars = TextSplit(charValues, '\\n', &glyphCount);\n\n                                int *values = (int *)RAYGUI_MALLOC(glyphCount*sizeof(int));\n                                for (int i = 0; i < glyphCount; i++) values[i] = TextToInteger(chars[i]);\n\n                                if (font.texture.id != GetFontDefault().texture.id) UnloadTexture(font.texture);\n                                font = LoadFontEx(TextFormat(\"%s/%s\", GetDirectoryPath(fileName), fontFileName), fontSize, values, glyphCount);\n                                if (font.texture.id == 0) font = GetFontDefault();\n\n                                RAYGUI_FREE(values);\n                            }\n                        }\n                        else\n                        {\n                            if (font.texture.id != GetFontDefault().texture.id) UnloadTexture(font.texture);\n                            font = LoadFontEx(TextFormat(\"%s/%s\", GetDirectoryPath(fileName), fontFileName), fontSize, NULL, 0);\n                            if (font.texture.id == 0) font = GetFontDefault();\n                        }\n\n                        if ((font.texture.id > 0) && (font.glyphCount > 0)) GuiSetFont(font);\n\n                    } break;\n                    default: break;\n                }\n\n                fgets(buffer, MAX_LINE_BUFFER_SIZE, rgsFile);\n            }\n        }\n        else tryBinary = true;\n\n        fclose(rgsFile);\n    }\n\n    if (tryBinary)\n    {\n        rgsFile = fopen(fileName, \"rb\");\n\n        if (rgsFile == NULL) return;\n\n        char signature[5] = { 0 };\n        short version = 0;\n        short reserved = 0;\n        int propertyCount = 0;\n\n        fread(signature, 1, 4, rgsFile);\n        fread(&version, 1, sizeof(short), rgsFile);\n        fread(&reserved, 1, sizeof(short), rgsFile);\n        fread(&propertyCount, 1, sizeof(int), rgsFile);\n\n        if ((signature[0] == 'r') &&\n            (signature[1] == 'G') &&\n            (signature[2] == 'S') &&\n            (signature[3] == ' '))\n        {\n            short controlId = 0;\n            short propertyId = 0;\n            unsigned int propertyValue = 0;\n\n            for (int i = 0; i < propertyCount; i++)\n            {\n                fread(&controlId, 1, sizeof(short), rgsFile);\n                fread(&propertyId, 1, sizeof(short), rgsFile);\n                fread(&propertyValue, 1, sizeof(unsigned int), rgsFile);\n\n                if (controlId == 0) // DEFAULT control\n                {\n                    // If a DEFAULT property is loaded, it is propagated to all controls\n                    // NOTE: All DEFAULT properties should be defined first in the file\n                    GuiSetStyle(0, (int)propertyId, propertyValue);\n\n                    if (propertyId < RAYGUI_MAX_PROPS_BASE) for (int i = 1; i < RAYGUI_MAX_CONTROLS; i++) GuiSetStyle(i, (int)propertyId, propertyValue);\n                }\n                else GuiSetStyle((int)controlId, (int)propertyId, propertyValue);\n            }\n\n            // Font loading is highly dependant on raylib API to load font data and image\n#if !defined(RAYGUI_STANDALONE)\n            // Load custom font if available\n            int fontDataSize = 0;\n            fread(&fontDataSize, 1, sizeof(int), rgsFile);\n\n            if (fontDataSize > 0)\n            {\n                Font font = { 0 };\n                int fontType = 0;   // 0-Normal, 1-SDF\n                Rectangle whiteRec = { 0 };\n\n                fread(&font.baseSize, 1, sizeof(int), rgsFile);\n                fread(&font.glyphCount, 1, sizeof(int), rgsFile);\n                fread(&fontType, 1, sizeof(int), rgsFile);\n\n                // Load font white rectangle\n                fread(&whiteRec, 1, sizeof(Rectangle), rgsFile);\n\n                // Load font image parameters\n                int fontImageUncompSize = 0;\n                int fontImageCompSize = 0;\n                fread(&fontImageUncompSize, 1, sizeof(int), rgsFile);\n                fread(&fontImageCompSize, 1, sizeof(int), rgsFile);\n\n                Image imFont = { 0 };\n                imFont.mipmaps = 1;\n                fread(&imFont.width, 1, sizeof(int), rgsFile);\n                fread(&imFont.height, 1, sizeof(int), rgsFile);\n                fread(&imFont.format, 1, sizeof(int), rgsFile);\n\n                if (fontImageCompSize < fontImageUncompSize)\n                {\n                    // Compressed font atlas image data (DEFLATE), it requires DecompressData()\n                    int dataUncompSize = 0;\n                    unsigned char *compData = (unsigned char *)RAYGUI_MALLOC(fontImageCompSize);\n                    fread(compData, 1, fontImageCompSize, rgsFile);\n                    imFont.data = DecompressData(compData, fontImageCompSize, &dataUncompSize);\n\n                    // Security check, dataUncompSize must match the provided fontImageUncompSize\n                    if (dataUncompSize != fontImageUncompSize) RAYGUI_LOG(\"WARNING: Uncompressed font atlas image data could be corrupted\");\n\n                    RAYGUI_FREE(compData);\n                }\n                else\n                {\n                    // Font atlas image data is not compressed\n                    imFont.data = (unsigned char *)RAYGUI_MALLOC(fontImageUncompSize);\n                    fread(imFont.data, 1, fontImageUncompSize, rgsFile);\n                }\n\n                if (font.texture.id != GetFontDefault().texture.id) UnloadTexture(font.texture);\n                font.texture = LoadTextureFromImage(imFont);\n                if (font.texture.id == 0) font = GetFontDefault();\n\n                RAYGUI_FREE(imFont.data);\n\n                // Load font recs data\n                font.recs = (Rectangle *)RAYGUI_CALLOC(font.glyphCount, sizeof(Rectangle));\n                for (int i = 0; i < font.glyphCount; i++) fread(&font.recs[i], 1, sizeof(Rectangle), rgsFile);\n\n                // Load font chars info data\n                font.glyphs = (GlyphInfo *)RAYGUI_CALLOC(font.glyphCount, sizeof(GlyphInfo));\n                for (int i = 0; i < font.glyphCount; i++)\n                {\n                    fread(&font.glyphs[i].value, 1, sizeof(int), rgsFile);\n                    fread(&font.glyphs[i].offsetX, 1, sizeof(int), rgsFile);\n                    fread(&font.glyphs[i].offsetY, 1, sizeof(int), rgsFile);\n                    fread(&font.glyphs[i].advanceX, 1, sizeof(int), rgsFile);\n                }\n\n                GuiSetFont(font);\n\n                // Set font texture source rectangle to be used as white texture to draw shapes\n                // NOTE: This way, all gui can be draw using a single draw call\n                if ((whiteRec.width != 0) && (whiteRec.height != 0)) SetShapesTexture(font.texture, whiteRec);\n            }\n#endif\n        }\n\n        fclose(rgsFile);\n    }\n}\n\n// Load style default over global style\nvoid GuiLoadStyleDefault(void)\n{\n    // We set this variable first to avoid cyclic function calls\n    // when calling GuiSetStyle() and GuiGetStyle()\n    guiStyleLoaded = true;\n\n    // Initialize default LIGHT style property values\n    GuiSetStyle(DEFAULT, BORDER_COLOR_NORMAL, 0x838383ff);\n    GuiSetStyle(DEFAULT, BASE_COLOR_NORMAL, 0xc9c9c9ff);\n    GuiSetStyle(DEFAULT, TEXT_COLOR_NORMAL, 0x686868ff);\n    GuiSetStyle(DEFAULT, BORDER_COLOR_FOCUSED, 0x5bb2d9ff);\n    GuiSetStyle(DEFAULT, BASE_COLOR_FOCUSED, 0xc9effeff);\n    GuiSetStyle(DEFAULT, TEXT_COLOR_FOCUSED, 0x6c9bbcff);\n    GuiSetStyle(DEFAULT, BORDER_COLOR_PRESSED, 0x0492c7ff);\n    GuiSetStyle(DEFAULT, BASE_COLOR_PRESSED, 0x97e8ffff);\n    GuiSetStyle(DEFAULT, TEXT_COLOR_PRESSED, 0x368bafff);\n    GuiSetStyle(DEFAULT, BORDER_COLOR_DISABLED, 0xb5c1c2ff);\n    GuiSetStyle(DEFAULT, BASE_COLOR_DISABLED, 0xe6e9e9ff);\n    GuiSetStyle(DEFAULT, TEXT_COLOR_DISABLED, 0xaeb7b8ff);\n    GuiSetStyle(DEFAULT, BORDER_WIDTH, 1);                       // WARNING: Some controls use other values\n    GuiSetStyle(DEFAULT, TEXT_PADDING, 0);                       // WARNING: Some controls use other values\n    GuiSetStyle(DEFAULT, TEXT_ALIGNMENT, TEXT_ALIGN_CENTER); // WARNING: Some controls use other values\n\n    // Initialize control-specific property values\n    // NOTE: Those properties are in default list but require specific values by control type\n    GuiSetStyle(LABEL, TEXT_ALIGNMENT, TEXT_ALIGN_LEFT);\n    GuiSetStyle(BUTTON, BORDER_WIDTH, 2);\n    GuiSetStyle(SLIDER, TEXT_PADDING, 4);\n    GuiSetStyle(CHECKBOX, TEXT_PADDING, 4);\n    GuiSetStyle(CHECKBOX, TEXT_ALIGNMENT, TEXT_ALIGN_RIGHT);\n    GuiSetStyle(TEXTBOX, TEXT_PADDING, 4);\n    GuiSetStyle(TEXTBOX, TEXT_ALIGNMENT, TEXT_ALIGN_LEFT);\n    GuiSetStyle(VALUEBOX, TEXT_PADDING, 4);\n    GuiSetStyle(VALUEBOX, TEXT_ALIGNMENT, TEXT_ALIGN_LEFT);\n    GuiSetStyle(SPINNER, TEXT_PADDING, 4);\n    GuiSetStyle(SPINNER, TEXT_ALIGNMENT, TEXT_ALIGN_LEFT);\n    GuiSetStyle(STATUSBAR, TEXT_PADDING, 8);\n    GuiSetStyle(STATUSBAR, TEXT_ALIGNMENT, TEXT_ALIGN_LEFT);\n\n    // Initialize extended property values\n    // NOTE: By default, extended property values are initialized to 0\n    GuiSetStyle(DEFAULT, TEXT_SIZE, 10);                // DEFAULT, shared by all controls\n    GuiSetStyle(DEFAULT, TEXT_SPACING, 1);              // DEFAULT, shared by all controls\n    GuiSetStyle(DEFAULT, LINE_COLOR, 0x90abb5ff);       // DEFAULT specific property\n    GuiSetStyle(DEFAULT, BACKGROUND_COLOR, 0xf5f5f5ff); // DEFAULT specific property\n    GuiSetStyle(TOGGLE, GROUP_PADDING, 2);\n    GuiSetStyle(SLIDER, SLIDER_WIDTH, 16);\n    GuiSetStyle(SLIDER, SLIDER_PADDING, 1);\n    GuiSetStyle(PROGRESSBAR, PROGRESS_PADDING, 1);\n    GuiSetStyle(CHECKBOX, CHECK_PADDING, 1);\n    GuiSetStyle(COMBOBOX, COMBO_BUTTON_WIDTH, 32);\n    GuiSetStyle(COMBOBOX, COMBO_BUTTON_SPACING, 2);\n    GuiSetStyle(DROPDOWNBOX, ARROW_PADDING, 16);\n    GuiSetStyle(DROPDOWNBOX, DROPDOWN_ITEMS_SPACING, 2);\n    GuiSetStyle(TEXTBOX, TEXT_LINES_SPACING, 4);\n    GuiSetStyle(TEXTBOX, TEXT_INNER_PADDING, 4);\n    GuiSetStyle(SPINNER, SPIN_BUTTON_WIDTH, 24);\n    GuiSetStyle(SPINNER, SPIN_BUTTON_SPACING, 2);\n    GuiSetStyle(SCROLLBAR, BORDER_WIDTH, 0);\n    GuiSetStyle(SCROLLBAR, ARROWS_VISIBLE, 0);\n    GuiSetStyle(SCROLLBAR, ARROWS_SIZE, 6);\n    GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_PADDING, 0);\n    GuiSetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE, 16);\n    GuiSetStyle(SCROLLBAR, SCROLL_PADDING, 0);\n    GuiSetStyle(SCROLLBAR, SCROLL_SPEED, 12);\n    GuiSetStyle(LISTVIEW, LIST_ITEMS_HEIGHT, 24);\n    GuiSetStyle(LISTVIEW, LIST_ITEMS_SPACING, 2);\n    GuiSetStyle(LISTVIEW, SCROLLBAR_WIDTH, 12);\n    GuiSetStyle(LISTVIEW, SCROLLBAR_SIDE, SCROLLBAR_RIGHT_SIDE);\n    GuiSetStyle(COLORPICKER, COLOR_SELECTOR_SIZE, 8);\n    GuiSetStyle(COLORPICKER, HUEBAR_WIDTH, 16);\n    GuiSetStyle(COLORPICKER, HUEBAR_PADDING, 8);\n    GuiSetStyle(COLORPICKER, HUEBAR_SELECTOR_HEIGHT, 8);\n    GuiSetStyle(COLORPICKER, HUEBAR_SELECTOR_OVERFLOW, 2);\n\n    guiFont = GetFontDefault();     // Initialize default font\n}\n\n// Get text with icon id prepended\n// NOTE: Useful to add icons by name id (enum) instead of\n// a number that can change between ricon versions\nconst char *GuiIconText(int iconId, const char *text)\n{\n#if defined(RAYGUI_NO_ICONS)\n    return NULL;\n#else\n    static char buffer[1024] = { 0 };\n    static char iconBuffer[6] = { 0 };\n\n    if (text != NULL)\n    {\n        memset(buffer, 0, 1024);\n        sprintf(buffer, \"#%03i#\", iconId);\n        \n        for (int i = 5; i < 1024; i++)\n        {\n            buffer[i] = text[i - 5];\n            if (text[i - 5] == '\\0') break;\n        }\n    \n        return buffer;\n    }\n    else \n    {\n        sprintf(iconBuffer, \"#%03i#\", iconId & 0x1ff);\n        \n        return iconBuffer;\n    }\n#endif\n}\n\n#if !defined(RAYGUI_NO_ICONS)\n\n// Get full icons data pointer\nunsigned int *GuiGetIcons(void) { return guiIcons; }\n\n// Load raygui icons file (.rgi)\n// NOTE: In case nameIds are required, they can be requested with loadIconsName,\n// they are returned as a guiIconsName[iconCount][RAYGUI_ICON_MAX_NAME_LENGTH],\n// WARNING: guiIconsName[]][] memory should be manually freed!\nchar **GuiLoadIcons(const char *fileName, bool loadIconsName)\n{\n    // Style File Structure (.rgi)\n    // ------------------------------------------------------\n    // Offset  | Size    | Type       | Description\n    // ------------------------------------------------------\n    // 0       | 4       | char       | Signature: \"rGI \"\n    // 4       | 2       | short      | Version: 100\n    // 6       | 2       | short      | reserved\n\n    // 8       | 2       | short      | Num icons (N)\n    // 10      | 2       | short      | Icons size (Options: 16, 32, 64) (S)\n\n    // Icons name id (32 bytes per name id)\n    // foreach (icon)\n    // {\n    //   12+32*i  | 32   | char       | Icon NameId\n    // }\n\n    // Icons data: One bit per pixel, stored as unsigned int array (depends on icon size)\n    // S*S pixels/32bit per unsigned int = K unsigned int per icon\n    // foreach (icon)\n    // {\n    //   ...   | K       | unsigned int | Icon Data\n    // }\n\n    FILE *rgiFile = fopen(fileName, \"rb\");\n\n    char **guiIconsName = NULL;\n\n    if (rgiFile != NULL)\n    {\n        char signature[5] = { 0 };\n        short version = 0;\n        short reserved = 0;\n        short iconCount = 0;\n        short iconSize = 0;\n\n        fread(signature, 1, 4, rgiFile);\n        fread(&version, 1, sizeof(short), rgiFile);\n        fread(&reserved, 1, sizeof(short), rgiFile);\n        fread(&iconCount, 1, sizeof(short), rgiFile);\n        fread(&iconSize, 1, sizeof(short), rgiFile);\n\n        if ((signature[0] == 'r') &&\n            (signature[1] == 'G') &&\n            (signature[2] == 'I') &&\n            (signature[3] == ' '))\n        {\n            if (loadIconsName)\n            {\n                guiIconsName = (char **)RAYGUI_MALLOC(iconCount*sizeof(char **));\n                for (int i = 0; i < iconCount; i++)\n                {\n                    guiIconsName[i] = (char *)RAYGUI_MALLOC(RAYGUI_ICON_MAX_NAME_LENGTH);\n                    fread(guiIconsName[i], RAYGUI_ICON_MAX_NAME_LENGTH, 1, rgiFile);\n                }\n            }\n            else fseek(rgiFile, iconCount*RAYGUI_ICON_MAX_NAME_LENGTH, SEEK_CUR);\n\n            // Read icons data directly over guiIcons data array\n            fread(guiIcons, iconCount*(iconSize*iconSize/32), sizeof(unsigned int), rgiFile);\n        }\n\n        fclose(rgiFile);\n    }\n\n    return guiIconsName;\n}\n\n// Draw selected icon using rectangles pixel-by-pixel\nvoid GuiDrawIcon(int iconId, int posX, int posY, int pixelSize, Color color)\n{\n    #define BIT_CHECK(a,b) ((a) & (1u<<(b)))\n\n    for (int i = 0, y = 0; i < RAYGUI_ICON_SIZE*RAYGUI_ICON_SIZE/32; i++)\n    {\n        for (int k = 0; k < 32; k++)\n        {\n            if (BIT_CHECK(guiIcons[iconId*RAYGUI_ICON_DATA_ELEMENTS + i], k))\n            {\n            #if !defined(RAYGUI_STANDALONE)\n                DrawRectangle(posX + (k%RAYGUI_ICON_SIZE)*pixelSize, posY + y*pixelSize, pixelSize, pixelSize, color);\n            #endif\n            }\n\n            if ((k == 15) || (k == 31)) y++;\n        }\n    }\n}\n\n// Get icon bit data\n// NOTE: Bit data array grouped as unsigned int (RAYGUI_ICON_SIZE*RAYGUI_ICON_SIZE/32 elements)\nunsigned int *GuiGetIconData(int iconId)\n{\n    static unsigned int iconData[RAYGUI_ICON_DATA_ELEMENTS] = { 0 };\n    memset(iconData, 0, RAYGUI_ICON_DATA_ELEMENTS*sizeof(unsigned int));\n\n    if (iconId < RAYGUI_ICON_MAX_ICONS) memcpy(iconData, &guiIcons[iconId*RAYGUI_ICON_DATA_ELEMENTS], RAYGUI_ICON_DATA_ELEMENTS*sizeof(unsigned int));\n\n    return iconData;\n}\n\n// Set icon bit data\n// NOTE: Data must be provided as unsigned int array (RAYGUI_ICON_SIZE*RAYGUI_ICON_SIZE/32 elements)\nvoid GuiSetIconData(int iconId, unsigned int *data)\n{\n    if (iconId < RAYGUI_ICON_MAX_ICONS) memcpy(&guiIcons[iconId*RAYGUI_ICON_DATA_ELEMENTS], data, RAYGUI_ICON_DATA_ELEMENTS*sizeof(unsigned int));\n}\n\n// Set icon scale (1 by default)\nvoid GuiSetIconScale(unsigned int scale)\n{\n    guiIconScale = (scale < 1)? 1 : scale;\n}\n\n// Set icon pixel value\nvoid GuiSetIconPixel(int iconId, int x, int y)\n{\n    #define BIT_SET(a,b)   ((a) |= (1u<<(b)))\n\n    // This logic works for any RAYGUI_ICON_SIZE pixels icons,\n    // For example, in case of 16x16 pixels, every 2 lines fit in one unsigned int data element\n    BIT_SET(guiIcons[iconId*RAYGUI_ICON_DATA_ELEMENTS + y/(sizeof(unsigned int)*8/RAYGUI_ICON_SIZE)], x + (y%(sizeof(unsigned int)*8/RAYGUI_ICON_SIZE)*RAYGUI_ICON_SIZE));\n}\n\n// Clear icon pixel value\nvoid GuiClearIconPixel(int iconId, int x, int y)\n{\n    #define BIT_CLEAR(a,b) ((a) &= ~((1u)<<(b)))\n\n    // This logic works for any RAYGUI_ICON_SIZE pixels icons,\n    // For example, in case of 16x16 pixels, every 2 lines fit in one unsigned int data element\n    BIT_CLEAR(guiIcons[iconId*RAYGUI_ICON_DATA_ELEMENTS + y/(sizeof(unsigned int)*8/RAYGUI_ICON_SIZE)], x + (y%(sizeof(unsigned int)*8/RAYGUI_ICON_SIZE)*RAYGUI_ICON_SIZE));\n}\n\n// Check icon pixel value\nbool GuiCheckIconPixel(int iconId, int x, int y)\n{\n    #define BIT_CHECK(a,b) ((a) & (1u<<(b)))\n\n    return (BIT_CHECK(guiIcons[iconId*8 + y/2], x + (y%2*16)));\n}\n#endif      // !RAYGUI_NO_ICONS\n\n//----------------------------------------------------------------------------------\n// Module specific Functions Definition\n//----------------------------------------------------------------------------------\n// Gui get text width considering icon\nstatic int GetTextWidth(const char *text)\n{\n    #if !defined(ICON_TEXT_PADDING)\n        #define ICON_TEXT_PADDING   4\n    #endif\n\n    Vector2 size = { 0 };\n    int textIconOffset = 0;\n\n    if ((text != NULL) && (text[0] != '\\0'))\n    {\n        if (text[0] == '#')\n        {\n            for (int i = 1; (text[i] != '\\0') && (i < 5); i++)\n            {\n                if (text[i] == '#')\n                {\n                    textIconOffset = i;\n                    break;\n                }\n            }\n        }\n        \n        // Make sure guiFont is set, GuiGetStyle() initializes it lazynessly\n        float fontSize = (float)GuiGetStyle(DEFAULT, TEXT_SIZE);\n        \n        size = MeasureTextEx(guiFont, text + textIconOffset, fontSize, (float)GuiGetStyle(DEFAULT, TEXT_SPACING));\n        if (textIconOffset > 0) size.x += (RAYGUI_ICON_SIZE - ICON_TEXT_PADDING);\n    }\n\n    return (int)size.x;\n}\n\n// Get text bounds considering control bounds\nstatic Rectangle GetTextBounds(int control, Rectangle bounds)\n{\n    Rectangle textBounds = bounds;\n\n    textBounds.x = bounds.x + GuiGetStyle(control, BORDER_WIDTH);\n    textBounds.y = bounds.y + GuiGetStyle(control, BORDER_WIDTH);\n    textBounds.width = bounds.width - 2*GuiGetStyle(control, BORDER_WIDTH);\n    textBounds.height = bounds.height - 2*GuiGetStyle(control, BORDER_WIDTH);\n\n    // Consider TEXT_PADDING properly, depends on control type and TEXT_ALIGNMENT\n    switch (control)\n    {\n        case COMBOBOX: bounds.width -= (GuiGetStyle(control, COMBO_BUTTON_WIDTH) + GuiGetStyle(control, COMBO_BUTTON_SPACING)); break;\n        case VALUEBOX: break;   // NOTE: ValueBox text value always centered, text padding applies to label\n        default:\n        {\n            if (GuiGetStyle(control, TEXT_ALIGNMENT) == TEXT_ALIGN_RIGHT) textBounds.x -= GuiGetStyle(control, TEXT_PADDING);\n            else textBounds.x += GuiGetStyle(control, TEXT_PADDING);\n        } break;\n    }\n\n    // TODO: Special cases (no label): COMBOBOX, DROPDOWNBOX, LISTVIEW (scrollbar?)\n    // More special cases (label on side): CHECKBOX, SLIDER, VALUEBOX, SPINNER\n\n    return textBounds;\n}\n\n// Get text icon if provided and move text cursor\n// NOTE: We support up to 999 values for iconId\nstatic const char *GetTextIcon(const char *text, int *iconId)\n{\n#if !defined(RAYGUI_NO_ICONS)\n    *iconId = -1;\n    if (text[0] == '#')     // Maybe we have an icon!\n    {\n        char iconValue[4] = { 0 };  // Maximum length for icon value: 3 digits + '\\0'\n\n        int pos = 1;\n        while ((pos < 4) && (text[pos] >= '0') && (text[pos] <= '9'))\n        {\n            iconValue[pos - 1] = text[pos];\n            pos++;\n        }\n\n        if (text[pos] == '#')\n        {\n            *iconId = TextToInteger(iconValue);\n\n            // Move text pointer after icon\n            // WARNING: If only icon provided, it could point to EOL character: '\\0'\n            if (*iconId >= 0) text += (pos + 1);\n        }\n    }\n#endif\n\n    return text;\n}\n\n// Gui draw text using default font\nstatic void GuiDrawText(const char *text, Rectangle bounds, int alignment, Color tint)\n{\n    #define TEXT_VALIGN_PIXEL_OFFSET(h)  ((int)h%2)     // Vertical alignment for pixel perfect\n\n    #if !defined(ICON_TEXT_PADDING)\n        #define ICON_TEXT_PADDING   4\n    #endif\n\n    if ((text != NULL) && (text[0] != '\\0'))\n    {\n        int iconId = 0;\n        text = GetTextIcon(text, &iconId);              // Check text for icon and move cursor\n\n        // Get text position depending on alignment and iconId\n        //---------------------------------------------------------------------------------\n        Vector2 position = { bounds.x, bounds.y };\n\n        // NOTE: We get text size after icon has been processed\n        // TODO: REVIEW: We consider text size in case of line breaks! -> MeasureTextEx() depends on raylib!\n        Vector2 textSize = MeasureTextEx(GuiGetFont(), text, GuiGetStyle(DEFAULT, TEXT_SIZE), GuiGetStyle(DEFAULT, TEXT_SPACING));\n        //int textWidth = GetTextWidth(text);\n        //int textHeight = GuiGetStyle(DEFAULT, TEXT_SIZE);\n\n        // If text requires an icon, add size to measure\n        if (iconId >= 0)\n        {\n            textSize.x += RAYGUI_ICON_SIZE*guiIconScale;\n\n            // WARNING: If only icon provided, text could be pointing to EOF character: '\\0'\n            if ((text != NULL) && (text[0] != '\\0')) textSize.x += ICON_TEXT_PADDING;\n        }\n\n        // Check guiTextAlign global variables\n        switch (alignment)\n        {\n            case TEXT_ALIGN_LEFT:\n            {\n                position.x = bounds.x;\n                position.y = bounds.y + bounds.height/2 - textSize.y/2 + TEXT_VALIGN_PIXEL_OFFSET(bounds.height);\n            } break;\n            case TEXT_ALIGN_CENTER:\n            {\n                position.x = bounds.x + bounds.width/2 - textSize.x/2;\n                position.y = bounds.y + bounds.height/2 - textSize.y/2 + TEXT_VALIGN_PIXEL_OFFSET(bounds.height);\n            } break;\n            case TEXT_ALIGN_RIGHT:\n            {\n                position.x = bounds.x + bounds.width - textSize.x;\n                position.y = bounds.y + bounds.height/2 - textSize.y/2 + TEXT_VALIGN_PIXEL_OFFSET(bounds.height);\n            } break;\n            default: break;\n        }\n\n        // NOTE: Make sure we get pixel-perfect coordinates,\n        // In case of decimals we got weird text positioning\n        position.x = (float)((int)position.x);\n        position.y = (float)((int)position.y);\n        //---------------------------------------------------------------------------------\n\n        // Draw text (with icon if available)\n        //---------------------------------------------------------------------------------\n#if !defined(RAYGUI_NO_ICONS)\n        if (iconId >= 0)\n        {\n            // NOTE: We consider icon height, probably different than text size\n            GuiDrawIcon(iconId, (int)position.x, (int)(bounds.y + bounds.height/2 - RAYGUI_ICON_SIZE*guiIconScale/2 + TEXT_VALIGN_PIXEL_OFFSET(bounds.height)), guiIconScale, tint);\n            position.x += (RAYGUI_ICON_SIZE*guiIconScale + ICON_TEXT_PADDING);\n        }\n#endif\n        DrawTextEx(guiFont, text, position, (float)GuiGetStyle(DEFAULT, TEXT_SIZE), (float)GuiGetStyle(DEFAULT, TEXT_SPACING), tint);\n        //---------------------------------------------------------------------------------\n    }\n}\n\n// Gui draw rectangle using default raygui plain style with borders\nstatic void GuiDrawRectangle(Rectangle rec, int borderWidth, Color borderColor, Color color)\n{\n    if (color.a > 0)\n    {\n        // Draw rectangle filled with color\n        DrawRectangle((int)rec.x, (int)rec.y, (int)rec.width, (int)rec.height, color);\n    }\n\n    if (borderWidth > 0)\n    {\n        // Draw rectangle border lines with color\n        DrawRectangle((int)rec.x, (int)rec.y, (int)rec.width, borderWidth, borderColor);\n        DrawRectangle((int)rec.x, (int)rec.y + borderWidth, borderWidth, (int)rec.height - 2*borderWidth, borderColor);\n        DrawRectangle((int)rec.x + (int)rec.width - borderWidth, (int)rec.y + borderWidth, borderWidth, (int)rec.height - 2*borderWidth, borderColor);\n        DrawRectangle((int)rec.x, (int)rec.y + (int)rec.height - borderWidth, (int)rec.width, borderWidth, borderColor);\n    }\n}\n\n// Split controls text into multiple strings\n// Also check for multiple columns (required by GuiToggleGroup())\nstatic const char **GuiTextSplit(const char *text, int *count, int *textRow)\n{\n    // NOTE: Current implementation returns a copy of the provided string with '\\0' (string end delimiter)\n    // inserted between strings defined by \"delimiter\" parameter. No memory is dynamically allocated,\n    // all used memory is static... it has some limitations:\n    //      1. Maximum number of possible split strings is set by RAYGUI_TEXTSPLIT_MAX_ITEMS\n    //      2. Maximum size of text to split is RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE\n    // NOTE: Those definitions could be externally provided if required\n\n    #if !defined(RAYGUI_TEXTSPLIT_MAX_ITEMS)\n        #define RAYGUI_TEXTSPLIT_MAX_ITEMS        128\n    #endif\n    #if !defined(RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE)\n        #define RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE      1024\n    #endif\n\n    static const char *result[RAYGUI_TEXTSPLIT_MAX_ITEMS] = { NULL };\n    static char buffer[RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE] = { 0 };\n    memset(buffer, 0, RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE);\n\n    result[0] = buffer;\n    int counter = 1;\n\n    if (textRow != NULL) textRow[0] = 0;\n\n    // Count how many substrings we have on text and point to every one\n    for (int i = 0; i < RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE; i++)\n    {\n        buffer[i] = text[i];\n        if (buffer[i] == '\\0') break;\n        else if ((buffer[i] == ';') || (buffer[i] == '\\n'))\n        {\n            result[counter] = buffer + i + 1;\n\n            if (textRow != NULL)\n            {\n                if (buffer[i] == '\\n') textRow[counter] = textRow[counter - 1] + 1;\n                else textRow[counter] = textRow[counter - 1];\n            }\n\n            buffer[i] = '\\0';   // Set an end of string at this point\n\n            counter++;\n            if (counter == RAYGUI_TEXTSPLIT_MAX_ITEMS) break;\n        }\n    }\n\n    *count = counter;\n\n    return result;\n}\n\n// Convert color data from RGB to HSV\n// NOTE: Color data should be passed normalized\nstatic Vector3 ConvertRGBtoHSV(Vector3 rgb)\n{\n    Vector3 hsv = { 0 };\n    float min = 0.0f;\n    float max = 0.0f;\n    float delta = 0.0f;\n\n    min = (rgb.x < rgb.y)? rgb.x : rgb.y;\n    min = (min < rgb.z)? min  : rgb.z;\n\n    max = (rgb.x > rgb.y)? rgb.x : rgb.y;\n    max = (max > rgb.z)? max  : rgb.z;\n\n    hsv.z = max;            // Value\n    delta = max - min;\n\n    if (delta < 0.00001f)\n    {\n        hsv.y = 0.0f;\n        hsv.x = 0.0f;           // Undefined, maybe NAN?\n        return hsv;\n    }\n\n    if (max > 0.0f)\n    {\n        // NOTE: If max is 0, this divide would cause a crash\n        hsv.y = (delta/max);    // Saturation\n    }\n    else\n    {\n        // NOTE: If max is 0, then r = g = b = 0, s = 0, h is undefined\n        hsv.y = 0.0f;\n        hsv.x = 0.0f;           // Undefined, maybe NAN?\n        return hsv;\n    }\n\n    // NOTE: Comparing float values could not work properly\n    if (rgb.x >= max) hsv.x = (rgb.y - rgb.z)/delta;    // Between yellow & magenta\n    else\n    {\n        if (rgb.y >= max) hsv.x = 2.0f + (rgb.z - rgb.x)/delta;  // Between cyan & yellow\n        else hsv.x = 4.0f + (rgb.x - rgb.y)/delta;      // Between magenta & cyan\n    }\n\n    hsv.x *= 60.0f;     // Convert to degrees\n\n    if (hsv.x < 0.0f) hsv.x += 360.0f;\n\n    return hsv;\n}\n\n// Convert color data from HSV to RGB\n// NOTE: Color data should be passed normalized\nstatic Vector3 ConvertHSVtoRGB(Vector3 hsv)\n{\n    Vector3 rgb = { 0 };\n    float hh = 0.0f, p = 0.0f, q = 0.0f, t = 0.0f, ff = 0.0f;\n    long i = 0;\n\n    // NOTE: Comparing float values could not work properly\n    if (hsv.y <= 0.0f)\n    {\n        rgb.x = hsv.z;\n        rgb.y = hsv.z;\n        rgb.z = hsv.z;\n        return rgb;\n    }\n\n    hh = hsv.x;\n    if (hh >= 360.0f) hh = 0.0f;\n    hh /= 60.0f;\n\n    i = (long)hh;\n    ff = hh - i;\n    p = hsv.z*(1.0f - hsv.y);\n    q = hsv.z*(1.0f - (hsv.y*ff));\n    t = hsv.z*(1.0f - (hsv.y*(1.0f - ff)));\n\n    switch (i)\n    {\n        case 0:\n        {\n            rgb.x = hsv.z;\n            rgb.y = t;\n            rgb.z = p;\n        } break;\n        case 1:\n        {\n            rgb.x = q;\n            rgb.y = hsv.z;\n            rgb.z = p;\n        } break;\n        case 2:\n        {\n            rgb.x = p;\n            rgb.y = hsv.z;\n            rgb.z = t;\n        } break;\n        case 3:\n        {\n            rgb.x = p;\n            rgb.y = q;\n            rgb.z = hsv.z;\n        } break;\n        case 4:\n        {\n            rgb.x = t;\n            rgb.y = p;\n            rgb.z = hsv.z;\n        } break;\n        case 5:\n        default:\n        {\n            rgb.x = hsv.z;\n            rgb.y = p;\n            rgb.z = q;\n        } break;\n    }\n\n    return rgb;\n}\n\n// Scroll bar control (used by GuiScrollPanel())\nstatic int GuiScrollBar(Rectangle bounds, int value, int minValue, int maxValue)\n{\n    GuiState state = guiState;\n\n    // Is the scrollbar horizontal or vertical?\n    bool isVertical = (bounds.width > bounds.height) ? false : true;\n\n    // The size (width or height depending on scrollbar type) of the spinner buttons\n    const int spinnerSize = GuiGetStyle(SCROLLBAR, ARROWS_VISIBLE) ? (isVertical ? (int)bounds.width - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH) : (int)bounds.height - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH)) : 0;\n\n    // Arrow buttons [<] [>] [∧] [∨]\n    Rectangle arrowUpLeft = { 0 };\n    Rectangle arrowDownRight = { 0 };\n\n    // Actual area of the scrollbar excluding the arrow buttons\n    Rectangle scrollbar = { 0 };\n\n    // Slider bar that moves     --[///]-----\n    Rectangle slider = { 0 };\n\n    // Normalize value\n    if (value > maxValue) value = maxValue;\n    if (value < minValue) value = minValue;\n\n    const int range = maxValue - minValue;\n    int sliderSize = GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_SIZE);\n\n    // Calculate rectangles for all of the components\n    arrowUpLeft = RAYGUI_CLITERAL(Rectangle) { (float)bounds.x + GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)bounds.y + GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)spinnerSize, (float)spinnerSize };\n\n    if (isVertical)\n    {\n        arrowDownRight = RAYGUI_CLITERAL(Rectangle) { (float)bounds.x + GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)bounds.y + bounds.height - spinnerSize - GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)spinnerSize, (float)spinnerSize };\n        scrollbar = RAYGUI_CLITERAL(Rectangle) { bounds.x + GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_PADDING), arrowUpLeft.y + arrowUpLeft.height, bounds.width - 2*(GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_PADDING)), bounds.height - arrowUpLeft.height - arrowDownRight.height - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH) };\n        sliderSize = (sliderSize >= scrollbar.height) ? ((int)scrollbar.height - 2) : sliderSize;     // Make sure the slider won't get outside of the scrollbar\n        slider = RAYGUI_CLITERAL(Rectangle) { (float)bounds.x + GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_PADDING), (float)scrollbar.y + (int)(((float)(value - minValue)/range)*(scrollbar.height - sliderSize)), (float)bounds.width - 2*(GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_PADDING)), (float)sliderSize };\n    }\n    else\n    {\n        arrowDownRight = RAYGUI_CLITERAL(Rectangle) { (float)bounds.x + bounds.width - spinnerSize - GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)bounds.y + GuiGetStyle(SCROLLBAR, BORDER_WIDTH), (float)spinnerSize, (float)spinnerSize };\n        scrollbar = RAYGUI_CLITERAL(Rectangle) { arrowUpLeft.x + arrowUpLeft.width, bounds.y + GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_PADDING), bounds.width - arrowUpLeft.width - arrowDownRight.width - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH), bounds.height - 2*(GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_PADDING)) };\n        sliderSize = (sliderSize >= scrollbar.width) ? ((int)scrollbar.width - 2) : sliderSize;       // Make sure the slider won't get outside of the scrollbar\n        slider = RAYGUI_CLITERAL(Rectangle) { (float)scrollbar.x + (int)(((float)(value - minValue)/range)*(scrollbar.width - sliderSize)), (float)bounds.y + GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_PADDING), (float)sliderSize, (float)bounds.height - 2*(GuiGetStyle(SCROLLBAR, BORDER_WIDTH) + GuiGetStyle(SCROLLBAR, SCROLL_SLIDER_PADDING)) };\n    }\n\n    // Update control\n    //--------------------------------------------------------------------\n    if ((state != STATE_DISABLED) && !guiLocked)\n    {\n        Vector2 mousePoint = GetMousePosition();\n\n        if (CheckCollisionPointRec(mousePoint, bounds))\n        {\n            state = STATE_FOCUSED;\n\n            // Handle mouse wheel\n            int wheel = (int)GetMouseWheelMove();\n            if (wheel != 0) value += wheel;\n\n            if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON))\n            {\n                if (CheckCollisionPointRec(mousePoint, arrowUpLeft)) value -= range/GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n                else if (CheckCollisionPointRec(mousePoint, arrowDownRight)) value += range/GuiGetStyle(SCROLLBAR, SCROLL_SPEED);\n\n                state = STATE_PRESSED;\n            }\n            else if (IsMouseButtonDown(MOUSE_LEFT_BUTTON))\n            {\n                if (!isVertical)\n                {\n                    Rectangle scrollArea = { arrowUpLeft.x + arrowUpLeft.width, arrowUpLeft.y, scrollbar.width, bounds.height - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH) };\n                    if (CheckCollisionPointRec(mousePoint, scrollArea)) value = (int)(((float)(mousePoint.x - scrollArea.x - slider.width/2)*range)/(scrollArea.width - slider.width) + minValue);\n                }\n                else\n                {\n                    Rectangle scrollArea = { arrowUpLeft.x, arrowUpLeft.y+arrowUpLeft.height, bounds.width - 2*GuiGetStyle(SCROLLBAR, BORDER_WIDTH),  scrollbar.height };\n                    if (CheckCollisionPointRec(mousePoint, scrollArea)) value = (int)(((float)(mousePoint.y - scrollArea.y - slider.height/2)*range)/(scrollArea.height - slider.height) + minValue);\n                }\n            }\n        }\n\n        // Normalize value\n        if (value > maxValue) value = maxValue;\n        if (value < minValue) value = minValue;\n    }\n    //--------------------------------------------------------------------\n\n    // Draw control\n    //--------------------------------------------------------------------\n    GuiDrawRectangle(bounds, GuiGetStyle(SCROLLBAR, BORDER_WIDTH), Fade(GetColor(GuiGetStyle(LISTVIEW, BORDER + state*3)), guiAlpha), Fade(GetColor(GuiGetStyle(DEFAULT, BORDER_COLOR_DISABLED)), guiAlpha));   // Draw the background\n\n    GuiDrawRectangle(scrollbar, 0, BLANK, Fade(GetColor(GuiGetStyle(BUTTON, BASE_COLOR_NORMAL)), guiAlpha));     // Draw the scrollbar active area background\n    GuiDrawRectangle(slider, 0, BLANK, Fade(GetColor(GuiGetStyle(SLIDER, BORDER + state*3)), guiAlpha));         // Draw the slider bar\n\n    // Draw arrows (using icon if available)\n    if (GuiGetStyle(SCROLLBAR, ARROWS_VISIBLE))\n    {\n#if defined(RAYGUI_NO_ICONS)\n        GuiDrawText(isVertical ? \"^\" : \"<\", RAYGUI_CLITERAL(Rectangle){ arrowUpLeft.x, arrowUpLeft.y, isVertical ? bounds.width : bounds.height, isVertical ? bounds.width : bounds.height },\n            TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + (state*3))), guiAlpha));\n        GuiDrawText(isVertical ? \"v\" : \">\", RAYGUI_CLITERAL(Rectangle){ arrowDownRight.x, arrowDownRight.y, isVertical ? bounds.width : bounds.height, isVertical ? bounds.width : bounds.height },\n            TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(DROPDOWNBOX, TEXT + (state*3))), guiAlpha));\n#else\n        GuiDrawText(isVertical ? \"#121#\" : \"#118#\", RAYGUI_CLITERAL(Rectangle){ arrowUpLeft.x, arrowUpLeft.y, isVertical ? bounds.width : bounds.height, isVertical ? bounds.width : bounds.height },\n            TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(SCROLLBAR, TEXT + state*3)), guiAlpha));   // ICON_ARROW_UP_FILL / ICON_ARROW_LEFT_FILL\n        GuiDrawText(isVertical ? \"#120#\" : \"#119#\", RAYGUI_CLITERAL(Rectangle){ arrowDownRight.x, arrowDownRight.y, isVertical ? bounds.width : bounds.height, isVertical ? bounds.width : bounds.height },\n            TEXT_ALIGN_CENTER, Fade(GetColor(GuiGetStyle(SCROLLBAR, TEXT + state*3)), guiAlpha));   // ICON_ARROW_DOWN_FILL / ICON_ARROW_RIGHT_FILL\n#endif\n    }\n    //--------------------------------------------------------------------\n\n    return value;\n}\n\n#if defined(RAYGUI_STANDALONE)\n// Returns a Color struct from hexadecimal value\nstatic Color GetColor(int hexValue)\n{\n    Color color;\n\n    color.r = (unsigned char)(hexValue >> 24) & 0xFF;\n    color.g = (unsigned char)(hexValue >> 16) & 0xFF;\n    color.b = (unsigned char)(hexValue >> 8) & 0xFF;\n    color.a = (unsigned char)hexValue & 0xFF;\n\n    return color;\n}\n\n// Returns hexadecimal value for a Color\nstatic int ColorToInt(Color color)\n{\n    return (((int)color.r << 24) | ((int)color.g << 16) | ((int)color.b << 8) | (int)color.a);\n}\n\n// Check if point is inside rectangle\nstatic bool CheckCollisionPointRec(Vector2 point, Rectangle rec)\n{\n    bool collision = false;\n\n    if ((point.x >= rec.x) && (point.x <= (rec.x + rec.width)) &&\n        (point.y >= rec.y) && (point.y <= (rec.y + rec.height))) collision = true;\n\n    return collision;\n}\n\n// Color fade-in or fade-out, alpha goes from 0.0f to 1.0f\nstatic Color Fade(Color color, float alpha)\n{\n    if (alpha < 0.0f) alpha = 0.0f;\n    else if (alpha > 1.0f) alpha = 1.0f;\n\n    Color result = { color.r, color.g, color.b, (unsigned char)(255.0f*alpha) };\n\n    return result;\n}\n\n// Formatting of text with variables to 'embed'\nstatic const char *TextFormat(const char *text, ...)\n{\n    #if !defined(RAYGUI_TEXTFORMAT_MAX_SIZE)\n        #define RAYGUI_TEXTFORMAT_MAX_SIZE   256\n    #endif\n\n    static char buffer[RAYGUI_TEXTFORMAT_MAX_SIZE];\n\n    va_list args;\n    va_start(args, text);\n    vsprintf(buffer, text, args);\n    va_end(args);\n\n    return buffer;\n}\n\n// Draw rectangle with vertical gradient fill color\n// NOTE: This function is only used by GuiColorPicker()\nstatic void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2)\n{\n    Rectangle bounds = { (float)posX, (float)posY, (float)width, (float)height };\n    DrawRectangleGradientEx(bounds, color1, color2, color2, color1);\n}\n\n// Split string into multiple strings\nconst char **TextSplit(const char *text, char delimiter, int *count)\n{\n    // NOTE: Current implementation returns a copy of the provided string with '\\0' (string end delimiter)\n    // inserted between strings defined by \"delimiter\" parameter. No memory is dynamically allocated,\n    // all used memory is static... it has some limitations:\n    //      1. Maximum number of possible split strings is set by RAYGUI_TEXTSPLIT_MAX_ITEMS\n    //      2. Maximum size of text to split is RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE\n\n    #if !defined(RAYGUI_TEXTSPLIT_MAX_ITEMS)\n        #define RAYGUI_TEXTSPLIT_MAX_ITEMS        128\n    #endif\n    #if !defined(RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE)\n        #define RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE      1024\n    #endif\n\n    static const char *result[RAYGUI_TEXTSPLIT_MAX_ITEMS] = { NULL };\n    static char buffer[RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE] = { 0 };\n    memset(buffer, 0, RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE);\n\n    result[0] = buffer;\n    int counter = 0;\n\n    if (text != NULL)\n    {\n        counter = 1;\n\n        // Count how many substrings we have on text and point to every one\n        for (int i = 0; i < RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE; i++)\n        {\n            buffer[i] = text[i];\n            if (buffer[i] == '\\0') break;\n            else if (buffer[i] == delimiter)\n            {\n                buffer[i] = '\\0';   // Set an end of string at this point\n                result[counter] = buffer + i + 1;\n                counter++;\n\n                if (counter == RAYGUI_TEXTSPLIT_MAX_ITEMS) break;\n            }\n        }\n    }\n\n    *count = counter;\n    return result;\n}\n\n// Get integer value from text\n// NOTE: This function replaces atoi() [stdlib.h]\nstatic int TextToInteger(const char *text)\n{\n    int value = 0;\n    int sign = 1;\n\n    if ((text[0] == '+') || (text[0] == '-'))\n    {\n        if (text[0] == '-') sign = -1;\n        text++;\n    }\n\n    for (int i = 0; ((text[i] >= '0') && (text[i] <= '9')); ++i) value = value*10 + (int)(text[i] - '0');\n\n    return value*sign;\n}\n\n// Encode codepoint into UTF-8 text (char array size returned as parameter)\nstatic const char *CodepointToUTF8(int codepoint, int *byteSize)\n{\n    static char utf8[6] = { 0 };\n    int size = 0;\n\n    if (codepoint <= 0x7f)\n    {\n        utf8[0] = (char)codepoint;\n        size = 1;\n    }\n    else if (codepoint <= 0x7ff)\n    {\n        utf8[0] = (char)(((codepoint >> 6) & 0x1f) | 0xc0);\n        utf8[1] = (char)((codepoint & 0x3f) | 0x80);\n        size = 2;\n    }\n    else if (codepoint <= 0xffff)\n    {\n        utf8[0] = (char)(((codepoint >> 12) & 0x0f) | 0xe0);\n        utf8[1] = (char)(((codepoint >>  6) & 0x3f) | 0x80);\n        utf8[2] = (char)((codepoint & 0x3f) | 0x80);\n        size = 3;\n    }\n    else if (codepoint <= 0x10ffff)\n    {\n        utf8[0] = (char)(((codepoint >> 18) & 0x07) | 0xf0);\n        utf8[1] = (char)(((codepoint >> 12) & 0x3f) | 0x80);\n        utf8[2] = (char)(((codepoint >>  6) & 0x3f) | 0x80);\n        utf8[3] = (char)((codepoint & 0x3f) | 0x80);\n        size = 4;\n    }\n\n    *byteSize = size;\n\n    return utf8;\n}\n\n// Get next codepoint in a UTF-8 encoded text, scanning until '\\0' is found\n// When a invalid UTF-8 byte is encountered we exit as soon as possible and a '?'(0x3f) codepoint is returned\n// Total number of bytes processed are returned as a parameter\n// NOTE: the standard says U+FFFD should be returned in case of errors\n// but that character is not supported by the default font in raylib\nstatic int GetCodepoint(const char *text, int *bytesProcessed)\n{\n/*\n    UTF-8 specs from https://www.ietf.org/rfc/rfc3629.txt\n\n    Char. number range  |        UTF-8 octet sequence\n      (hexadecimal)    |              (binary)\n    --------------------+---------------------------------------------\n    0000 0000-0000 007F | 0xxxxxxx\n    0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n    0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n    0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n*/\n    // NOTE: on decode errors we return as soon as possible\n\n    int code = 0x3f;   // Codepoint (defaults to '?')\n    int octet = (unsigned char)(text[0]); // The first UTF8 octet\n    *bytesProcessed = 1;\n\n    if (octet <= 0x7f)\n    {\n        // Only one octet (ASCII range x00-7F)\n        code = text[0];\n    }\n    else if ((octet & 0xe0) == 0xc0)\n    {\n        // Two octets\n\n        // [0]xC2-DF    [1]UTF8-tail(x80-BF)\n        unsigned char octet1 = text[1];\n\n        if ((octet1 == '\\0') || ((octet1 >> 6) != 2)) { *bytesProcessed = 2; return code; } // Unexpected sequence\n\n        if ((octet >= 0xc2) && (octet <= 0xdf))\n        {\n            code = ((octet & 0x1f) << 6) | (octet1 & 0x3f);\n            *bytesProcessed = 2;\n        }\n    }\n    else if ((octet & 0xf0) == 0xe0)\n    {\n        // Three octets\n        unsigned char octet1 = text[1];\n        unsigned char octet2 = '\\0';\n\n        if ((octet1 == '\\0') || ((octet1 >> 6) != 2)) { *bytesProcessed = 2; return code; } // Unexpected sequence\n\n        octet2 = text[2];\n\n        if ((octet2 == '\\0') || ((octet2 >> 6) != 2)) { *bytesProcessed = 3; return code; } // Unexpected sequence\n\n        // [0]xE0    [1]xA0-BF       [2]UTF8-tail(x80-BF)\n        // [0]xE1-EC [1]UTF8-tail    [2]UTF8-tail(x80-BF)\n        // [0]xED    [1]x80-9F       [2]UTF8-tail(x80-BF)\n        // [0]xEE-EF [1]UTF8-tail    [2]UTF8-tail(x80-BF)\n\n        if (((octet == 0xe0) && !((octet1 >= 0xa0) && (octet1 <= 0xbf))) ||\n            ((octet == 0xed) && !((octet1 >= 0x80) && (octet1 <= 0x9f)))) { *bytesProcessed = 2; return code; }\n\n        if ((octet >= 0xe0) && (0 <= 0xef))\n        {\n            code = ((octet & 0xf) << 12) | ((octet1 & 0x3f) << 6) | (octet2 & 0x3f);\n            *bytesProcessed = 3;\n        }\n    }\n    else if ((octet & 0xf8) == 0xf0)\n    {\n        // Four octets\n        if (octet > 0xf4) return code;\n\n        unsigned char octet1 = text[1];\n        unsigned char octet2 = '\\0';\n        unsigned char octet3 = '\\0';\n\n        if ((octet1 == '\\0') || ((octet1 >> 6) != 2)) { *bytesProcessed = 2; return code; }  // Unexpected sequence\n\n        octet2 = text[2];\n\n        if ((octet2 == '\\0') || ((octet2 >> 6) != 2)) { *bytesProcessed = 3; return code; }  // Unexpected sequence\n\n        octet3 = text[3];\n\n        if ((octet3 == '\\0') || ((octet3 >> 6) != 2)) { *bytesProcessed = 4; return code; }  // Unexpected sequence\n\n        // [0]xF0       [1]x90-BF       [2]UTF8-tail  [3]UTF8-tail\n        // [0]xF1-F3    [1]UTF8-tail    [2]UTF8-tail  [3]UTF8-tail\n        // [0]xF4       [1]x80-8F       [2]UTF8-tail  [3]UTF8-tail\n\n        if (((octet == 0xf0) && !((octet1 >= 0x90) && (octet1 <= 0xbf))) ||\n            ((octet == 0xf4) && !((octet1 >= 0x80) && (octet1 <= 0x8f)))) { *bytesProcessed = 2; return code; } // Unexpected sequence\n\n        if (octet >= 0xf0)\n        {\n            code = ((octet & 0x7) << 18) | ((octet1 & 0x3f) << 12) | ((octet2 & 0x3f) << 6) | (octet3 & 0x3f);\n            *bytesProcessed = 4;\n        }\n    }\n\n    if (code > 0x10ffff) code = 0x3f;     // Codepoints after U+10ffff are invalid\n\n    return code;\n}\n#endif      // RAYGUI_STANDALONE\n\n#endif      // RAYGUI_IMPLEMENTATION\n",
			"file": "build/_deps/raylib-src/examples/shapes/raygui.h",
			"file_size": 218645,
			"file_write_time": 133060288238549693,
			"settings":
			{
				"buffer_size": 218640,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		}
	],
	"build_system": "Packages/User/cmake build.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/cmake build.sublime-build",
					""
				]
			],
			[
				"Packages/User/cmake build.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/cmake build.sublime-build",
					""
				],
				[
					"Packages/User/cmake build.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/cmake build.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/cmake build.sublime-build",
					""
				],
				[
					"Packages/User/cmake build.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/cmake build.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lsp",
				"LSP: Toggle Log Panel"
			],
			[
				"lsp res",
				"LSP: Restart Server"
			],
			[
				"ls",
				"LSP: Restart Server"
			],
			[
				"lsp re",
				"LSP: Restart Server"
			],
			[
				"colored comm",
				"Colored Comments: Clear Colorization"
			],
			[
				"color com",
				"Colored Comments: Override Current Color Scheme"
			],
			[
				"comm",
				"Colored Comments: Override Current Color Scheme"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"em",
				"Emoji: Insert Emoji"
			],
			[
				"emoji",
				"Emoji: Insert Emoji"
			],
			[
				"wo",
				"Word Wrap: Toggle"
			],
			[
				"wor",
				"Word Wrap: Toggle"
			],
			[
				"ref",
				"Project: Refresh Folders"
			],
			[
				"emoj",
				"Emoji: Insert Emoji"
			],
			[
				"lsp ena",
				"LSP: Enable Language Server Globally"
			],
			[
				"re",
				"Project: Refresh Folders"
			],
			[
				"refre",
				"Project: Refresh Folders"
			],
			[
				"trim",
				"Trim Trailing White Space"
			],
			[
				"lsp l",
				"LSP: Toggle Log Panel"
			],
			[
				" lsp res",
				"LSP: Restart Server"
			],
			[
				"up",
				"Convert Case: Upper Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"origami res",
				"Origami: Restore Saved Layout"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"word w",
				"Word Wrap: Toggle"
			],
			[
				"disc",
				"Preferences: Discord Rich Presence Settings"
			],
			[
				"dis",
				"Preferences: MarkdownEditing Settings - Distraction Free"
			],
			[
				"discord",
				"Preferences: Discord Rich Presence Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Disable Package"
			],
			[
				"close",
				"File: Close All"
			],
			[
				"gdb",
				"SublimeGDB: Open Console View"
			],
			[
				"refresh",
				"Project: Refresh Folders"
			],
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"forma",
				"LSP: Format File"
			],
			[
				"tra",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"lsp lo",
				"LSP: Toggle Log Panel"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"Package Control:  ena",
				"Package Control: Enable Package"
			],
			[
				"whi",
				"Trim Trailing White Space"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 152.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/I/workspace/CPP/melody-128",
		"/I/workspace/CPP/melody-128/resource",
		"/I/workspace/CPP/melody-128/src",
		"/I/workspace/CPP/melody-128/src/TestScene",
		"/I/workspace/CPP/melody-128/src/utils"
	],
	"file_history":
	[
		"/I/workspace/CPP/melody-128/build/_deps/imgui-src/imgui.h",
		"/I/workspace/CPP/melody-128/resource/config.yml",
		"/I/workspace/CPP/melody-128/src/main.cpp",
		"/I/workspace/CPP/melody-128/build/_deps/rlimgui-src/rlImGui.h",
		"/I/workspace/CPP/melody-128/CMakeLists.txt",
		"/I/workspace/CPP/melody-128/build/_deps/raylib-src/src/raylib.h",
		"/I/workspace/CPP/raylib-cmake/src/main.cpp",
		"/I/workspace/CPP/raylib-cmake/src/epch.hpp",
		"/I/workspace/CPP/melody-128/src/utils/Config.hpp",
		"/I/workspace/CPP/melody-128/src/utils/Terminal.hpp",
		"/I/workspace/CPP/melody-128/src/utils/Config.cpp",
		"/I/workspace/CPP/melody-128/src/TestScene/ConfigLoader.cpp",
		"/I/workspace/Gambar/ascii/sketch2.txt",
		"/I/workspace/CPP/melody-128/src/TestScene/TerminalBasic.cpp",
		"/I/workspace/CPP/melody-128/src/Global.hpp",
		"/I/workspace/CPP/melody-128/src/TestScene/TestScene.hpp",
		"/I/workspace/CPP/melody-128/src/utils/Terminal.cpp",
		"/I/workspace/CPP/melody-128/build/_deps/raylib-src/src/rcore.c",
		"/I/workspace/C/handmade-journey/_intro/day 4/Readme.MD",
		"/I/workspace/C/handmade-journey/README.MD",
		"/I/workspace/C/handmade-journey/_intro/day 3/Readme.MD",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/User/cmake build.sublime-build",
		"/I/workspace/CPP/melody-128/build/_deps/raylib-src/projects/SublimeText/raylib.sublime-build",
		"/I/workspace/CPP/melody-128/build/_deps/raylib-src/projects/SublimeText/raylib.sublime-project",
		"/I/workspace/CPP/raylib-cmake/CMakeLists.txt",
		"/I/workspace/CPP/melody-128/build/_deps/raylib-src/examples/shapes/raygui.h",
		"/I/workspace/CPP/melody-128/src/bluish.h",
		"/I/workspace/CPP/melody-128/src/melody128.rgs",
		"/I/workspace/CPP/melody-128/.gitignore",
		"/I/workspace/CPP/melody-128/src/utils/utils.cpp",
		"/I/workspace/CPP/melody-128/src/utils/TerminalFont.hpp",
		"/I/workspace/CPP/melody-128/vendor/melody/melody/core/Scene.cpp",
		"/I/workspace/CPP/melody-128/TestScene/TestScene.hpp",
		"/I/workspace/CPP/melody-128/vendor/melody/melody/geom/Matrix.cpp",
		"/I/workspace/CPP/melody-128/vendor/melody/melody/core/App.cpp",
		"/I/workspace/CPP/melody-128/vendor/melody/melody.hpp",
		"/I/workspace/JAVA/project-j2me/tools/CPP/parse font/CMakeLists.txt",
		"/I/workspace/CPP/raylib-web/CMakeLists.txt",
		"/I/workspace/CPP/melody-126/resource/default.fnt",
		"/I/workspace/CPP/melody-126/src/TestScene/GridRender.cpp",
		"/I/workspace/CPP/melody-126/src/main.cpp",
		"/I/workspace/JAVA/project-j2me/tools/CPP/parse font/src/main.cpp",
		"/I/workspace/CPP/melody-126/src/Global.hpp",
		"/I/workspace/CPP/melody-126/CMakeLists.txt",
		"/I/workspace/CPP/melody-126/vendor/melody/melody/geom/Matrix.cpp",
		"/I/workspace/CPP/raylib-cmake/src/scene/Scene.hpp",
		"/I/workspace/CPP/melody-126/vendor/melody/melody/core/Scene.cpp",
		"/I/workspace/CPP/melody-126/build/_deps/raylib-build/raylib/include/raylib.h",
		"/I/workspace/CPP/melody-126/src/TestScene/TestScene.hpp",
		"/I/workspace/CPP/raylib-cmake/src/scene/MatrixPlayground.cpp",
		"/I/workspace/CPP/melody-126/src/scene/1-GridRender.cpp",
		"/I/workspace/CPP/melody-126/vendor/melody/melody.hpp",
		"/I/workspace/CPP/melody-126/vendor/melody/melody/core/App.cpp",
		"/I/workspace/Gambar/ascii/done1.txt",
		"/I/workspace/Gambar/ascii/list.txt",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/TrailingSpaces/trailing_spaces.sublime-settings",
		"/I/workspace/WEBDEV/melody.my.id/content/diary/my-silly-dream.md",
		"/I/workspace/Gambar/ascii/sketch.txt",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/I/workspace/Gambar/ascii/melody.ascii",
		"/E/software/advASCIIdraw2.0.3/data/gfx/charsets/firamono.chr",
		"/E/software/advASCIIdraw2.0.3/data/gfx/charsets/DF squared by Alloy.chr",
		"/E/AAANJAY/1/base 1",
		"/I/workspace/C/handmade-journey/CMakeLists.txt",
		"/I/workspace/C/handmade-journey/src/main.cpp",
		"/I/workspace/C/handmade-journey/.gitignore",
		"/I/workspace/C/handmade-journey/Makefile",
		"/I/workspace/C/handmade-journey/intro/day 2/CMakeLists.txt",
		"/I/workspace/C/handmade-journey/intro/day 3/Readme.MD",
		"/I/workspace/C/handmade-journey/intro/day 3/main.cpp",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/SublimeGDB/SublimeGDB.sublime-settings",
		"/I/workspace/C/handmade-journey/intro/day 2/build.bat",
		"/I/workspace/C/handmade-journey/intro/day 2/cmake.bat",
		"/I/workspace/C/handmade-journey/intro/day 1/Readme.MD",
		"/I/workspace/C/handmade-journey/intro/day 1/CMakeLists.txt",
		"/I/workspace/C/handmade-journey/intro/day 1/main.cpp",
		"/I/workspace/C/handmade-journey/day 1/CMakeLists.txt",
		"/I/workspace/C/handmade-journey/day 1/main.cpp",
		"/I/workspace/C/handmade-journey/day 1",
		"/I/workspace/CPP/raylib-web/build/index.html",
		"/I/workspace/CPP/raylib-web/build/myProject.js",
		"/I/workspace/CPP/raylib-web/build/myProject.html",
		"/I/workspace/CPP/raylib-web/src/main.cpp",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/Javascript Beautify/JavascriptBeautify.sublime-settings",
		"/I/workspace/CPP/LIB/raylib/projects/CMake/CMakeLists.txt",
		"/C/Users/Melody/AppData/Roaming/Sublime Text/Packages/LSP/LSP.sublime-settings",
		"/I/workspace/CPP/raylib-web/compile_commands.json"
	],
	"find":
	{
		"height": 55.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"raylib",
			"color",
			"static",
			"ConvertRGBtoHSV",
			"hsv.x",
			"lastHue",
			"color",
			"guicolorpicker",
			"RAYGUI_CLITERAL",
			"roundf",
			"&",
			",",
			"int32_t",
			"long",
			"uint8_t",
			"uint32_t",
			"rgb",
			"currentFg",
			"set",
			";",
			"hue",
			"c2",
			"c1",
			"hDsv",
			"rgb",
			"raylib",
			"GuiColorPicker",
			"ColorPicker",
			"bg",
			"sstream",
			"isMouseInGrid",
			"mouse",
			"isMouseInGrid",
			"x",
			"cursor",
			"stringstream",
			"term",
			"fg",
			"std::floor(",
			"width",
			"_gridMatrix",
			"WINDOW_SIZE",
			"_camera2d",
			"_enableFPS",
			"drawGrid",
			"_camera2d",
			"_gridBuffer",
			"drawGrid",
			"_gridBuffer",
			"WINDOW_SIZE",
			"status",
			"fg",
			"CamNavigation",
			"begin",
			"term.height-1",
			"term.height-2",
			"term",
			"term.height-3",
			"rand() % 256",
			"iostream",
			"std::string str",
			"-1",
			"CANVAS_SIZE",
			"ConfigLoader",
			"FONT_SIZE.y",
			"FONT_SIZE.x",
			"term",
			"tmf.height",
			"tmf.width",
			"Config::FONT_SIZE.y",
			"Config::FONT_SIZE.x",
			"uint16_t",
			"FONT_SIZE",
			"static",
			"Config::",
			"FONT_FILE",
			"Config::",
			"FONT_SIZE",
			"SCREEN_SIZE",
			"font",
			"std::string",
			"raygui",
			"keycode",
			"float"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"term.tmf.height",
			"term.tmf.width",
			"term.tmf.height",
			"term.tmf.width",
			"tmf.height",
			"tmf.width"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/utils/Terminal.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6788,
						"regions":
						{
						},
						"selection":
						[
							[
								2130,
								2130
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2131,
										2132
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2020,
										2021
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_hover_provider_count": 3,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/utils/Terminal.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/TestScene/CamNavigation.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11877,
						"regions":
						{
						},
						"selection":
						[
							[
								9315,
								9315
							]
						],
						"settings":
						{
							"_anf_new": "",
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										9357,
										9358
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										9208,
										9209
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_hover_provider_count": 8,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/TestScene/CamNavigation.cpp",
							"show_definitions": false,
							"spell_check": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 2989.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "src/TestScene/UILayout.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1801,
						"regions":
						{
						},
						"selection":
						[
							[
								1037,
								1058
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1057,
										1058
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1037,
										1038
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_hover_provider_count": 4,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/TestScene/UILayout.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/TestScene/TestScene.hpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 535,
						"regions":
						{
						},
						"selection":
						[
							[
								500,
								500
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										501,
										502
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										500,
										501
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/TestScene/TestScene.hpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/TestScene/TerminalBasic.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4514,
						"regions":
						{
						},
						"selection":
						[
							[
								712,
								716
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										729,
										730
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										711,
										712
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/TestScene/TerminalBasic.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 216.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/I/workspace/CPP/raylib-cmake/src/scene/MapEditor.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14770,
						"regions":
						{
						},
						"selection":
						[
							[
								2138,
								2138
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2146,
										2147
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										2129,
										2130
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_hover_provider_count": 4,
							"lsp_uri": "file:///I:/workspace/CPP/raylib-cmake/src/scene/MapEditor.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 50.0,
						"translation.y": 1681.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "CMakeLists.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2357,
						"regions":
						{
						},
						"selection":
						[
							[
								1853,
								1853
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1857,
										1858
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										1829,
										1830
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/CMakeLists.txt",
							"syntax": "Packages/CMake/CMake.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 810.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/main.cpp",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 959,
						"regions":
						{
						},
						"selection":
						[
							[
								701,
								701
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".<>:\"/*",
									"selector": "punctuation.accessor | (meta.preprocessor.include string - punctuation.definition.string.end)",
									"server": "clangd"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										716,
										717
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										263,
										264
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/src/main.cpp",
							"show_definitions": false,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 253.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "build/_deps/raylib-src/examples/shapes/raygui.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 218640,
						"regions":
						{
						},
						"selection":
						[
							[
								201743,
								201743
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										201748,
										201749
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										201029,
										201030
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"git_gutter_is_enabled": true,
							"lsp_uri": "file:///I:/workspace/CPP/melody-128/build/_deps/raylib-src/examples/shapes/raygui.h",
							"show_definitions": true,
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 73411.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 86.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.655197657394,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.diagnostics":
	{
		"height": 113.0
	},
	"output.exec":
	{
		"height": 105.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.language servers":
	{
		"height": 137.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 137.0
	},
	"pinned_build_system": "",
	"project": "melody-128.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"src\\main.cpp"
			],
			[
				"cmak",
				"CMakeLists.txt"
			],
			[
				"cma",
				"CMakeLists.txt"
			],
			[
				"raygu",
				"build\\_deps\\raylib-src\\examples\\shapes\\raygui.h"
			],
			[
				"con",
				"resource\\config.yml"
			],
			[
				"conf",
				"resource\\config.yml"
			],
			[
				"termi",
				"src\\utils\\Terminal.hpp"
			],
			[
				"confi",
				"src\\utils\\Config.hpp"
			],
			[
				"configLoad",
				"src\\TestScene\\ConfigLoader.cpp"
			],
			[
				"Test",
				"src\\TestScene\\TestScene.hpp"
			],
			[
				"Conf",
				"src\\utils\\Config.cpp"
			],
			[
				"termin",
				"src\\utils\\Terminal.hpp"
			],
			[
				"globa",
				"src\\Global.hpp"
			],
			[
				"glo",
				"src\\Global.hpp"
			],
			[
				"Terminal",
				"src\\utils\\Terminal.cpp"
			],
			[
				"termina",
				"src\\utils\\Terminal.hpp"
			],
			[
				"ter",
				"src\\utils\\Terminal.cpp"
			],
			[
				"core.c",
				"build\\_deps\\raylib-src\\src\\rcore.c"
			],
			[
				"raylib.h",
				"build\\_deps\\raylib-src\\src\\raylib.h"
			],
			[
				"raygui",
				"build\\_deps\\raylib-src\\examples\\shapes\\raygui.h"
			],
			[
				"testS",
				"src\\TestScene\\TestScene.hpp"
			],
			[
				"terminal",
				"src\\TestScene\\TerminalBasic.cpp"
			],
			[
				"test",
				"src\\TestScene\\TestScene.hpp"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"my si",
				"content\\diary\\my-silly-dream.md"
			],
			[
				"i dont",
				"content\\diary\\i-dont-know.md"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 200.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
